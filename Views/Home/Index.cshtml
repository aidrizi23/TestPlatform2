@{
ViewData["Title"] = "Home";
}

<div class="home-container">
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-content">
            <div class="hero-text">
                <h1 class="hero-title">
                    Welcome to <span class="brand-accent">TestPlatform</span>
                </h1>
                <p class="hero-subtitle">
                    Create, share, and analyze educational assessments with our comprehensive testing platform
                </p>
                <div class="hero-stats">
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">10K+</div>
                            <div class="stat-label">Active Users</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-clipboard-list"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">50K+</div>
                            <div class="stat-label">Tests Created</div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <div class="stat-content">
                            <div class="stat-number">1M+</div>
                            <div class="stat-label">Assessments</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="hero-actions">
                @if (!User.Identity.IsAuthenticated)
                {
                <a asp-controller="Account" asp-action="Register" class="btn btn-primary btn-lg hero-cta">
                    <i class="fas fa-rocket me-2"></i>Get Started Free
                </a>
                <a asp-controller="Account" asp-action="Login" class="btn btn-outline-primary btn-lg">
                    <i class="fas fa-sign-in-alt me-2"></i>Sign In
                </a>
                }
                else
                {
                @* <button type="button" class="btn btn-primary btn-lg hero-cta" data-bs-toggle="modal" data-bs-target="#createTestModal"> *@
                @*     <i class="fas fa-plus-circle me-2"></i>Create New Test *@
                @* </button> *@
                <a asp-controller="Test" asp-action="Index" class="btn btn-outline-primary btn-lg">
                    <i class="fas fa-clipboard-list me-2"></i>My Tests
                </a>
                <a asp-controller="Subscription" asp-action="Index" class="btn btn-outline-success btn-lg">
                    <i class="fas fa-crown me-2"></i>Upgrade Plan
                </a>
                }
            </div>
        </div>

        <div class="hero-visual">
            <div class="visual-card">
                <div class="card-header">
                    <div class="card-title">Sample Test</div>
                    <div class="card-status active">Active</div>
                </div>
                <div class="card-content">
                    <div class="question-preview">
                        <div class="question-number">1</div>
                        <div class="question-text">What is the capital of France?</div>
                    </div>
                    <div class="options-preview">
                        <div class="option">A) London</div>
                        <div class="option correct">B) Paris</div>
                        <div class="option">C) Berlin</div>
                        <div class="option">D) Madrid</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Test Access Section -->
    <section class="test-access-section">
        <div class="access-container">
            <div class="access-header">
                <h2 class="access-title">
                    <i class="fas fa-key me-3"></i>Take a Test
                </h2>
                <p class="access-description">
                    Have an access token? Enter it below to begin your test
                </p>
            </div>

            @if (TempData["ErrorMessage"] != null)
            {
            <div class="alert alert-danger">
                <div class="alert-content">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span>@TempData["ErrorMessage"]</span>
                </div>
            </div>
            }

            <form asp-action="EnterToken" asp-controller="TestAttempt" method="post" class="token-form" asp-antiforgery="true">
                <div class="token-input-group">
                    <div class="input-wrapper">
                        <i class="fas fa-lock input-icon"></i>
                        <input type="text" id="token" name="token" class="form-control token-input"
                               placeholder="Enter your access token" required autocomplete="off" 
                               aria-label="Test access token" aria-describedby="token-help" />
                    </div>
                    <button type="submit" class="btn btn-primary token-submit">
                        <i class="fas fa-play-circle me-2"></i>Start Test
                    </button>
                </div>
                <div class="token-help" id="token-help">
                    <i class="fas fa-info-circle me-2"></i>
                    Your instructor provided this token via email
                </div>
            </form>
        </div>
    </section>

    <!-- Features Section -->
    <section class="features-section">
        <div class="features-header">
            <h2 class="section-title">Powerful Features for Modern Education</h2>
            <p class="section-subtitle">
                Everything you need to create, distribute, and analyze educational assessments
            </p>
        </div>

        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon create">
                    <i class="fas fa-edit"></i>
                </div>
                <div class="feature-content">
                    <h3 class="feature-title">Easy Test Creation</h3>
                    <p class="feature-description">
                        Build comprehensive tests with multiple question types including multiple choice,
                        true/false, and short answer questions with our intuitive interface.
                    </p>
                    <div class="feature-highlights">
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Multiple question types
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Rich text formatting
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Flexible scoring
                        </div>
                    </div>
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon distribute">
                    <i class="fas fa-share-alt"></i>
                </div>
                <div class="feature-content">
                    <h3 class="feature-title">Seamless Distribution</h3>
                    <p class="feature-description">
                        Share tests effortlessly with students through secure email invitations
                        and unique access tokens for controlled test-taking environments.
                    </p>
                    <div class="feature-highlights">
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Email invitations
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Secure access tokens
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Attempt limitations
                        </div>
                    </div>
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon analyze">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="feature-content">
                    <h3 class="feature-title">Advanced Analytics</h3>
                    <p class="feature-description">
                        Gain deep insights into student performance with comprehensive analytics,
                        detailed reports, and question-level performance breakdowns.
                    </p>
                    <div class="feature-highlights">
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Performance insights
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Detailed reports
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Question analysis
                        </div>
                    </div>
                </div>
            </div>

            <div class="feature-card">
                <div class="feature-icon secure">
                    <i class="fas fa-shield-alt"></i>
                </div>
                <div class="feature-content">
                    <h3 class="feature-title">Secure & Reliable</h3>
                    <p class="feature-description">
                        Protect test integrity with advanced security features including
                        proctoring controls, time limits, and attempt monitoring.
                    </p>
                    <div class="feature-highlights">
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Proctoring controls
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Time management
                        </div>
                        <div class="highlight-item">
                            <i class="fas fa-check me-2"></i>Attempt tracking
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- How It Works Section -->
    <section class="how-it-works-section">
        <div class="works-header">
            <h2 class="section-title">How It Works</h2>
            <p class="section-subtitle">Get started in three simple steps</p>
        </div>

        <div class="steps-container">
            <div class="step-item">
                <div class="step-number">1</div>
                <div class="step-content">
                    <h3 class="step-title">Create Your Test</h3>
                    <p class="step-description">
                        Build your test with our easy-to-use question builder.
                        Add multiple choice, true/false, or short answer questions.
                    </p>
                </div>
                <div class="step-visual">
                    <i class="fas fa-edit"></i>
                </div>
            </div>

            <div class="step-connector"></div>

            <div class="step-item">
                <div class="step-number">2</div>
                <div class="step-content">
                    <h3 class="step-title">Invite Students</h3>
                    <p class="step-description">
                        Send secure invitations to your students via email.
                        Each student receives a unique access token.
                    </p>
                </div>
                <div class="step-visual">
                    <i class="fas fa-envelope"></i>
                </div>
            </div>

            <div class="step-connector"></div>

            <div class="step-item">
                <div class="step-number">3</div>
                <div class="step-content">
                    <h3 class="step-title">Analyze Results</h3>
                    <p class="step-description">
                        Review detailed analytics and performance insights.
                        Track student progress and identify learning gaps.
                    </p>
                </div>
                <div class="step-visual">
                    <i class="fas fa-chart-line"></i>
                </div>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    @if (!User.Identity.IsAuthenticated)
    {
    <section class="cta-section">
        <div class="cta-content">
            <div class="cta-text">
                <h2 class="cta-title">Ready to Transform Your Testing?</h2>
                <p class="cta-description">
                    Join thousands of educators who trust TestPlatform for their assessment needs.
                    Start creating professional tests today.
                </p>
            </div>
            <div class="cta-actions">
                <a asp-controller="Account" asp-action="Register" class="btn btn-primary btn-lg cta-primary">
                    <i class="fas fa-rocket me-2"></i>Start Free Trial
                </a>
                <div class="cta-note">
                    <i class="fas fa-check-circle me-2"></i>
                    No credit card required • Free forever plan available
                </div>
            </div>
        </div>
    </section>
    }
    else
    {
    <!-- Subscription Benefits Section for Authenticated Users -->
    <section class="subscription-section">
        <div class="subscription-content">
            <div class="subscription-header">
                <div class="subscription-icon">
                    <i class="fas fa-crown"></i>
                </div>
                <h2 class="subscription-title">Unlock Premium Features</h2>
                <p class="subscription-description">
                    Take your testing to the next level with our premium subscription.
                    Get advanced features, unlimited tests, and priority support.
                </p>
            </div>
            
            <div class="benefits-grid">
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-infinity"></i>
                    </div>
                    <div class="benefit-content">
                        <h4>Unlimited Tests</h4>
                        <p>Create as many tests as you need without any restrictions</p>
                    </div>
                </div>
                
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="benefit-content">
                        <h4>Advanced Analytics</h4>
                        <p>Get detailed insights and performance reports</p>
                    </div>
                </div>
                
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-headset"></i>
                    </div>
                    <div class="benefit-content">
                        <h4>Priority Support</h4>
                        <p>Get help when you need it with priority customer support</p>
                    </div>
                </div>
                
                <div class="benefit-item">
                    <div class="benefit-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="benefit-content">
                        <h4>Team Collaboration</h4>
                        <p>Share tests and collaborate with your team members</p>
                    </div>
                </div>
            </div>
            
            <div class="subscription-actions">
                <a asp-controller="Subscription" asp-action="Index" class="btn btn-success btn-lg subscription-cta">
                    <i class="fas fa-crown me-2"></i>Upgrade Now
                </a>
                <div class="subscription-note">
                    <i class="fas fa-shield-alt me-2"></i>
                    30-day money-back guarantee • Cancel anytime
                </div>
            </div>
        </div>
    </section>
    }
</div>

<!-- Create Test Modal (Only show if authenticated) -->
@if (User.Identity.IsAuthenticated)
{
<div class="modal fade" id="createTestModal" tabindex="-1" aria-labelledby="createTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTestModalLabel">
                    <i class="fas fa-plus-circle me-2 text-primary"></i>Create New Test
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createTestForm" novalidate>
                <div class="modal-body">
                    <!-- Basic Information Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h6>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="testTitle" class="form-label">Test Title <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-heading"></i></span>
                                    <input type="text" class="form-control" id="testTitle" name="Title" required
                                           placeholder="Enter a descriptive title for your test">
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-12 mb-3">
                                <label for="testDescription" class="form-label">Description</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                    <textarea class="form-control" id="testDescription" name="Description" rows="3"
                                              placeholder="Enter instructions or details about the test"></textarea>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Optional description that students will see before starting</div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Settings Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-cog me-2"></i>Test Settings
                        </h6>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="timeLimit" class="form-label">Time Limit (minutes) <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                    <input type="number" class="form-control" id="timeLimit" name="TimeLimit"
                                           min="1" max="180" value="60" required>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Maximum time allowed to complete the test</div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="maxAttempts" class="form-label">Max Attempts <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-redo"></i></span>
                                    <input type="number" class="form-control" id="maxAttempts" name="MaxAttempts"
                                           min="1" max="10" value="1" required>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Number of times students can attempt</div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="randomizeQuestions"
                                           name="RandomizeQuestions">
                                    <label class="form-check-label" for="randomizeQuestions">
                                        <i class="fas fa-random me-2"></i>Randomize Question Order
                                    </label>
                                </div>
                                <div class="form-text">Questions will appear in random order for each student</div>
                            </div>
                        </div>
                    </div>

                    <!-- Live Preview Section -->
                    <div class="preview-section">
                        <h6 class="preview-title">
                            <i class="fas fa-eye me-2"></i>Live Preview
                        </h6>
                        <div class="preview-content">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="preview-item">
                                        <span class="preview-label">Title:</span>
                                        <span class="preview-value" id="preview-title">Your test title</span>
                                    </div>
                                    <div class="preview-item">
                                        <span class="preview-label">Time Limit:</span>
                                        <span class="preview-value" id="preview-time">60 minutes</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="preview-item">
                                        <span class="preview-label">Max Attempts:</span>
                                        <span class="preview-value" id="preview-attempts">1</span>
                                    </div>
                                    <div class="preview-item">
                                        <span class="preview-label">Question Order:</span>
                                        <span class="preview-value" id="preview-randomize">Sequential</span>
                                    </div>
                                </div>
                            </div>

                            <div class="preview-features" id="preview-features">
                                <!-- Dynamic feature tags will be added here -->
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary btn-create-test">
                        <i class="fas fa-save me-2"></i>Create Test
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-success" id="successModalLabel">
                    <i class="fas fa-check-circle me-2"></i>Success!
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="success-icon mb-3">
                    <i class="fas fa-check-circle text-success"></i>
                </div>
                <h4 class="mb-3">Test Created Successfully!</h4>
                <p class="text-muted mb-4" id="successMessage">Your test has been created and is ready for questions.</p>
                <div class="d-flex gap-2 justify-content-center">
                    <button type="button" class="btn btn-outline-primary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Close
                    </button>
                    <a href="#" id="viewTestLink" class="btn btn-primary">
                        <i class="fas fa-eye me-2"></i>View Test
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); z-index: 9999; justify-content: center; align-items: center; opacity: 0; transition: opacity 0.3s ease;">
    <div class="loading-content" style="text-align: center; color: white;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 mb-0" style="font-size: 1.1rem;">Creating your test...</p>
    </div>
</div>
}

@section Styles {
    <link rel="stylesheet" href="~/css/home.css" asp-append-version="true" />
}

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Focus on token input when page loads
    const tokenInput = document.getElementById('token');
    if (tokenInput) {
        tokenInput.focus();
    }

    // Add subtle parallax effect to hero visual (performance optimized)
    const heroVisual = document.querySelector('.hero-visual');
    let ticking = false;
    
    if (heroVisual) {
        function updateParallax() {
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.05; // Reduced for smoother performance
            heroVisual.style.transform = `translate3d(0, ${rate}px, 0)`;
            ticking = false;
        }
        
        window.addEventListener('scroll', function() {
            if (!ticking) {
                requestAnimationFrame(updateParallax);
                ticking = true;
            }
        });
    }

    // Animate stats on scroll with performance optimization
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animate');
                observer.unobserve(entry.target); // Stop observing once animated
            }
        });
    }, observerOptions);

    // Observe elements for animation
    document.querySelectorAll('.stat-number, .feature-card, .step-item').forEach(el => {
        observer.observe(el);
    });

    // Smooth hover effects for feature cards
    document.querySelectorAll('.feature-card').forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.transition = 'transform 0.3s ease';
            this.style.transform = 'translateY(-8px) scale(1.02)';
        });

        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });

    // Form validation and submission for token access
    const tokenForm = document.querySelector('.token-form');
    if (tokenForm) {
        tokenForm.addEventListener('submit', function(e) {
            const tokenInput = this.querySelector('input[name="token"]');
            const submitBtn = this.querySelector('button[type="submit"]');
            
            if (!tokenInput.value.trim()) {
                e.preventDefault();
                tokenInput.classList.add('is-invalid');
                return;
            }
            
            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Validating...';
        });
        
        // Remove validation error on input
        tokenForm.querySelector('input[name="token"]').addEventListener('input', function() {
            this.classList.remove('is-invalid');
        });
    }

    // Create Test Modal Functionality - Only if user is authenticated
    const createTestForm = document.getElementById('createTestForm');
    if (createTestForm) {
        const createTestModal = new bootstrap.Modal(document.getElementById('createTestModal'));
        const successModal = new bootstrap.Modal(document.getElementById('successModal'));
        const loadingOverlay = document.getElementById('loadingOverlay');

        // Form inputs for live preview
        const titleInput = document.getElementById('testTitle');
        const descriptionInput = document.getElementById('testDescription');
        const timeLimitInput = document.getElementById('timeLimit');
        const maxAttemptsInput = document.getElementById('maxAttempts');
        const randomizeInput = document.getElementById('randomizeQuestions');

        // Preview elements
        const previewTitle = document.getElementById('preview-title');
        const previewTime = document.getElementById('preview-time');
        const previewAttempts = document.getElementById('preview-attempts');
        const previewRandomize = document.getElementById('preview-randomize');
        const previewFeatures = document.getElementById('preview-features');

        // Utility functions
        function showLoading() {
            if (loadingOverlay) {
                loadingOverlay.style.display = 'flex';
                loadingOverlay.style.opacity = '1';
            }
        }

        function hideLoading() {
            if (loadingOverlay) {
                loadingOverlay.style.opacity = '0';
                setTimeout(() => {
                    loadingOverlay.style.display = 'none';
                }, 300);
            }
        }

        // Ensure loading is hidden on page load
        function ensureLoadingHidden() {
            if (loadingOverlay) {
                loadingOverlay.style.display = 'none';
                loadingOverlay.style.opacity = '0';
            }
        }

        function clearFormErrors() {
            const inputs = createTestForm.querySelectorAll('.form-control');
            const feedbacks = createTestForm.querySelectorAll('.invalid-feedback');

            inputs.forEach(input => input.classList.remove('is-invalid'));
            feedbacks.forEach(feedback => feedback.textContent = '');
        }

        function showFormErrors(errors) {
            clearFormErrors();
            errors.forEach(error => {
                const input = createTestForm.querySelector(`[name="${error.Field}"]`);
                const feedback = input?.parentElement.querySelector('.invalid-feedback');
                if (input && feedback) {
                    input.classList.add('is-invalid');
                    feedback.textContent = error.Message;
                }
            });
        }

        function showToast(message, type = 'success') {
            let toastContainer = document.querySelector('.toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }

            const toastId = `toast-${Date.now()}`;
            const toastHTML = `
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-body d-flex align-items-center">
                        <i class="fas fa-${type === 'success' ? 'check-circle text-success' : 'exclamation-circle text-danger'} me-2"></i>
                        <span class="flex-grow-1">${message}</span>
                        <button type="button" class="btn-close btn-close-sm ms-2" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `;
            toastContainer.insertAdjacentHTML('beforeend', toastHTML);
            
            const toast = new bootstrap.Toast(document.getElementById(toastId));
            toast.show();
        }

        // Live preview updates
        function updatePreview() {
            if (!previewTitle) return; // Safety check
            
            const title = titleInput.value.trim() || 'Your test title';
            const timeLimit = timeLimitInput.value || '60';
            const maxAttempts = maxAttemptsInput.value || '1';
            const isRandomized = randomizeInput.checked;

            previewTitle.textContent = title;
            previewTime.textContent = `${timeLimit} minutes`;
            previewAttempts.textContent = maxAttempts;
            previewRandomize.textContent = isRandomized ? 'Randomized' : 'Sequential';

            // Update feature tags
            let featuresHTML = '';
            if (isRandomized) {
                featuresHTML += '<span class="feature-tag"><i class="fas fa-random"></i> Randomized Questions</span>';
            }
            if (parseInt(maxAttempts) > 1) {
                featuresHTML += '<span class="feature-tag"><i class="fas fa-redo"></i> Multiple Attempts</span>';
            }
            if (parseInt(timeLimit) >= 120) {
                featuresHTML += '<span class="feature-tag"><i class="fas fa-clock"></i> Extended Time</span>';
            }
            if (previewFeatures) {
                previewFeatures.innerHTML = featuresHTML;
            }
        }

        // Add event listeners for live preview - with safety checks
        if (titleInput) titleInput.addEventListener('input', updatePreview);
        if (timeLimitInput) timeLimitInput.addEventListener('input', updatePreview);
        if (maxAttemptsInput) maxAttemptsInput.addEventListener('input', updatePreview);
        if (randomizeInput) randomizeInput.addEventListener('change', updatePreview);

        // Form submission
        createTestForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            const submitButton = this.querySelector('.btn-create-test');
            const originalText = submitButton.innerHTML;

            showLoading();
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';
            clearFormErrors();

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                const data = {
                    Title: titleInput.value.trim(),
                    Description: descriptionInput.value.trim(),
                    TimeLimit: parseInt(timeLimitInput.value) || 60,
                    MaxAttempts: parseInt(maxAttemptsInput.value) || 1,
                    RandomizeQuestions: randomizeInput.checked
                };

                const headers = {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                };

                if (token) {
                    headers['RequestVerificationToken'] = token;
                }

                const response = await fetch('/Test/CreateAjax', {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    createTestModal.hide();
                    document.getElementById('successMessage').textContent = result.message;
                    document.getElementById('viewTestLink').href = `/Test/Details/${result.testId}`;
                    successModal.show();
                    showToast('Test created successfully!', 'success');
                } else {
                    if (result.errors) {
                        showFormErrors(result.errors);
                    } else {
                        showToast(result.message || 'An error occurred', 'error');
                    }
                }
            } catch (error) {
                console.error('Error creating test:', error);
                showToast('An error occurred while creating the test', 'error');
            } finally {
                hideLoading();
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
        });

        // Reset form when modal is hidden
        const createTestModalEl = document.getElementById('createTestModal');
        if (createTestModalEl) {
            createTestModalEl.addEventListener('hidden.bs.modal', function() {
                createTestForm.reset();
                clearFormErrors();
                updatePreview();
            });

            createTestModalEl.addEventListener('shown.bs.modal', function() {
                if (titleInput) titleInput.focus();
            });
        }

        // Initialize preview with default values
        updatePreview();
    }

    // Ensure loading overlay is hidden on page load
    const loadingOverlay = document.getElementById('loadingOverlay');
    if (loadingOverlay) {
        loadingOverlay.style.display = 'none';
        loadingOverlay.style.opacity = '0';
    }
});
</script>
}