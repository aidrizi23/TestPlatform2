@model TestPlatform2.Models.Questions.CreateImageBasedQuestionViewModel

@{
    ViewData["Title"] = "Create Image-Based Question";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4><i class="fas fa-image"></i> Create Image-Based Question</h4>
                    <a href="@Url.Action("Details", "Test", new { id = Model.TestId })" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Test
                    </a>
                </div>
                <div class="card-body">
                    <form asp-action="CreateImageBased" method="post" id="imageBasedForm">
                        <input type="hidden" asp-for="TestId" />
                        
                        <!-- Basic Question Info -->
                        <div class="row mb-3">
                            <div class="col-md-8">
                                <label asp-for="Text" class="form-label">Question Text</label>
                                <textarea asp-for="Text" class="form-control" rows="3" placeholder="Enter your image-based question..."></textarea>
                                <span asp-validation-for="Text" class="text-danger"></span>
                            </div>
                            <div class="col-md-4">
                                <label asp-for="Points" class="form-label">Points</label>
                                <input asp-for="Points" type="number" class="form-control" min="0.1" step="0.1" />
                                <span asp-validation-for="Points" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Image Settings -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label asp-for="ImageUrl" class="form-label">Image URL</label>
                                <input asp-for="ImageUrl" type="url" class="form-control" placeholder="https://..." />
                                <span asp-validation-for="ImageUrl" class="text-danger"></span>
                            </div>
                            <div class="col-md-3">
                                <label asp-for="ImageWidth" class="form-label">Width (px)</label>
                                <input asp-for="ImageWidth" type="number" class="form-control" min="100" />
                            </div>
                            <div class="col-md-3">
                                <label asp-for="ImageHeight" class="form-label">Height (px)</label>
                                <input asp-for="ImageHeight" type="number" class="form-control" min="100" />
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <label asp-for="QuestionType" class="form-label">Question Type</label>
                                <select asp-for="QuestionType" class="form-select" id="questionTypeSelect">
                                    <option value="0">Hotspot (Click correct areas)</option>
                                    <option value="1">Labeling (Add labels to points)</option>
                                    <option value="2">Click Sequence (Click in order)</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="AltText" class="form-label">Alt Text (Accessibility)</label>
                                <input asp-for="AltText" type="text" class="form-control" placeholder="Describe the image..." />
                            </div>
                        </div>

                        <!-- Image Preview and Editor -->
                        <div class="mb-4">
                            <h5><i class="fas fa-edit"></i> Image Editor</h5>
                            <div class="row">
                                <div class="col-md-8">
                                    <div id="imageContainer" class="border rounded p-3 bg-light text-center" style="min-height: 400px;">
                                        <div id="imagePlaceholder" class="text-muted py-5">
                                            Enter an image URL above to start editing
                                        </div>
                                        <div id="imageEditor" style="display: none; position: relative; display: inline-block;">
                                            <img id="questionImage" style="max-width: 100%; cursor: crosshair;" />
                                            <canvas id="overlayCanvas" style="position: absolute; top: 0; left: 0; pointer-events: none;"></canvas>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div id="controlPanel">
                                        <!-- Hotspot Controls -->
                                        <div id="hotspotControls" class="question-type-controls">
                                            <h6>Hotspot Settings</h6>
                                            <p class="small text-muted">Click on the image to add hotspot areas</p>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="isCorrectHotspot" checked>
                                                <label class="form-check-label" for="isCorrectHotspot">
                                                    Mark as correct area
                                                </label>
                                            </div>
                                            <div class="mt-2">
                                                <input type="text" id="hotspotLabel" class="form-control form-control-sm" placeholder="Hotspot label..." />
                                            </div>
                                        </div>

                                        <!-- Labeling Controls -->
                                        <div id="labelingControls" class="question-type-controls" style="display: none;">
                                            <h6>Labeling Settings</h6>
                                            <p class="small text-muted">Click on the image to add label points</p>
                                            <div class="mt-2">
                                                <input type="text" id="correctLabelText" class="form-control form-control-sm" placeholder="Correct answer..." />
                                            </div>
                                            <div class="mt-2">
                                                <input type="text" id="labelHint" class="form-control form-control-sm" placeholder="Hint (optional)..." />
                                            </div>
                                        </div>

                                        <!-- Sequence Controls -->
                                        <div id="sequenceControls" class="question-type-controls" style="display: none;">
                                            <h6>Click Sequence Settings</h6>
                                            <p class="small text-muted">Click areas in the correct order</p>
                                            <div class="mt-2">
                                                <label class="form-label small">Sequence Order</label>
                                                <input type="number" id="sequenceOrder" class="form-control form-control-sm" min="1" value="1" />
                                            </div>
                                            <div class="mt-2">
                                                <input type="text" id="sequenceLabel" class="form-control form-control-sm" placeholder="Step label..." />
                                            </div>
                                        </div>

                                        <!-- Items List -->
                                        <div class="mt-3">
                                            <h6>Added Items</h6>
                                            <div id="itemsList" class="list-group list-group-flush" style="max-height: 200px; overflow-y: auto;">
                                                <!-- Items will be listed here -->
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Hidden inputs for serialized data -->
                        <input type="hidden" asp-for="HotspotsJson" id="hotspotsJson" />
                        <input type="hidden" asp-for="LabelsJson" id="labelsJson" />

                        <!-- Submit Button -->
                        <div class="text-end">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Create Question
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let hotspots = [];
        let labels = [];
        let currentQuestionType = 0; // Hotspot
        let sequenceCounter = 1;

        // Image loading and setup
        function loadImage() {
            const imageUrl = document.getElementById('ImageUrl').value;
            const img = document.getElementById('questionImage');
            const placeholder = document.getElementById('imagePlaceholder');
            const editor = document.getElementById('imageEditor');
            
            if (!imageUrl) {
                placeholder.style.display = 'block';
                editor.style.display = 'none';
                return;
            }
            
            img.onload = function() {
                placeholder.style.display = 'none';
                editor.style.display = 'inline-block';
                setupCanvas();
                updateItemsList();
            };
            
            img.onerror = function() {
                placeholder.innerHTML = '<div class="text-danger">Failed to load image</div>';
                editor.style.display = 'none';
            };
            
            img.src = imageUrl;
        }

        function setupCanvas() {
            const img = document.getElementById('questionImage');
            const canvas = document.getElementById('overlayCanvas');
            const ctx = canvas.getContext('2d');
            
            canvas.width = img.clientWidth;
            canvas.height = img.clientHeight;
            
            // Update dimensions in form
            document.getElementById('ImageWidth').value = img.naturalWidth;
            document.getElementById('ImageHeight').value = img.naturalHeight;
            
            drawOverlay();
        }

        function drawOverlay() {
            const canvas = document.getElementById('overlayCanvas');
            const ctx = canvas.getContext('2d');
            const img = document.getElementById('questionImage');
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw hotspots
            hotspots.forEach((hotspot, index) => {
                const x = (hotspot.x / img.naturalWidth) * canvas.width;
                const y = (hotspot.y / img.naturalHeight) * canvas.height;
                const width = (hotspot.width / img.naturalWidth) * canvas.width;
                const height = (hotspot.height / img.naturalHeight) * canvas.height;
                
                ctx.strokeStyle = hotspot.isCorrect ? '#28a745' : '#dc3545';
                ctx.fillStyle = hotspot.isCorrect ? 'rgba(40, 167, 69, 0.3)' : 'rgba(220, 53, 69, 0.3)';
                ctx.lineWidth = 2;
                
                ctx.fillRect(x, y, width, height);
                ctx.strokeRect(x, y, width, height);
                
                // Draw label
                ctx.fillStyle = '#000';
                ctx.font = '12px Arial';
                ctx.fillText(hotspot.label || (index + 1), x + 5, y + 15);
            });
            
            // Draw labels
            labels.forEach((label, index) => {
                const x = (label.x / img.naturalWidth) * canvas.width;
                const y = (label.y / img.naturalHeight) * canvas.height;
                
                ctx.fillStyle = '#007bff';
                ctx.beginPath();
                ctx.arc(x, y, 8, 0, 2 * Math.PI);
                ctx.fill();
                
                ctx.fillStyle = '#fff';
                ctx.font = 'bold 10px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(index + 1, x, y + 3);
                ctx.textAlign = 'left';
            });
        }

        function handleImageClick(event) {
            const img = document.getElementById('questionImage');
            const rect = img.getBoundingClientRect();
            const x = ((event.clientX - rect.left) / rect.width) * img.naturalWidth;
            const y = ((event.clientY - rect.top) / rect.height) * img.naturalHeight;
            
            if (currentQuestionType === 0) { // Hotspot
                addHotspot(x, y);
            } else if (currentQuestionType === 1) { // Labeling
                addLabel(x, y);
            } else if (currentQuestionType === 2) { // Sequence
                addSequenceHotspot(x, y);
            }
        }

        function addHotspot(x, y) {
            const isCorrect = document.getElementById('isCorrectHotspot').checked;
            const label = document.getElementById('hotspotLabel').value || `Area ${hotspots.length + 1}`;
            
            const hotspot = {
                id: 'hotspot_' + Date.now(),
                label: label,
                x: Math.max(0, x - 25),
                y: Math.max(0, y - 25),
                width: 50,
                height: 50,
                isCorrect: isCorrect,
                sequenceOrder: 0
            };
            
            hotspots.push(hotspot);
            document.getElementById('hotspotLabel').value = '';
            drawOverlay();
            updateItemsList();
        }

        function addLabel(x, y) {
            const correctText = document.getElementById('correctLabelText').value;
            const hint = document.getElementById('labelHint').value;
            
            if (!correctText) {
                alert('Please enter the correct answer text');
                return;
            }
            
            const label = {
                id: 'label_' + Date.now(),
                x: x,
                y: y,
                correctText: correctText,
                hint: hint || null
            };
            
            labels.push(label);
            document.getElementById('correctLabelText').value = '';
            document.getElementById('labelHint').value = '';
            drawOverlay();
            updateItemsList();
        }

        function addSequenceHotspot(x, y) {
            const order = parseInt(document.getElementById('sequenceOrder').value);
            const label = document.getElementById('sequenceLabel').value || `Step ${order}`;
            
            const hotspot = {
                id: 'sequence_' + Date.now(),
                label: label,
                x: Math.max(0, x - 25),
                y: Math.max(0, y - 25),
                width: 50,
                height: 50,
                isCorrect: true,
                sequenceOrder: order
            };
            
            hotspots.push(hotspot);
            document.getElementById('sequenceOrder').value = order + 1;
            document.getElementById('sequenceLabel').value = '';
            drawOverlay();
            updateItemsList();
        }

        function updateItemsList() {
            const list = document.getElementById('itemsList');
            let html = '';
            
            if (currentQuestionType === 0 || currentQuestionType === 2) {
                hotspots.forEach((hotspot, index) => {
                    const typeLabel = currentQuestionType === 2 ? `Sequence ${hotspot.sequenceOrder}` : (hotspot.isCorrect ? 'Correct' : 'Incorrect');
                    html += `<div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>${hotspot.label}</strong><br>
                            <small class="text-muted">${typeLabel}</small>
                        </div>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeHotspot(${index})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>`;
                });
            } else if (currentQuestionType === 1) {
                labels.forEach((label, index) => {
                    html += `<div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>Label ${index + 1}</strong><br>
                            <small class="text-muted">Answer: ${label.correctText}</small>
                        </div>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeLabel(${index})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>`;
                });
            }
            
            if (html === '') {
                html = '<div class="text-muted text-center py-2">No items added yet</div>';
            }
            
            list.innerHTML = html;
        }

        function removeHotspot(index) {
            hotspots.splice(index, 1);
            drawOverlay();
            updateItemsList();
        }

        function removeLabel(index) {
            labels.splice(index, 1);
            drawOverlay();
            updateItemsList();
        }

        function switchQuestionType() {
            currentQuestionType = parseInt(document.getElementById('questionTypeSelect').value);
            
            // Show/hide appropriate controls
            document.querySelectorAll('.question-type-controls').forEach(control => {
                control.style.display = 'none';
            });
            
            if (currentQuestionType === 0) {
                document.getElementById('hotspotControls').style.display = 'block';
            } else if (currentQuestionType === 1) {
                document.getElementById('labelingControls').style.display = 'block';
            } else if (currentQuestionType === 2) {
                document.getElementById('sequenceControls').style.display = 'block';
            }
            
            // Clear existing items when switching types
            hotspots = [];
            labels = [];
            sequenceCounter = 1;
            drawOverlay();
            updateItemsList();
        }

        // Event listeners
        document.getElementById('ImageUrl').addEventListener('input', loadImage);
        document.getElementById('questionImage').addEventListener('click', handleImageClick);
        document.getElementById('questionTypeSelect').addEventListener('change', switchQuestionType);

        // Form submission
        document.getElementById('imageBasedForm').addEventListener('submit', function(e) {
            document.getElementById('hotspotsJson').value = JSON.stringify(hotspots);
            document.getElementById('labelsJson').value = JSON.stringify(labels);
        });

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            switchQuestionType();
            loadImage();
        });
    </script>
}