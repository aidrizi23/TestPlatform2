@using TestPlatform2.Data.Questions
@model TestPlatform2.Data.Test

<!-- Edit Test Modal -->
<div class="modal fade" id="editTestModal" tabindex="-1" aria-labelledby="editTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTestModalLabel">
                    <i class="fas fa-edit me-2 text-primary"></i>Edit Test Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editTestForm" novalidate>
                <div class="modal-body">
                    <input type="hidden" id="editTestId" />

                    <!-- Basic Information Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h6>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="editTestName" class="form-label">Test Name <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-heading"></i></span>
                                    <input type="text" class="form-control" id="editTestName" required
                                           placeholder="Enter a descriptive title for your test">
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-12 mb-3">
                                <label for="editTestDescription" class="form-label">Description</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                    <textarea class="form-control" id="editTestDescription" rows="3"
                                              placeholder="Enter instructions or details about the test"></textarea>
                                </div>
                                <div class="form-text">Optional description that students will see before starting</div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Settings Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-cog me-2"></i>Test Settings
                        </h6>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTimeLimit" class="form-label">Time Limit (minutes) <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                    <input type="number" class="form-control" id="editTimeLimit"
                                           min="1" max="180" required>
                                </div>
                                <div class="form-text">Maximum time allowed to complete the test</div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="editMaxAttempts" class="form-label">Max Attempts <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-redo"></i></span>
                                    <input type="number" class="form-control" id="editMaxAttempts"
                                           min="1" max="10" required>
                                </div>
                                <div class="form-text">Number of times students can attempt</div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="editRandomizeQuestions">
                                    <label class="form-check-label" for="editRandomizeQuestions">
                                        <i class="fas fa-random me-2"></i>Randomize Question Order
                                    </label>
                                </div>
                                <div class="form-text">Questions will appear in random order for each student</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Create Question Modal -->
<div class="modal fade" id="createQuestionModal" tabindex="-1" aria-labelledby="createQuestionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createQuestionModalLabel">
                    <i class="fas fa-plus-circle me-2 text-success"></i>Create Question
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createQuestionForm" novalidate>
                <div class="modal-body">
                    <input type="hidden" id="createQuestionTestId" />
                    <input type="hidden" id="createQuestionType" />

                    <!-- Question Details Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-question-circle me-2"></i>Question Details
                        </h6>

                        <div class="row">
                            <div class="col-lg-9 mb-3">
                                <label for="createQuestionText" class="form-label">Question Text <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-edit"></i></span>
                                    <textarea class="form-control" id="createQuestionText" rows="3" required
                                              placeholder="Enter your question here..."></textarea>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-lg-3 mb-3">
                                <label for="createQuestionPoints" class="form-label">Points <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-star"></i></span>
                                    <input type="number" class="form-control" id="createQuestionPoints"
                                           min="1" max="100" value="1" required>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Question Type Specific Content -->
                    <div id="questionTypeContent">
                        <!-- Dynamic content will be loaded here -->
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-plus me-2"></i>Create Question
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Question Modal -->
<div class="modal fade" id="editQuestionModal" tabindex="-1" aria-labelledby="editQuestionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editQuestionModalLabel">
                    <i class="fas fa-edit me-2 text-primary"></i>Edit Question
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editQuestionForm" novalidate>
                <div class="modal-body">
                    <input type="hidden" id="editQuestionId" />
                    <input type="hidden" id="editQuestionType" />

                    <!-- Question Details Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-question-circle me-2"></i>Question Details
                        </h6>

                        <div class="row">
                            <div class="col-lg-9 mb-3">
                                <label for="editQuestionText" class="form-label">Question Text <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-edit"></i></span>
                                    <textarea class="form-control" id="editQuestionText" rows="3" required></textarea>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-lg-3 mb-3">
                                <label for="editQuestionPoints" class="form-label">Points <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-star"></i></span>
                                    <input type="number" class="form-control" id="editQuestionPoints"
                                           min="1" max="100" required>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Question Type Specific Content -->
                    <div id="editQuestionTypeContent">
                        <!-- Dynamic content will be loaded here -->
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Send Invitations Modal -->
<div class="modal fade" id="inviteModal" tabindex="-1" aria-labelledby="inviteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="inviteModalLabel">
                    <i class="fas fa-paper-plane me-2 text-info"></i>Send Test Invitations
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="inviteForm" novalidate>
                <div class="modal-body">
                    <input type="hidden" id="inviteTestId" />

                    <!-- Recipients Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-users me-2"></i>Recipients
                        </h6>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="inviteEmails" class="form-label">Student Email Addresses <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                    <textarea class="form-control" id="inviteEmails" rows="6" required
                                              placeholder="Enter email addresses (one per line):&#10;john.doe@school.edu&#10;jane.smith@university.edu&#10;alex.brown@college.edu"></textarea>
                                </div>
                                <div class="form-text">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Enter one email address per line. You can invite unlimited students.
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-12 mb-3">
                                <label for="inviteMessage" class="form-label">Custom Message (Optional)</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-comment"></i></span>
                                    <textarea class="form-control" id="inviteMessage" rows="3"
                                              placeholder="Add a personal message for your students..."></textarea>
                                </div>
                                <div class="form-text">
                                    <i class="fas fa-lightbulb me-1"></i>
                                    This message will be included in the invitation email.
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Preview Section -->
                    <div class="preview-section">
                        <h6 class="preview-title">
                            <i class="fas fa-eye me-2"></i>Email Preview
                        </h6>
                        <div class="preview-content">
                            <p class="preview-text">Students will receive an email containing:</p>
                            <ul class="preview-features">
                                <li><i class="fas fa-check text-success me-2"></i>Test access link and instructions</li>
                                <li><i class="fas fa-check text-success me-2"></i>Test details (time limit, questions count)</li>
                                <li><i class="fas fa-check text-success me-2"></i>Your custom message (if provided)</li>
                                <li><i class="fas fa-check text-success me-2"></i>Unique access token for security</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-info">
                        <i class="fas fa-paper-plane me-2"></i>Send Invitations
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title text-danger" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle me-2"></i>Confirm Deletion
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="warning-icon mb-3">
                    <i class="fas fa-exclamation-triangle text-danger"></i>
                </div>
                <div id="deleteModalMessage">
                    <!-- Dynamic message will be set here -->
                </div>
                <div class="alert alert-warning mt-3">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>This action cannot be undone!</strong>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-shield-alt me-2"></i>Keep Safe
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash me-2"></i>Delete Permanently
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Analytics Modal -->
<div class="modal fade" id="analyticsModal" tabindex="-1" aria-labelledby="analyticsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="analyticsModalLabel">
                    <i class="fas fa-chart-line me-2 text-info"></i>Test Analytics
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center p-4">
                    <div class="mb-3">
                        <i class="fas fa-chart-bar text-muted" style="font-size: 3rem;"></i>
                    </div>
                    <h5>Analytics Dashboard</h5>
                    <p class="text-muted">Detailed analytics and insights will be available here.</p>
                    <small class="text-muted">Feature coming soon...</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Custom Styles for Modal Enhancements -->
<style>
/* Form Section Styling */
.form-section {
    background: #fafbfc;
    border-radius: 8px;
    padding: 1.25rem;
    margin-bottom: 1.25rem;
    border: 1px solid #e1e5e9;
    transition: border-color 0.2s ease;
}

.form-section:hover {
    border-color: #c6cbd1;
}

.form-section-title {
    font-size: 0.95rem;
    font-weight: 600;
    color: #495057;
    margin: 0 0 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #dee2e6;
}

/* Preview Section */
.preview-section {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 1.25rem;
    border: 1px solid #dee2e6;
}

.preview-title {
    font-size: 0.95rem;
    font-weight: 600;
    color: #495057;
    margin: 0 0 1rem;
}

.preview-content {
    background: white;
    border-radius: 8px;
    padding: 1rem;
}

.preview-text {
    color: #6b7280;
    margin: 0 0 1rem;
}

.preview-features {
    list-style: none;
    padding: 0;
    margin: 0;
}

.preview-features li {
    padding: 0.25rem 0;
    color: #374151;
    font-size: 0.875rem;
}

/* Modal Enhancements */
.modal-content {
    border-radius: 8px;
    border: 1px solid #dee2e6;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
}

.modal-header {
    background: #ffffff;
    border-bottom: 1px solid #dee2e6;
    border-radius: 8px 8px 0 0;
    padding: 1.25rem;
}

.modal-body {
    padding: 1.25rem;
}

.modal-footer {
    background: #ffffff;
    border-top: 1px solid #dee2e6;
    border-radius: 0 0 8px 8px;
    padding: 1rem 1.25rem;
}

/* Input Group Enhancements */
.input-group-text {
    background: #f8f9fa;
    border-color: #ced4da;
    color: #6c757d;
}

.form-control:focus {
    border-color: #0d6efd;
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
}

/* Warning Icon */
.warning-icon {
    font-size: 4rem;
    color: #f59e0b;
}

/* Button Enhancements */
.btn {
    border-radius: 6px;
    font-weight: 500;
    padding: 0.5rem 1rem;
    transition: all 0.15s ease;
}

.btn:hover {
    transform: translateY(-1px);
}

.btn-primary {
    box-shadow: 0 2px 4px rgba(13, 110, 253, 0.2);
}

.btn-success {
    box-shadow: 0 2px 4px rgba(25, 135, 84, 0.2);
}

.btn-info {
    box-shadow: 0 2px 4px rgba(13, 202, 240, 0.2);
}

.btn-danger {
    box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
}

/* Form Switch */
.form-check-input:checked {
    background-color: #0d6efd;
    border-color: #0d6efd;
}

.form-check-input:focus {
    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
}

/* Multiple Choice Modal Enhancements */
.correct-option {
    background-color: #f0f9ff !important;
    border-color: #3b82f6 !important;
    border-width: 2px !important;
    border-radius: 8px;
    transition: all 0.3s ease;
}

.correct-option .form-check-input:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
    box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
}

.single-selection-mode .option-group {
    position: relative;
}

.single-selection-mode .option-group::before {
    content: '●';
    position: absolute;
    left: -1.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: #6b7280;
    font-size: 0.75rem;
    opacity: 0.6;
}

.multiple-selection-mode .option-group {
    position: relative;
}

.multiple-selection-mode .option-group::before {
    content: '✓';
    position: absolute;
    left: -1.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: #3b82f6;
    font-size: 0.75rem;
    opacity: 0.6;
}

.single-selection-mode .correct-option::before {
    color: #3b82f6 !important;
    opacity: 1 !important;
    font-weight: bold;
}

.multiple-selection-mode .correct-option::before {
    opacity: 1 !important;
    font-weight: bold;
}

/* Toggle state visual feedback */
.form-switch .form-check-input {
    position: relative;
    transition: all 0.3s ease;
}

.form-switch .form-check-input:checked {
    background-color: #3b82f6;
    border-color: #3b82f6;
}

.form-switch .form-check-input:checked::after {
    content: 'Multi';
    position: absolute;
    right: -3.5rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.75rem;
    color: #3b82f6;
    font-weight: 600;
}

.form-switch .form-check-input:not(:checked)::after {
    content: 'Single';
    position: absolute;
    right: -3.5rem;
    top: 50%;
    transform: translateY(-50%);
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 600;
}

/* Option group hover effects */
.option-group {
    transition: all 0.2s ease;
}

.option-group:hover {
    background-color: #f9fafb;
    border-radius: 6px;
    padding: 0.25rem;
    margin: -0.25rem;
}

/* Responsive Modal */
@@media (max-width: 768px) {
    .modal-dialog {
        margin: 1rem;
    }

    .modal-header,
    .modal-body,
    .modal-footer {
        padding: 1rem;
    }

    .form-section {
        padding: 1rem;
    }
    
    .single-selection-mode .option-group::before,
    .multiple-selection-mode .option-group::before {
        left: -1rem;
    }
    
    .form-switch .form-check-input::after {
        right: -2.5rem;
        font-size: 0.65rem;
    }
}
</style>

<script>
// Global variables for modal management
let currentTestId = '';
let currentQuestionType = '';
let deleteTarget = { type: '', id: '', name: '' };

document.addEventListener('DOMContentLoaded', function() {
    initializeModalEventListeners();
    initializeFormValidation();
});

function initializeModalEventListeners() {
    // Form submissions
    document.getElementById('editTestForm')?.addEventListener('submit', handleEditTestSubmit);
    document.getElementById('createQuestionForm')?.addEventListener('submit', handleCreateQuestionSubmit);
    document.getElementById('editQuestionForm')?.addEventListener('submit', handleEditQuestionSubmit);
    document.getElementById('inviteForm')?.addEventListener('submit', handleInviteSubmit);

    // Input validation listeners
    const forms = ['editTestForm', 'createQuestionForm', 'editQuestionForm', 'inviteForm'];
    forms.forEach(formId => {
        const form = document.getElementById(formId);
        if (form) {
            const inputs = form.querySelectorAll('input, textarea, select');
            inputs.forEach(input => {
                input.addEventListener('input', () => clearInputError(input));
                input.addEventListener('blur', () => validateInput(input));
            });
        }
    });
}

function initializeFormValidation() {
    // Real-time validation for email inputs
    const emailInputs = document.querySelectorAll('input[type="email"], #inviteEmails');
    emailInputs.forEach(input => {
        input.addEventListener('input', function() {
            if (this.id === 'inviteEmails') {
                validateEmailList(this);
            } else {
                validateEmail(this);
            }
        });
    });

    // Real-time validation for required inputs
    const requiredInputs = document.querySelectorAll('input[required], textarea[required]');
    requiredInputs.forEach(input => {
        input.addEventListener('blur', function() {
            if (!this.value.trim()) {
                showInputError(this, 'This field is required');
            } else {
                clearInputError(this);
            }
        });
    });
}

function validateInput(input) {
    const value = input.value.trim();

    if (input.hasAttribute('required') && !value) {
        showInputError(input, 'This field is required');
        return false;
    }

    if (input.type === 'email' && value) {
        return validateEmail(input);
    }

    if (input.type === 'number') {
        const min = parseInt(input.getAttribute('min'));
        const max = parseInt(input.getAttribute('max'));
        const numValue = parseInt(value);

        if (isNaN(numValue)) {
            showInputError(input, 'Please enter a valid number');
            return false;
        }

        if (min !== null && numValue < min) {
            showInputError(input, `Value must be at least ${min}`);
            return false;
        }

        if (max !== null && numValue > max) {
            showInputError(input, `Value must be no more than ${max}`);
            return false;
        }
    }

    clearInputError(input);
    return true;
}

function validateEmail(input) {
    const email = input.value.trim();
    const emailRegex = new RegExp('^[^\\s' + String.fromCharCode(64) + ']+' + String.fromCharCode(64) + '[^\\s' + String.fromCharCode(64) + ']+\\.[^\\s' + String.fromCharCode(64) + ']+$');

    if (email && !emailRegex.test(email)) {
        showInputError(input, 'Please enter a valid email address');
        return false;
    }

    clearInputError(input);
    return true;
}

function validateEmailList(input) {
    const emails = input.value.split('\n').map(email => email.trim()).filter(email => email);
    const emailRegex = new RegExp('^[^\\s' + String.fromCharCode(64) + ']+' + String.fromCharCode(64) + '[^\\s' + String.fromCharCode(64) + ']+\\.[^\\s' + String.fromCharCode(64) + ']+$');
    const invalidEmails = emails.filter(email => !emailRegex.test(email));

    if (invalidEmails.length > 0) {
        showInputError(input, 'Invalid email addresses: ' + invalidEmails.slice(0, 3).join(', ') + (invalidEmails.length > 3 ? '...' : ''));
        return false;
    }

    clearInputError(input);
    return true;
}

function showInputError(input, message) {
    input.classList.add('is-invalid');
    const feedback = input.parentElement.querySelector('.invalid-feedback') ||
                    input.closest('.col-12, .col-md-6, .col-lg-9, .col-lg-3')?.querySelector('.invalid-feedback');
    if (feedback) {
        feedback.textContent = message;
        feedback.style.display = 'block';
    }
}

function clearInputError(input) {
    input.classList.remove('is-invalid');
    const feedback = input.parentElement.querySelector('.invalid-feedback') ||
                    input.closest('.col-12, .col-md-6, .col-lg-9, .col-lg-3')?.querySelector('.invalid-feedback');
    if (feedback) {
        feedback.textContent = '';
        feedback.style.display = 'none';
    }
}

// Edit Test Modal
window.openEditTestModal = function(testId) {
    currentTestId = testId;

    // Show loading state
    const modal = new bootstrap.Modal(document.getElementById('editTestModal'));
    const submitBtn = document.querySelector('#editTestForm button[type="submit"]');
    const originalBtnText = submitBtn.innerHTML;

    // Reset form and show loading
    document.getElementById('editTestForm').reset();
    document.getElementById('editTestId').value = testId;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading...';

    modal.show();

    // Load current test data from server
    fetch(`/Test/GetTestDataAjax?id=${testId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.data) {
            // Populate form with current test data
            document.getElementById('editTestId').value = data.data.id;
            document.getElementById('editTestName').value = data.data.testName || '';
            document.getElementById('editTestDescription').value = data.data.description || '';
            document.getElementById('editTimeLimit').value = data.data.timeLimit || 60;
            document.getElementById('editMaxAttempts').value = data.data.maxAttempts || 1;
            document.getElementById('editRandomizeQuestions').checked = data.data.randomizeQuestions || false;

            // Clear any previous validation errors
            document.querySelectorAll('#editTestForm .is-invalid').forEach(input => {
                clearInputError(input);
            });
        } else {
            showToast('Error loading test data: ' + (data.message || 'Unknown error'), 'error');
        }
    })
    .catch(error => {
        console.error('Error loading test data:', error);
        showToast('Error loading test data. Please try again.', 'error');
    })
    .finally(() => {
        // Restore submit button
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalBtnText;
    });
};

function handleEditTestSubmit(e) {
    e.preventDefault();

    // Validate form first
    const form = e.target;
    const inputs = form.querySelectorAll('input[required], textarea[required]');
    let isValid = true;

    inputs.forEach(input => {
        if (!validateInput(input)) {
            isValid = false;
        }
    });

    if (!isValid) {
        showToast('Please fix the validation errors before submitting', 'error');
        return;
    }

    // Prepare data for submission
    const formData = {
        id: document.getElementById('editTestId').value,
        testName: document.getElementById('editTestName').value,
        description: document.getElementById('editTestDescription').value,
        timeLimit: parseInt(document.getElementById('editTimeLimit').value),
        maxAttempts: parseInt(document.getElementById('editMaxAttempts').value),
        randomizeQuestions: document.getElementById('editRandomizeQuestions').checked,
        isLocked: false // Preserve current lock status - this will be handled by the server
    };

    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';

    // Submit to server
    fetch('/Test/EditAjax', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(data.message || 'Test updated successfully!', 'success');
            bootstrap.Modal.getInstance(document.getElementById('editTestModal')).hide();

            // Update the page display with new values
            updateTestDisplayAfterEdit(formData);

            // Optional: Refresh the page after a short delay to show all updates
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        } else {
            // Handle validation errors
            if (data.errors && Array.isArray(data.errors)) {
                data.errors.forEach(error => {
                    const field = form.querySelector(`#edit${error.Field}`);
                    if (field) {
                        showInputError(field, error.Message);
                    }
                });
            } else {
                showToast('Error updating test: ' + (data.message || 'Unknown error'), 'error');
            }
        }
    })
    .catch(error => {
        console.error('Error updating test:', error);
        showToast('Error updating test. Please try again.', 'error');
    })
    .finally(() => {
        // Restore submit button
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
    });
}

// Helper function to update the page display after successful edit
function updateTestDisplayAfterEdit(formData) {
    try {
        // Update test title if it exists on the page
        const titleElement = document.querySelector('.test-title-modern, h1');
        if (titleElement && formData.testName) {
            titleElement.textContent = formData.testName;
        }

        // Update description if it exists
        const descElement = document.querySelector('.test-description-modern');
        if (descElement) {
            if (formData.description) {
                descElement.textContent = formData.description;
                descElement.style.display = 'block';
            } else {
                descElement.style.display = 'none';
            }
        }

        // Update time limit display if it exists
        const timeLimitElement = document.querySelector('[class*="time-limit"], [class*="TimeLimit"]');
        if (timeLimitElement && formData.timeLimit) {
            timeLimitElement.textContent = `${formData.timeLimit} min limit`;
        }

    } catch (error) {
        console.log('Note: Could not update page display elements after edit');
    }
}

// Toggle Test Lock
window.toggleTestLock = function(testId) {
    console.log('Toggling test lock for:', testId);

    // TODO: Implement actual toggle logic
    const lockButton = document.getElementById('lockButtonText');
    const currentText = lockButton.textContent;

    if (currentText === 'Lock') {
        lockButton.textContent = 'Unlock';
        showToast('Test locked successfully', 'warning');
    } else {
        lockButton.textContent = 'Lock';
        showToast('Test unlocked successfully', 'success');
    }
};

// Create Question Modal
window.openCreateQuestionModal = function(type, testId) {
    currentQuestionType = type;
    currentTestId = testId;

    document.getElementById('createQuestionTestId').value = testId;
    document.getElementById('createQuestionType').value = type;
    document.getElementById('createQuestionText').value = '';
    document.getElementById('createQuestionPoints').value = '1';

    // Update modal title
    const titleMap = {
        'MultipleChoice': 'Create Multiple Choice Question',
        'TrueFalse': 'Create True/False Question',
        'ShortAnswer': 'Create Short Answer Question'
    };
    document.getElementById('createQuestionModalLabel').innerHTML =
        `<i class="fas fa-plus-circle me-2 text-success"></i>${titleMap[type]}`;

    // Load question type specific content
    loadQuestionTypeContent('create', type);

    const modal = new bootstrap.Modal(document.getElementById('createQuestionModal'));
    modal.show();
};

function loadQuestionTypeContent(mode, type, data = null) {
    const containerId = mode === 'create' ? 'questionTypeContent' : 'editQuestionTypeContent';
    const container = document.getElementById(containerId);
    const prefix = mode === 'create' ? 'create' : 'edit';

    let content = '';

    switch(type) {
        case 'TrueFalse':
            content = `
                <div class="form-section">
                    <h6 class="form-section-title">
                        <i class="fas fa-check-circle me-2"></i>Answer Configuration
                    </h6>
                    <div class="row">
                        <div class="col-12">
                            <label class="form-label">Correct Answer <span class="text-danger">*</span></label>
                            <div class="btn-group w-100" role="group">
                                <input type="radio" class="btn-check" name="${prefix}TrueFalseAnswer" id="${prefix}AnswerTrue" value="true" ${data?.correctAnswer !== false ? 'checked' : ''}>
                                <label class="btn btn-outline-success" for="${prefix}AnswerTrue">
                                    <i class="fas fa-check me-2"></i>True
                                </label>

                                <input type="radio" class="btn-check" name="${prefix}TrueFalseAnswer" id="${prefix}AnswerFalse" value="false" ${data?.correctAnswer === false ? 'checked' : ''}>
                                <label class="btn btn-outline-danger" for="${prefix}AnswerFalse">
                                    <i class="fas fa-times me-2"></i>False
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            break;

        case 'MultipleChoice':
            content = `
                <div class="form-section">
                    <h6 class="form-section-title">
                        <i class="fas fa-cog me-2"></i>Answer Settings
                    </h6>
                    <div class="row">
                        <div class="col-12 mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="${prefix}AllowMultiple" ${data?.allowMultipleSelections ? 'checked' : ''}>
                                <label class="form-check-label" for="${prefix}AllowMultiple">
                                    <i class="fas fa-list-ul me-2"></i>Allow Multiple Correct Answers
                                </label>
                            </div>
                            <div class="form-text">
                                <span id="${prefix}ToggleHelp">
                                    ${data?.allowMultipleSelections ? 
                                        '<i class="fas fa-check-square text-success me-1"></i>Students can select multiple correct answers' : 
                                        '<i class="fas fa-dot-circle text-primary me-1"></i>Students can select only one correct answer'
                                    }
                                </span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-section">
                    <h6 class="form-section-title">
                        <i class="fas fa-list me-2"></i>Answer Options
                    </h6>
                    <div id="${prefix}OptionsContainer" class="options-container mb-3">
                        <!-- Options will be added here -->
                    </div>
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="addOption('${prefix}')">
                        <i class="fas fa-plus me-2"></i>Add Option
                    </button>
                </div>
            `;
            break;

        case 'ShortAnswer':
            content = `
                <div class="form-section">
                    <h6 class="form-section-title">
                        <i class="fas fa-key me-2"></i>Answer Configuration
                    </h6>
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label for="${prefix}ExpectedAnswer" class="form-label">Expected Answer <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-pen"></i></span>
                                <input type="text" class="form-control" id="${prefix}ExpectedAnswer"
                                       placeholder="Enter the expected answer..."
                                       value="${data?.expectedAnswer || ''}" required>
                            </div>
                            <div class="form-text">This is the exact answer students must provide</div>
                        </div>

                        <div class="col-12">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="${prefix}CaseSensitive" ${data?.caseSensitive ? 'checked' : ''}>
                                <label class="form-check-label" for="${prefix}CaseSensitive">
                                    <i class="fas fa-shield-alt me-2"></i>Case Sensitive
                                </label>
                            </div>
                            <div class="form-text">Answer must match exact capitalization</div>
                        </div>
                    </div>
                </div>
            `;
            break;
    }

    container.innerHTML = content;

    // Initialize specific functionality
    if (type === 'MultipleChoice') {
        initializeMultipleChoiceOptions(prefix, data);
    }
}

function initializeMultipleChoiceOptions(prefix, data = null) {
    const container = document.getElementById(prefix + 'OptionsContainer');

    // Add initial options
    const options = data?.options || ['', ''];
    const correctAnswers = data?.correctAnswers || [];

    options.forEach((option, index) => {
        addOptionToContainer(prefix, option, correctAnswers.includes(option), index);
    });

    // Ensure at least 2 options
    if (options.length < 2) {
        addOptionToContainer(prefix, '', false, 1);
    }

    // Set up toggle behavior for multiple selections
    setupMultipleChoiceToggle(prefix);
}

function setupMultipleChoiceToggle(prefix) {
    const toggleElement = document.getElementById(prefix + 'AllowMultiple');
    if (!toggleElement) return;

    // Function to update checkbox behavior
    function updateCheckboxBehavior() {
        const allowMultiple = toggleElement.checked;
        const container = document.getElementById(prefix + 'OptionsContainer');
        const checkboxes = container.querySelectorAll('.option-correct');
        const helpText = document.getElementById(prefix + 'ToggleHelp');
        
        // Update help text
        if (helpText) {
            helpText.innerHTML = allowMultiple ? 
                '<i class="fas fa-check-square text-success me-1"></i>Students can select multiple correct answers' : 
                '<i class="fas fa-dot-circle text-primary me-1"></i>Students can select only one correct answer';
        }
        
        // Remove existing event listeners
        checkboxes.forEach(checkbox => {
            checkbox.removeEventListener('change', handleSingleSelect);
            checkbox.removeEventListener('change', handleMultipleSelect);
        });

        if (allowMultiple) {
            // Multiple selection mode - any number of checkboxes can be checked
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', handleMultipleSelect);
            });
            
            // Update UI to show multiple selection state
            container.classList.add('multiple-selection-mode');
            container.classList.remove('single-selection-mode');
        } else {
            // Single selection mode - only one checkbox can be checked
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', handleSingleSelect);
            });
            
            // Ensure only one is checked
            let checkedCount = 0;
            checkboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    checkedCount++;
                    if (checkedCount > 1) {
                        checkbox.checked = false;
                        checkbox.closest('.option-group').classList.remove('correct-option');
                    }
                }
            });
            
            // Update UI to show single selection state
            container.classList.add('single-selection-mode');
            container.classList.remove('multiple-selection-mode');
        }
    }

    // Single selection handler
    function handleSingleSelect(event) {
        if (event.target.checked) {
            // Uncheck all other checkboxes
            const container = document.getElementById(prefix + 'OptionsContainer');
            const checkboxes = container.querySelectorAll('.option-correct');
            checkboxes.forEach(checkbox => {
                if (checkbox !== event.target) {
                    checkbox.checked = false;
                    checkbox.closest('.option-group').classList.remove('correct-option');
                }
            });
            // Add visual feedback
            event.target.closest('.option-group').classList.add('correct-option');
        } else {
            event.target.closest('.option-group').classList.remove('correct-option');
        }
    }

    // Multiple selection handler
    function handleMultipleSelect(event) {
        // Add/remove visual feedback
        if (event.target.checked) {
            event.target.closest('.option-group').classList.add('correct-option');
        } else {
            event.target.closest('.option-group').classList.remove('correct-option');
        }
    }

    // Set up the toggle listener
    toggleElement.addEventListener('change', updateCheckboxBehavior);
    
    // Initialize with current state
    updateCheckboxBehavior();
    
    // Also update behavior when new options are added
    const originalAddOption = window.addOption;
    window.addOption = function(prefixParam) {
        originalAddOption(prefixParam);
        if (prefixParam === prefix) {
            setTimeout(() => updateCheckboxBehavior(), 100);
        }
    };
}

window.addOption = function(prefix) {
    const container = document.getElementById(prefix + 'OptionsContainer');
    const index = container.children.length;
    addOptionToContainer(prefix, '', false, index);
};

function addOptionToContainer(prefix, value = '', isCorrect = false, index = 0) {
    const container = document.getElementById(prefix + 'OptionsContainer');
    const optionDiv = document.createElement('div');
    optionDiv.className = 'option-group mb-2';
    optionDiv.innerHTML = `
        <div class="input-group">
            <span class="input-group-text">${String.fromCharCode(65 + index)}</span>
            <input type="text" class="form-control option-text"
                   placeholder="Enter option text..." value="${value}" required>
            <div class="input-group-text">
                <div class="form-check">
                    <input class="form-check-input option-correct" type="checkbox"
                           ${isCorrect ? 'checked' : ''}>
                    <label class="form-check-label text-success">
                        <i class="fas fa-check"></i>
                    </label>
                </div>
            </div>
            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeOption(this)">
                <i class="fas fa-trash"></i>
            </button>
        </div>
    `;
    container.appendChild(optionDiv);
    updateOptionLetters(container);
}

window.removeOption = function(btn) {
    const container = btn.closest('.options-container');
    if (container.children.length > 2) {
        btn.closest('.option-group').remove();
        updateOptionLetters(container);
    }
};

function updateOptionLetters(container) {
    const options = container.querySelectorAll('.option-group');
    options.forEach((option, index) => {
        const letter = option.querySelector('.input-group-text');
        if (letter && !letter.querySelector('.form-check')) {
            letter.textContent = String.fromCharCode(65 + index);
        }
    });
}

function handleCreateQuestionSubmit(e) {
    e.preventDefault();

    // Validate form first
    const form = e.target;
    const inputs = form.querySelectorAll('input[required], textarea[required]');
    let isValid = true;

    inputs.forEach(input => {
        if (!validateInput(input)) {
            isValid = false;
        }
    });

    if (!isValid) {
        showToast('Please fix the validation errors before submitting', 'error');
        return;
    }

    const questionData = {
        testId: document.getElementById('createQuestionTestId').value,
        type: document.getElementById('createQuestionType').value,
        text: document.getElementById('createQuestionText').value,
        points: parseInt(document.getElementById('createQuestionPoints').value)
    };

    // Add type-specific data and validate
    const type = questionData.type;
    if (type === 'TrueFalse') {
        const answer = document.querySelector('input[name="createTrueFalseAnswer"]:checked');
        questionData.correctAnswer = answer ? answer.value === 'true' : true;
    } else if (type === 'MultipleChoice') {
        const options = Array.from(document.querySelectorAll('#createOptionsContainer .option-text'))
            .map(input => input.value.trim())
            .filter(value => value.length > 0);

        if (options.length < 2) {
            showToast('Please add at least 2 options for multiple choice questions', 'error');
            return;
        }

        const correctAnswers = [];
        document.querySelectorAll('#createOptionsContainer .option-correct').forEach((checkbox, index) => {
            if (checkbox.checked && options[index]) {
                correctAnswers.push(options[index]);
            }
        });

        if (correctAnswers.length === 0) {
            showToast('Please select at least one correct answer', 'error');
            return;
        }

        questionData.options = options;
        questionData.correctAnswers = correctAnswers;
        questionData.allowMultipleSelections = document.getElementById('createAllowMultiple').checked;
    } else if (type === 'ShortAnswer') {
        const expectedAnswer = document.getElementById('createExpectedAnswer').value.trim();
        if (!expectedAnswer) {
            showToast('Please enter the expected answer', 'error');
            return;
        }
        questionData.expectedAnswer = expectedAnswer;
        questionData.caseSensitive = document.getElementById('createCaseSensitive').checked;
    }

    // Show loading state
    const submitBtn = form.querySelector('button[type="submit"]');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';

    // Call the appropriate AJAX endpoint based on question type
    let endpoint = '';
    switch (type) {
        case 'TrueFalse':
            endpoint = '/Question/CreateTrueFalseAjax';
            break;
        case 'MultipleChoice':
            endpoint = '/Question/CreateMultipleChoiceAjax';
            break;
        case 'ShortAnswer':
            endpoint = '/Question/CreateShortAnswerAjax';
            break;
        default:
            showToast('Invalid question type', 'error');
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
            return;
    }

    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: JSON.stringify(questionData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast(data.message || 'Question created successfully!', 'success');
            bootstrap.Modal.getInstance(document.getElementById('createQuestionModal')).hide();
            
            // Reset form
            form.reset();
            
            // Refresh the page to show the new question immediately
            setTimeout(() => {
                window.location.reload();
            }, 500);
        } else {
            // Handle validation errors
            if (data.errors && Array.isArray(data.errors)) {
                data.errors.forEach(error => {
                    showToast(`${error.Field}: ${error.Message}`, 'error');
                });
            } else {
                showToast('Error creating question: ' + (data.message || 'Unknown error'), 'error');
            }
        }
    })
    .catch(error => {
        console.error('Error creating question:', error);
        showToast('Error creating question. Please try again.', 'error');
    })
    .finally(() => {
        // Restore submit button
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
    });
}

// Edit Question Modal
window.openEditQuestionModal = function(questionId) {
    console.log('Edit question modal:', questionId);
    // TODO: Load question data and populate form
    const modal = new bootstrap.Modal(document.getElementById('editQuestionModal'));
    modal.show();
};

function handleEditQuestionSubmit(e) {
    e.preventDefault();
    console.log('Saving question changes');
    showToast('Question updated successfully!', 'success');
    bootstrap.Modal.getInstance(document.getElementById('editQuestionModal')).hide();
}

// Delete Modals
window.openDeleteQuestionModal = function(questionId) {
    deleteTarget = { type: 'question', id: questionId };

    document.getElementById('deleteModalLabel').innerHTML =
        '<i class="fas fa-exclamation-triangle me-2"></i>Delete Question';
    document.getElementById('deleteModalMessage').innerHTML = `
        <h5>Are you sure you want to delete this question?</h5>
        <p class="text-muted">This action cannot be undone. The question will be permanently removed from your test.</p>
    `;

    document.getElementById('confirmDeleteBtn').onclick = function() {
        const btn = this;
        const originalText = btn.innerHTML;
        btn.disabled = true;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';
        
        fetch('/Question/DeleteAjax', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify({ id: questionId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showToast(data.message || 'Question deleted successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
                setTimeout(() => window.location.reload(), 500);
            } else {
                showToast('Error deleting question: ' + (data.message || 'Unknown error'), 'error');
            }
        })
        .catch(error => {
            console.error('Error deleting question:', error);
            showToast('Error deleting question. Please try again.', 'error');
        })
        .finally(() => {
            btn.disabled = false;
            btn.innerHTML = originalText;
        });
    };

    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
    modal.show();
};

window.openDeleteTestModal = function(testId) {
    deleteTarget = { type: 'test', id: testId };

    document.getElementById('deleteModalLabel').innerHTML =
        '<i class="fas fa-exclamation-triangle me-2"></i>Delete Test';
    document.getElementById('deleteModalMessage').innerHTML = `
        <h5>Are you sure you want to delete this entire test?</h5>
        <p class="text-muted">This will permanently delete all questions, results, and invitations associated with this test.</p>
    `;

    document.getElementById('confirmDeleteBtn').onclick = function() {
        console.log('Deleting test:', testId);
        showToast('Test deleted successfully!', 'success');
        bootstrap.Modal.getInstance(document.getElementById('deleteModal')).hide();
        setTimeout(() => window.location.href = '/Test/Index', 1000);
    };

    const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
    modal.show();
};

// Invite Modal
window.openInviteModal = function(testId) {
    currentTestId = testId;
    document.getElementById('inviteTestId').value = testId;
    document.getElementById('inviteEmails').value = '';
    document.getElementById('inviteMessage').value = '';

    const modal = new bootstrap.Modal(document.getElementById('inviteModal'));
    modal.show();
};

function handleInviteSubmit(e) {
    e.preventDefault();

    const formData = {
        testId: document.getElementById('inviteTestId').value,
        emails: document.getElementById('inviteEmails').value,
        message: document.getElementById('inviteMessage').value
    };

    console.log('Sending invitations:', formData);
    showToast('Invitations sent successfully!', 'success');
    bootstrap.Modal.getInstance(document.getElementById('inviteModal')).hide();
}

// Analytics Modal
window.openAnalyticsModal = function(testId) {
    console.log('Analytics modal:', testId);
    const modal = new bootstrap.Modal(document.getElementById('analyticsModal'));
    modal.show();
};

// Utility function to show toast messages
function showToast(message, type = 'info') {
    // Use the parent page's showToast function if available
    if (typeof window.parent?.showToast === 'function') {
        window.parent.showToast(message, type);
    } else if (typeof showToast === 'function') {
        window.showToast(message, type);
    } else {
        console.log(`Toast (${type}):`, message);
    }
}
</script>


