@model TestPlatform2.Models.TestAttemptsViewModel
@{
    ViewData["Title"] = "Test Attempts";
}

@section Styles {
    <link rel="stylesheet" href="~/css/home.css" />
    <style>
        /* ALL ATTEMPTS - CONSISTENT WITH PROJECT THEME */
        .all-attempts-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
        }

        /* Hero Section */
        .attempts-hero {
            padding: 4rem 0;
            margin-bottom: 3rem;
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
            border-radius: 24px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            position: relative;
            overflow: hidden;
            border: none;
            outline: none;
        }

        .attempts-hero::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #2563eb, #3b82f6, #06b6d4);
            z-index: 10;
        }

        .breadcrumb-nav {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
            font-size: 0.875rem;
        }

        .breadcrumb-link {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            color: #6b7280;
            text-decoration: none;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            background: rgba(107, 114, 128, 0.1);
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .breadcrumb-link:hover {
            color: #2563eb;
            background: rgba(37, 99, 235, 0.1);
            transform: translateY(-2px);
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 800;
            color: #1f2937;
            line-height: 1.1;
            margin-bottom: 1.5rem;
            text-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .hero-subtitle {
            font-size: 1.25rem;
            color: #6b7280;
            margin-bottom: 2.5rem;
            font-weight: 500;
            line-height: 1.6;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
            margin-bottom: 4rem;
        }

        .stat-card {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #2563eb, #3b82f6);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .stat-card:hover::before {
            opacity: 1;
        }

        .stat-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .stat-icon {
            width: 64px;
            height: 64px;
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            color: white;
        }

        .stat-icon.total { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
        .stat-icon.completed { background: linear-gradient(135deg, #10b981, #059669); }
        .stat-icon.progress { background: linear-gradient(135deg, #f59e0b, #d97706); }
        .stat-icon.average { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1f2937;
            line-height: 1;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 1rem;
            color: #6b7280;
            font-weight: 600;
        }

        .stat-meta {
            font-size: 0.875rem;
            color: #9ca3af;
            margin-top: 0.5rem;
        }

        /* Controls Section */
        .controls-section {
            background: white;
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 3rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border: 1px solid rgba(226, 232, 240, 0.5);
        }

        .controls-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.875rem;
            font-weight: 700;
            color: #1f2937;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .section-title i {
            color: #2563eb;
        }

        /* Filter Tabs */
        .filter-tabs {
            display: flex;
            background: #f8fafc;
            padding: 0.5rem;
            border-radius: 16px;
            gap: 0.25rem;
            border: 1px solid #e2e8f0;
        }

        .filter-tab {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.875rem 1.25rem;
            border: none;
            background: transparent;
            color: #64748b;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 12px;
            font-size: 0.875rem;
            text-decoration: none;
        }

        .filter-tab:hover {
            color: #2563eb;
            background: rgba(37, 99, 235, 0.05);
        }

        .filter-tab.active {
            color: #2563eb;
            background: white;
            box-shadow: 0 2px 8px rgba(37, 99, 235, 0.15);
        }

        .tab-count {
            background: rgba(37, 99, 235, 0.1);
            color: #1d4ed8;
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
            font-size: 0.75rem;
            font-weight: 700;
            min-width: 24px;
            text-align: center;
        }

        .filter-tab.active .tab-count {
            background: #2563eb;
            color: white;
        }

        /* Search and Controls */
        .search-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .search-wrapper {
            position: relative;
            min-width: 300px;
        }

        .search-input {
            width: 100%;
            padding: 0.875rem 1rem 0.875rem 3rem;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            background: white;
            color: #1f2937;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
        }

        /* Attempts Grid */
        .attempts-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(420px, 1fr));
            gap: 2rem;
        }

        .attempt-card {
            background: white;
            border-radius: 20px;
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }

        .attempt-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 16px 32px rgba(0,0,0,0.15);
            border-color: rgba(37, 99, 235, 0.2);
        }

        .card-header {
            padding: 1.5rem;
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .student-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .student-avatar {
            width: 56px;
            height: 56px;
            border-radius: 16px;
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 1rem;
        }

        .student-details {
            min-width: 0;
        }

        .student-name {
            font-size: 1.125rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 0.25rem;
        }

        .student-email {
            font-size: 0.875rem;
            color: #6b7280;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .status-badge {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.625rem 1rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .status-completed {
            background: rgba(16, 185, 129, 0.1);
            color: #059669;
            border: 1px solid rgba(16, 185, 129, 0.2);
        }

        .status-progress {
            background: rgba(245, 158, 11, 0.1);
            color: #d97706;
            border: 1px solid rgba(245, 158, 11, 0.2);
        }

        .card-body {
            padding: 1.5rem;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 1.25rem;
            margin-bottom: 1.5rem;
        }

        .info-item {
            display: flex;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .info-icon {
            width: 40px;
            height: 40px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            color: white;
            flex-shrink: 0;
        }

        .info-icon.start { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
        .info-icon.end { background: linear-gradient(135deg, #10b981, #059669); }
        .info-icon.duration { background: linear-gradient(135deg, #f59e0b, #d97706); }
        .info-icon.score { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }

        .info-content {
            min-width: 0;
            flex: 1;
        }

        .info-label {
            font-size: 0.75rem;
            color: #6b7280;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 0.25rem;
        }

        .info-value {
            color: #1f2937;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .info-secondary {
            font-size: 0.75rem;
            color: #9ca3af;
        }

        /* Score Display */
        .score-display {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .score-number {
            font-size: 1.5rem;
            font-weight: 700;
            line-height: 1;
        }

        .score-excellent { color: #059669; }
        .score-good { color: #d97706; }
        .score-poor { color: #dc2626; }

        .score-bar {
            height: 8px;
            background: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }

        .score-fill {
            height: 100%;
            border-radius: 4px;
            transition: width 0.6s ease;
        }

        .score-fill.excellent { background: linear-gradient(90deg, #10b981, #059669); }
        .score-fill.good { background: linear-gradient(90deg, #f59e0b, #d97706); }
        .score-fill.poor { background: linear-gradient(90deg, #ef4444, #dc2626); }

        /* Card Actions */
        .card-actions {
            padding: 1.5rem;
            background: rgba(248, 250, 252, 0.8);
            border-top: 1px solid #e5e7eb;
            display: flex;
            gap: 0.75rem;
        }

        .action-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.875rem 1rem;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }

        .btn-primary {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            color: white;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #1d4ed8, #1e40af);
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(37, 99, 235, 0.4);
            color: white;
        }

        .btn-secondary {
            background: white;
            color: #6b7280;
            border-color: #e5e7eb;
        }

        .btn-secondary:hover {
            background: #f8fafc;
            color: #2563eb;
            border-color: #2563eb;
            transform: translateY(-2px);
        }

        .btn-danger {
            background: white;
            color: #dc2626;
            border-color: rgba(220, 38, 38, 0.2);
        }

        .btn-danger:hover {
            background: rgba(220, 38, 38, 0.05);
            color: #dc2626;
            border-color: #dc2626;
            transform: translateY(-2px);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: white;
            border-radius: 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .empty-icon {
            width: 80px;
            height: 80px;
            margin: 0 auto 1.5rem;
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            border-radius: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: white;
        }

        .empty-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 1rem;
        }

        .empty-description {
            font-size: 1.125rem;
            color: #6b7280;
            margin-bottom: 2rem;
            line-height: 1.6;
        }

        /* Action Buttons */
        .hero-actions {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .btn {
            padding: 1rem 2rem;
            font-size: 1rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            border: none;
            cursor: pointer;
        }

        .btn-outline-primary {
            background: transparent;
            color: #2563eb;
            border: 2px solid #2563eb;
        }

        .btn-outline-primary:hover {
            background: #2563eb;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(37, 99, 235, 0.3);
        }

        /* Responsive Design */
        @@media (max-width: 1024px) {
            .stats-section {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .attempts-grid {
                grid-template-columns: 1fr;
            }
            
            .controls-header {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-wrapper {
                min-width: auto;
            }
        }

        @@media (max-width: 768px) {
            .hero-title {
                font-size: 2.5rem;
            }
            
            .stats-section {
                grid-template-columns: 1fr;
            }
            
            .filter-tabs {
                flex-direction: column;
            }
            
            .search-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
            
            .card-actions {
                flex-direction: column;
            }
        }

        @@media (max-width: 576px) {
            .all-attempts-container {
                padding: 0.5rem;
            }
            
            .hero-title {
                font-size: 2rem;
            }
            
            .attempts-hero {
                padding: 3rem 1.5rem;
            }
        }
    </style>
}

<div class="all-attempts-container">
    <!-- Hero Section -->
    <div class="attempts-hero">
        <div class="breadcrumb-nav">
            <a asp-controller="Test" asp-action="Details" asp-route-id="@Model.TestId" class="breadcrumb-link">
                <i class="fas fa-arrow-left"></i>
                <span>Back to Test</span>
            </a>
            <span style="color: #9ca3af;">/</span>
            <span style="color: #6b7280; font-weight: 500;">Test Attempts</span>
        </div>
        
        <h1 class="hero-title">
            <i class="fas fa-chart-bar me-3" style="color: #2563eb;"></i>
            Test Attempts
        </h1>
        <p class="hero-subtitle">Monitor and analyze student performance with detailed insights</p>
        
        <div class="hero-actions">
            <a asp-controller="Test" asp-action="Analytics" asp-route-id="@Model.TestId" class="btn btn-primary">
                <i class="fas fa-chart-line"></i>
                <span>Analytics Dashboard</span>
            </a>
            <button type="button" class="btn btn-outline-primary" onclick="refreshAttempts()">
                <i class="fas fa-sync-alt"></i>
                <span>Refresh Data</span>
            </button>
        </div>
    </div>

    <!-- Statistics Section -->
    <div class="stats-section">
        @{
            var totalAttempts = Model.AllAttempts?.Count() ?? 0;
            var finishedAttempts = Model.FinishedAttempts?.Count() ?? 0;
            var unfinishedAttempts = Model.UnfinishedAttempts?.Count() ?? 0;
            var completionRate = totalAttempts > 0 ? (double)finishedAttempts / totalAttempts * 100 : 0;
            var averageScore = Model.FinishedAttempts?.Any() == true ? Model.FinishedAttempts.Average(a => a.Score) : 0;
        }

        <div class="stat-card" onclick="filterAttempts('All')">
            <div class="stat-header">
                <div class="stat-icon total">
                    <i class="fas fa-clipboard-list"></i>
                </div>
            </div>
            <div class="stat-number">@totalAttempts</div>
            <div class="stat-label">Total Attempts</div>
            <div class="stat-meta">All student submissions</div>
        </div>

        <div class="stat-card" onclick="filterAttempts('Finished')">
            <div class="stat-header">
                <div class="stat-icon completed">
                    <i class="fas fa-check-circle"></i>
                </div>
            </div>
            <div class="stat-number">@finishedAttempts</div>
            <div class="stat-label">Completed</div>
            <div class="stat-meta">@completionRate.ToString("0.0")% completion rate</div>
        </div>

        <div class="stat-card" onclick="filterAttempts('Unfinished')">
            <div class="stat-header">
                <div class="stat-icon progress">
                    <i class="fas fa-hourglass-half"></i>
                </div>
            </div>
            <div class="stat-number">@unfinishedAttempts</div>
            <div class="stat-label">In Progress</div>
            <div class="stat-meta">Currently active attempts</div>
        </div>

        <div class="stat-card">
            <div class="stat-header">
                <div class="stat-icon average">
                    <i class="fas fa-star"></i>
                </div>
            </div>
            <div class="stat-number">@averageScore.ToString("0.0")%</div>
            <div class="stat-label">Average Score</div>
            <div class="stat-meta">@(averageScore >= 70 ? "Excellent performance" : averageScore >= 50 ? "Good performance" : "Needs improvement")</div>
        </div>
    </div>

    <!-- Controls Section -->
    <div class="controls-section">
        <div class="controls-header">
            <h2 class="section-title">
                <i class="fas fa-users"></i>
                Student Attempts
            </h2>
            
            <div class="search-controls">
                <div class="search-wrapper">
                    <input type="text" id="searchInput" class="search-input" placeholder="Search students..." 
                           oninput="searchAttempts(this.value)">
                    <div class="search-icon">
                        <i class="fas fa-search"></i>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="filter-tabs">
            <a href="@Url.Action("AllAttempts", "Test", new { testId = Model.TestId, filter = "All" })" 
               class="filter-tab @(Model.CurrentFilter == "All" ? "active" : "")">
                <i class="fas fa-list"></i>
                <span>All</span>
                <span class="tab-count">@totalAttempts</span>
            </a>
            <a href="@Url.Action("AllAttempts", "Test", new { testId = Model.TestId, filter = "Finished" })" 
               class="filter-tab @(Model.CurrentFilter == "Finished" ? "active" : "")">
                <i class="fas fa-check"></i>
                <span>Completed</span>
                <span class="tab-count">@finishedAttempts</span>
            </a>
            <a href="@Url.Action("AllAttempts", "Test", new { testId = Model.TestId, filter = "Unfinished" })" 
               class="filter-tab @(Model.CurrentFilter == "Unfinished" ? "active" : "")">
                <i class="fas fa-clock"></i>
                <span>In Progress</span>
                <span class="tab-count">@unfinishedAttempts</span>
            </a>
        </div>
    </div>

    <!-- Attempts Grid -->
    @{
        IEnumerable<TestPlatform2.Data.TestAttempt> attemptsToShow = Model.CurrentFilter switch
        {
            "Finished" => Model.FinishedAttempts,
            "Unfinished" => Model.UnfinishedAttempts,
            _ => Model.AllAttempts
        };
    }

    @if (attemptsToShow == null || !attemptsToShow.Any())
    {
        <div class="empty-state">
            <div class="empty-icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <h3 class="empty-title">No Attempts Found</h3>
            <p class="empty-description">
                @if (Model.CurrentFilter == "All")
                {
                    <text>No students have taken this test yet. Send invitations to get started!</text>
                }
                else if (Model.CurrentFilter == "Finished")
                {
                    <text>No completed attempts found. Students may still be working on the test.</text>
                }
                else
                {
                    <text>No active attempts. All students have either completed or haven't started the test.</text>
                }
            </p>
            <a asp-controller="Test" asp-action="Details" asp-route-id="@Model.TestId" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i>
                <span>Send Invitations</span>
            </a>
        </div>
    }
    else
    {
        <div class="attempts-grid">
            @foreach (var attempt in attemptsToShow.OrderByDescending(a => a.StartTime))
            {
                <div class="attempt-card" data-attempt-id="@attempt.Id" 
                     data-student-name="@($"{attempt.FirstName} {attempt.LastName}".ToLower())"
                     data-email="@attempt.StudentEmail.ToLower()">
                    
                    <div class="card-header">
                        <div class="student-info">
                            <div class="student-avatar">
                                @(attempt.FirstName?.Substring(0, 1).ToUpper())@(attempt.LastName?.Substring(0, 1).ToUpper())
                            </div>
                            <div class="student-details">
                                <div class="student-name">@($"{attempt.FirstName} {attempt.LastName}")</div>
                                <div class="student-email">
                                    <i class="fas fa-envelope"></i>
                                    <span>@attempt.StudentEmail</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="status-badge @(attempt.IsCompleted ? "status-completed" : "status-progress")">
                            <i class="fas @(attempt.IsCompleted ? "fa-check" : "fa-clock")"></i>
                            <span>@(attempt.IsCompleted ? "Completed" : "In Progress")</span>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="info-grid">
                            <div class="info-item">
                                <div class="info-icon start">
                                    <i class="fas fa-play"></i>
                                </div>
                                <div class="info-content">
                                    <div class="info-label">Started</div>
                                    <div class="info-value">@attempt.StartTime.ToString("MMM dd, yyyy")</div>
                                    <div class="info-secondary">@attempt.StartTime.ToString("HH:mm")</div>
                                </div>
                            </div>

                            @if (attempt.EndTime.HasValue)
                            {
                                <div class="info-item">
                                    <div class="info-icon end">
                                        <i class="fas fa-stop"></i>
                                    </div>
                                    <div class="info-content">
                                        <div class="info-label">Finished</div>
                                        <div class="info-value">@attempt.EndTime.Value.ToString("MMM dd, yyyy")</div>
                                        <div class="info-secondary">@attempt.EndTime.Value.ToString("HH:mm")</div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="info-item">
                                    <div class="info-icon duration">
                                        <i class="fas fa-hourglass-half"></i>
                                    </div>
                                    <div class="info-content">
                                        <div class="info-label">Duration</div>
                                        @{
                                            var elapsed = DateTime.UtcNow - attempt.StartTime;
                                        }
                                        <div class="info-value">@elapsed.ToString(@"hh\:mm\:ss")</div>
                                        <div class="info-secondary">Elapsed</div>
                                    </div>
                                </div>
                            }

                            @if (attempt.IsCompleted)
                            {
                                var scoreClass = attempt.Score >= 70 ? "excellent" : attempt.Score >= 50 ? "good" : "poor";
                                <div class="info-item">
                                    <div class="info-icon score">
                                        <i class="fas fa-star"></i>
                                    </div>
                                    <div class="info-content">
                                        <div class="info-label">Score</div>
                                        <div class="score-display">
                                            <div class="score-number score-@scoreClass">@attempt.Score.ToString("0.0")%</div>
                                            <div class="score-bar">
                                                <div class="score-fill @scoreClass" style="width: @Math.Min(attempt.Score, 100)%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="card-actions">
                        <a asp-controller="TestAttempt" asp-action="Details" asp-route-id="@attempt.Id" class="action-btn btn-primary">
                            <i class="fas fa-eye"></i>
                            <span>View Details</span>
                        </a>
                        @if (attempt.IsCompleted)
                        {
                            <button type="button" class="action-btn btn-secondary" onclick="downloadReport('@attempt.Id')">
                                <i class="fas fa-download"></i>
                                <span>Report</span>
                            </button>
                        }
                        <button type="button" class="action-btn btn-danger" onclick="deleteAttempt('@attempt.Id', '@($"{attempt.FirstName} {attempt.LastName}")')">
                            <i class="fas fa-trash"></i>
                            <span>Delete</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content" style="border-radius: 16px; border: none;">
            <div class="modal-header" style="border-bottom: 1px solid #e5e7eb;">
                <h5 class="modal-title" style="font-weight: 700; color: #1f2937;">
                    <i class="fas fa-exclamation-triangle me-2" style="color: #dc2626;"></i>Delete Test Attempt
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" style="padding: 2rem;">
                <p>Are you sure you want to permanently delete the test attempt by <strong id="studentName"></strong>?</p>
                <div class="alert alert-warning" style="border-radius: 12px; border: none; background: rgba(245, 158, 11, 0.1); color: #92400e;">
                    <i class="fas fa-info-circle me-2"></i>
                    All associated data including answers and scores will be permanently removed.
                </div>
            </div>
            <div class="modal-footer" style="border-top: 1px solid #e5e7eb; padding: 1.5rem;">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">
                    <i class="fas fa-trash me-2"></i>Delete Attempt
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let currentDeleteAttemptId = '';
    let currentStudentName = '';

    // Filter functionality - navigate to different filter views
    function filterAttempts(filter) {
        window.location.href = `@Url.Action("AllAttempts", "Test")?testId=@Model.TestId&filter=${filter}`;
    }

    // Search functionality
    function searchAttempts(searchTerm) {
        const cards = document.querySelectorAll('.attempt-card');
        const term = searchTerm.toLowerCase();

        cards.forEach(card => {
            const studentName = card.dataset.studentName || '';
            const email = card.dataset.email || '';

            if (studentName.includes(term) || email.includes(term)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
    }

    // Delete attempt functionality
    function deleteAttempt(attemptId, studentName) {
        currentDeleteAttemptId = attemptId;
        currentStudentName = studentName;

        document.getElementById('studentName').textContent = studentName;

        const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
        modal.show();
    }

    async function confirmDelete() {
        if (!currentDeleteAttemptId) return;

        const submitButton = event.target;
        const originalText = submitButton.innerHTML;

        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';

        try {
            const response = await fetch(`/TestAttempt/Delete/${currentDeleteAttemptId}`, {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (response.ok) {
                // Remove the card from DOM
                const card = document.querySelector(`[data-attempt-id="${currentDeleteAttemptId}"]`);
                if (card) {
                    card.remove();
                }

                // Close modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                modal.hide();

                // Show success message
                showToast(`Attempt by ${currentStudentName} deleted successfully`, 'success');
                
                // Refresh page to update counts
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error('Failed to delete attempt');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error deleting attempt. Please try again.', 'error');
        } finally {
            submitButton.disabled = false;
            submitButton.innerHTML = originalText;
            currentDeleteAttemptId = '';
            currentStudentName = '';
        }
    }

    // Download report functionality
    function downloadReport(attemptId) {
        window.open(`/TestAttempt/DownloadReport/${attemptId}`, '_blank');
    }

    // Refresh attempts
    function refreshAttempts() {
        window.location.reload();
    }

    // Simple toast notification
    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; border-radius: 12px; border: none;';
        toast.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(toast);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }

    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Auto-focus search on Ctrl+F or Cmd+F
        document.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
                e.preventDefault();
                document.getElementById('searchInput').focus();
            }
        });

        // Clear search on Escape
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    this.value = '';
                    searchAttempts('');
                    this.blur();
                }
            });
        }
    });
</script>
}