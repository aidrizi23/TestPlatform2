         
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        





        
@model TestPlatform2.Models.TestAnalyticsViewModel
@{
    ViewData["Title"] = "Test Analytics";
}

@section Styles {
    <link rel="stylesheet" href="~/css/analytics.css" />
}

<div class="analytics-container">
    <!-- Enhanced Header Section -->
    <div class="analytics-header">
        <div class="header-content">
            <div class="header-main">
                <div class="breadcrumb-nav">
                    <a asp-action="Details" asp-route-id="@Model.TestId" class="breadcrumb-link">
                        <i class="fas fa-arrow-left me-2"></i>Test Details
                    </a>
                    <span class="breadcrumb-separator">/</span>
                    <span class="breadcrumb-current">Analytics Dashboard</span>
                </div>

                <div class="title-section">
                    <h1 class="page-title">
                        <i class="fas fa-chart-line me-3 title-icon"></i>
                        Analytics Dashboard
                    </h1>
                    <div class="test-info">
                        <div class="test-name">@Model.TestName</div>
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            <div class="test-description">@Model.Description</div>
                        }
                    </div>
                </div>
            </div>

            <div class="header-actions">
                <div class="action-buttons">
                    <a asp-action="Details" asp-route-id="@Model.TestId" class="btn btn-outline-light btn-lg">
                        <i class="fas fa-arrow-left me-2"></i>Back to Test
                    </a>
                    <button class="btn btn-light btn-lg" onclick="exportAnalytics()">
                        <i class="fas fa-download me-2"></i>Export Report
                    </button>
                    <button class="btn btn-light btn-lg" onclick="refreshAnalytics()">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Enhanced Summary Statistics Cards -->
    <div class="stats-grid">
        <div class="stat-card attempts-card">
            <div class="stat-header">
                <div class="stat-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-meta">
                    <h3 class="stat-title">Total Attempts</h3>
                    @if (Model.TotalAttempts > 0)
                    {
                        <div class="stat-info">
                            <i class="fas fa-info-circle"></i>
                            <span>@Model.TotalAttempts total responses</span>
                        </div>
                    }
                </div>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.TotalAttempts</div>
                <div class="stat-breakdown">
                    <div class="breakdown-item completed">
                        <span class="breakdown-label">Completed</span>
                        <span class="breakdown-value">@Model.CompletedAttempts</span>
                    </div>
                    <div class="breakdown-item in-progress">
                        <span class="breakdown-label">In Progress</span>
                        <span class="breakdown-value">@Model.InProgressAttempts</span>
                    </div>
                </div>
                <div class="stat-progress">
                    @{
                        var completedPercentage = Model.TotalAttempts > 0 
                            ? (double)Model.CompletedAttempts / Model.TotalAttempts * 100 
                            : 0;
                        var inProgressPercentage = Model.TotalAttempts > 0 
                            ? (double)Model.InProgressAttempts / Model.TotalAttempts * 100 
                            : 0;
                    }
                    <div class="progress-track">
                        <div class="progress-bar completed" style="width: @completedPercentage%"></div>
                        <div class="progress-bar in-progress" style="width: @inProgressPercentage%"></div>
                    </div>
                    <div class="progress-legend">
                        <span class="legend-item completed">@completedPercentage.ToString("0.0")% Completed</span>
                        <span class="legend-item in-progress">@inProgressPercentage.ToString("0.0")% In Progress</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="stat-card score-card">
            <div class="stat-header">
                <div class="stat-icon">
                    <i class="fas fa-star"></i>
                </div>
                <div class="stat-meta">
                    <h3 class="stat-title">Score Statistics</h3>
                    @if (Model.CompletedAttempts > 0)
                    {
                        <div class="stat-info">
                            <i class="fas fa-calculator"></i>
                            <span>Based on @Model.CompletedAttempts submissions</span>
                        </div>
                    }
                </div>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.AverageScore.ToString("0.0")</div>
                <div class="stat-unit">Average Score</div>
                <div class="score-details">
                    <div class="score-item">
                        <span class="score-label">Highest</span>
                        <span class="score-value highest">@Model.HighestScore.ToString("0.0")</span>
                    </div>
                    <div class="score-item">
                        <span class="score-label">Median</span>
                        <span class="score-value median">@Model.MedianScore.ToString("0.0")</span>
                    </div>
                    <div class="score-item">
                        <span class="score-label">Lowest</span>
                        <span class="score-value lowest">@Model.LowestScore.ToString("0.0")</span>
                    </div>
                </div>
                <div class="score-distribution-mini">
                    <canvas id="scoreDistributionMini" width="200" height="60"></canvas>
                </div>
            </div>
        </div>
        
        <div class="stat-card performance-card">
            <div class="stat-header">
                <div class="stat-icon">
                    <i class="fas fa-trophy"></i>
                </div>
                <div class="stat-meta">
                    <h3 class="stat-title">Pass Rate</h3>
                    <div class="performance-indicator @(Model.PassingRate >= 70 ? "excellent" : Model.PassingRate >= 50 ? "good" : "needs-improvement")">
                        @if (Model.PassingRate >= 70)
                        {
                            <i class="fas fa-check-circle"></i>
                            <span>Excellent</span>
                        }
                        else if (Model.PassingRate >= 50)
                        {
                            <i class="fas fa-minus-circle"></i>
                            <span>Good</span>
                        }
                        else
                        {
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>Needs Attention</span>
                        }
                    </div>
                </div>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.PassingRate.ToString("0.0")%</div>
                <div class="performance-gauge">
                    <div class="gauge-container">
                        <div class="gauge-track"></div>
                        <div class="gauge-fill" style="transform: rotate(@(Model.PassingRate * 1.8 - 90)deg)"></div>
                        <div class="gauge-center"></div>
                    </div>
                </div>
                <div class="performance-stats">
                    <div class="perf-item">
                        <span class="perf-label">Std. Deviation</span>
                        <span class="perf-value">@Model.StandardDeviation.ToString("0.00")</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="stat-card time-card">
            <div class="stat-header">
                <div class="stat-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-meta">
                    <h3 class="stat-title">Time Analysis</h3>
                    <div class="time-efficiency @(Model.AverageCompletionTime.TotalMinutes <= 30 ? "efficient" : "normal")">
                        @if (Model.AverageCompletionTime.TotalMinutes <= 30)
                        {
                            <i class="fas fa-tachometer-alt"></i>
                            <span>Efficient</span>
                        }
                        else
                        {
                            <i class="fas fa-hourglass-half"></i>
                            <span>Normal Pace</span>
                        }
                    </div>
                </div>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.AverageCompletionTime.ToString(@"mm\:ss")</div>
                <div class="stat-unit">Average Time</div>
                <div class="time-details">
                    <div class="time-item">
                        <span class="time-label">Fastest</span>
                        <span class="time-value fastest">@Model.FastestCompletionTime.ToString(@"mm\:ss")</span>
                    </div>
                    <div class="time-item">
                        <span class="time-label">Slowest</span>
                        <span class="time-value slowest">@Model.SlowestCompletionTime.ToString(@"mm\:ss")</span>
                    </div>
                </div>
                <div class="time-distribution">
                    <div class="time-range">
                        <div class="range-bar"></div>
                        <div class="range-marker fastest"></div>
                        <div class="range-marker average"></div>
                        <div class="range-marker slowest"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Enhanced Charts Section -->
    <div class="charts-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-chart-area me-2"></i>
                Performance Analytics
            </h2>
            <div class="chart-controls">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary active" data-timeframe="all">All Time</button>
                    <button type="button" class="btn btn-outline-primary" data-timeframe="week">This Week</button>
                    <button type="button" class="btn btn-outline-primary" data-timeframe="month">This Month</button>
                </div>
            </div>
        </div>

        <div class="charts-grid">
            <!-- Enhanced Score Distribution Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h3 class="chart-title">Score Distribution</h3>
                    <div class="chart-info">
                        <button class="btn btn-sm btn-outline-secondary" data-bs-toggle="tooltip" title="Shows how student scores are distributed across different ranges">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </div>
                </div>
                <div class="chart-content">
                    <div class="chart-container">
                        <canvas id="scoreDistributionChart"></canvas>
                    </div>
                    <div class="chart-insights">
                        @if (Model.CompletedAttempts > 0)
                        {
                            <div class="insight-item">
                                <span class="insight-label">Pass Rate</span>
                                <span class="insight-value">@Model.PassingRate.ToString("0.0")%</span>
                            </div>
                            <div class="insight-item">
                                <span class="insight-label">Sample Size</span>
                                <span class="insight-value">@Model.CompletedAttempts students</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Enhanced Question Success Rate Chart -->
            <div class="chart-card">
                <div class="chart-header">
                    <h3 class="chart-title">Question Performance</h3>
                    <div class="chart-actions">
                        <button class="btn btn-sm btn-outline-primary" onclick="toggleChartView('question')">
                            <i class="fas fa-exchange-alt me-1"></i>Switch View
                        </button>
                    </div>
                </div>
                <div class="chart-content">
                    <div class="chart-container">
                        <canvas id="questionSuccessChart"></canvas>
                    </div>
                    <div class="chart-legend-custom">
                        <div class="legend-item excellent">
                            <div class="legend-color"></div>
                            <span>Excellent (≥80%)</span>
                        </div>
                        <div class="legend-item good">
                            <div class="legend-color"></div>
                            <span>Good (60-79%)</span>
                        </div>
                        <div class="legend-item needs-attention">
                            <div class="legend-color"></div>
                            <span>Needs Attention (&lt;60%)</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- New Completion Timeline Chart -->
            <div class="chart-card span-2">
                <div class="chart-header">
                    <h3 class="chart-title">Completion Timeline</h3>
                    <div class="chart-actions">
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-secondary active" data-timeline="daily">Daily</button>
                            <button class="btn btn-outline-secondary" data-timeline="weekly">Weekly</button>
                        </div>
                    </div>
                </div>
                <div class="chart-content">
                    <div class="chart-container">
                        @if (Model.CompletedAttempts > 0)
                    {
                        <canvas id="completionTimelineChart"></canvas>
                    }
                    else
                    {
                        <div class="no-data-message">
                            <i class="fas fa-chart-line text-muted mb-3" style="font-size: 3rem;"></i>
                            <h5 class="text-muted">No Completion Data Available</h5>
                            <p class="text-muted">Charts will appear once students complete the test.</p>
                        </div>
                    }
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Enhanced Question Performance Table -->
    <div class="table-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-table me-2"></i>
                Detailed Question Analysis
            </h2>
            <div class="table-actions">
                <div class="search-container">
                    <input type="text" class="form-control" id="questionSearch" placeholder="Search questions...">
                    <i class="fas fa-search search-icon"></i>
                </div>
                <div class="filter-container">
                    <select class="form-select" id="difficultyFilter">
                        <option value="">All Difficulties</option>
                        <option value="easy">Easy (≥80%)</option>
                        <option value="medium">Medium (60-79%)</option>
                        <option value="hard">Hard (&lt;60%)</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="table-card">
            <div class="table-responsive">
                <table class="table analytics-table" id="questionsTable">
                    <thead>
                        <tr>
                            <th class="sortable" data-sort="position">
                                <span>Question</span>
                                <i class="fas fa-sort"></i>
                            </th>
                            <th class="sortable" data-sort="type">
                                <span>Type</span>
                                <i class="fas fa-sort"></i>
                            </th>
                            <th class="sortable" data-sort="points">
                                <span>Points</span>
                                <i class="fas fa-sort"></i>
                            </th>
                            <th class="sortable" data-sort="average">
                                <span>Avg. Points</span>
                                <i class="fas fa-sort"></i>
                            </th>
                            <th class="sortable" data-sort="success">
                                <span>Success Rate</span>
                                <i class="fas fa-sort"></i>
                            </th>
                            <th class="sortable" data-sort="responses">
                                <span>Responses</span>
                                <i class="fas fa-sort"></i>
                            </th>
                            <th>Difficulty</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var question in Model.QuestionPerformance)
                        {
                            var difficultyClass = question.SuccessRate >= 80 ? "easy" :
                                                  question.SuccessRate >= 60 ? "medium" : "hard";
                            var difficultyText = question.SuccessRate >= 80 ? "Easy" :
                                                 question.SuccessRate >= 60 ? "Medium" : "Hard";
                            
                            <tr data-question-id="@question.QuestionId" class="question-row">
                                <td>
                                    <div class="question-cell">
                                        <div class="question-number">Q@(question.Position + 1)</div>
                                        <div class="question-preview">
                                            <div class="question-text" title="@question.QuestionText">
                                                @(question.QuestionText.Length > 60 
                                                    ? question.QuestionText.Substring(0, 57) + "..." 
                                                    : question.QuestionText)
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="question-type-badge @question.QuestionType.ToLower().Replace(" ", "-")">
                                        @switch (question.QuestionType)
                                        {
                                            case "Multiple Choice":
                                                <i class="fas fa-list-ul me-1"></i>
                                                break;
                                            case "True/False":
                                                <i class="fas fa-check-circle me-1"></i>
                                                break;
                                            case "Short Answer":
                                                <i class="fas fa-pen me-1"></i>
                                                break;
                                        }
                                        @question.QuestionType
                                    </span>
                                </td>
                                <td>
                                    <span class="points-badge">@question.Points</span>
                                </td>
                                <td>
                                    <div class="average-points">
                                        <span class="points-value">@question.AveragePoints.ToString("0.00")</span>
                                        <div class="points-bar">
                                            <div class="points-fill" style="width: @((question.AveragePoints / question.Points) * 100)%"></div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="success-rate">
                                        <span class="rate-value @difficultyClass">@question.SuccessRate.ToString("0.0")%</span>
                                        <div class="rate-indicator @difficultyClass">
                                            <div class="rate-fill" style="width: @question.SuccessRate%"></div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="response-count">
                                        <span class="total-responses">@(question.CorrectAnswers + question.IncorrectAnswers)</span>
                                        <div class="response-breakdown">
                                            <span class="correct">@question.CorrectAnswers correct</span>
                                            <span class="incorrect">@question.IncorrectAnswers incorrect</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="difficulty-badge @difficultyClass">
                                        @if (difficultyClass == "easy")
                                        {
                                            <i class="fas fa-check-circle"></i>
                                        }
                                        else if (difficultyClass == "medium")
                                        {
                                            <i class="fas fa-minus-circle"></i>
                                        }
                                        else
                                        {
                                            <i class="fas fa-exclamation-triangle"></i>
                                        }
                                        @difficultyText
                                    </span>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <a asp-action="QuestionAnalytics" asp-route-testId="@Model.TestId" asp-route-questionId="@question.QuestionId" 
                                           class="btn btn-sm btn-outline-primary" title="View detailed analytics">
                                            <i class="fas fa-chart-line"></i>
                                        </a>
                                        <button class="btn btn-sm btn-outline-info" onclick="showQuestionInsights('@question.QuestionId')" title="Quick insights">
                                            <i class="fas fa-lightbulb"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Enhanced Student Performance Section -->
    <div class="students-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-graduation-cap me-2"></i>
                Student Performance Overview
            </h2>
            <div class="performance-summary">
                <div class="summary-item">
                    <span class="summary-label">Top Performers</span>
                    <span class="summary-value">@(Model.TopPerformers?.Count() ?? 0)</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">Need Support</span>
                    <span class="summary-value">@(Model.StrugglingSudents?.Count() ?? 0)</span>
                </div>
            </div>
        </div>

        <div class="students-grid">
            <!-- Top Performers -->
            <div class="students-card top-performers">
                <div class="students-header">
                    <h3 class="students-title">
                        <i class="fas fa-trophy me-2"></i>
                        Top Performers
                    </h3>
                    <span class="students-count">@(Model.TopPerformers?.Count() ?? 0) students</span>
                </div>
                <div class="students-content">
                    @if (Model.TopPerformers?.Any() == true)
                    {
                        <div class="students-list">
                            @foreach (var student in Model.TopPerformers.Take(5))
                            {
                                <div class="student-item top-performer">
                                    <div class="student-avatar">
                                        <i class="fas fa-user-graduate"></i>
                                    </div>
                                    <div class="student-info">
                                        <div class="student-name">@student.StudentName</div>
                                        <div class="student-email">@student.StudentEmail</div>
                                    </div>
                                    <div class="student-metrics">
                                        <div class="score-metric excellent">
                                            <span class="metric-value">@student.ScorePercentage.ToString("0.0")%</span>
                                            <span class="metric-label">Score</span>
                                        </div>
                                        <div class="time-metric">
                                            <span class="metric-value">@student.CompletionTime.ToString(@"mm\:ss")</span>
                                            <span class="metric-label">Time</span>
                                        </div>
                                    </div>
                                    <div class="student-badge top">
                                        <i class="fas fa-medal"></i>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (Model.TopPerformers.Count() > 5)
                        {
                            <div class="show-more">
                                <button class="btn btn-sm btn-outline-success" onclick="showAllTopPerformers()">
                                    <i class="fas fa-plus me-1"></i>Show @(Model.TopPerformers.Count() - 5) more
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-trophy"></i>
                            <p>No top performers yet</p>
                        </div>
                    }
                </div>
            </div>
            
            <!-- Struggling Students -->
            <div class="students-card struggling-students">
                <div class="students-header">
                    <h3 class="students-title">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Students Needing Support
                    </h3>
                    <span class="students-count">@(Model.StrugglingSudents?.Count() ?? 0) students</span>
                </div>
                <div class="students-content">
                    @if (Model.StrugglingSudents?.Any() == true)
                    {
                        <div class="students-list">
                            @foreach (var student in Model.StrugglingSudents.Take(5))
                            {
                                <div class="student-item struggling">
                                    <div class="student-avatar">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <div class="student-info">
                                        <div class="student-name">@student.StudentName</div>
                                        <div class="student-email">@student.StudentEmail</div>
                                    </div>
                                    <div class="student-metrics">
                                        <div class="score-metric needs-improvement">
                                            <span class="metric-value">@student.ScorePercentage.ToString("0.0")%</span>
                                            <span class="metric-label">Score</span>
                                        </div>
                                        <div class="time-metric">
                                            <span class="metric-value">@student.CompletionTime.ToString(@"mm\:ss")</span>
                                            <span class="metric-label">Time</span>
                                        </div>
                                    </div>
                                    <div class="student-actions">
                                        <button class="btn btn-sm btn-outline-warning" onclick="contactStudent('@student.StudentEmail')" title="Send support email">
                                            <i class="fas fa-envelope"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (Model.StrugglingSudents.Count() > 5)
                        {
                            <div class="show-more">
                                <button class="btn btn-sm btn-outline-warning" onclick="showAllStrugglingStudents()">
                                    <i class="fas fa-plus me-1"></i>Show @(Model.StrugglingSudents.Count() - 5) more
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-check-circle"></i>
                            <p>All students performing well!</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="students-card recent-activity span-2">
                <div class="students-header">
                    <h3 class="students-title">
                        <i class="fas fa-clock me-2"></i>
                        Recent Activity
                    </h3>
                    <div class="activity-filters">
                        <button class="btn btn-sm btn-outline-secondary active" data-filter="all">All</button>
                        <button class="btn btn-sm btn-outline-secondary" data-filter="completed">Completed</button>
                        <button class="btn btn-sm btn-outline-secondary" data-filter="in-progress">In Progress</button>
                    </div>
                </div>
                <div class="students-content">
                    @if (Model.RecentAttempts?.Any() == true)
                    {
                        <div class="activity-timeline">
                            @foreach (var attempt in Model.RecentAttempts.Take(8))
                            {
                                <div class="activity-item @(attempt.IsCompleted ? "completed" : "in-progress")">
                                    <div class="activity-time">
                                        @attempt.CompletionDate.ToString("MMM d")
                                        <span class="time-detail">@attempt.CompletionDate.ToString("HH:mm")</span>
                                    </div>
                                    <div class="activity-content">
                                        <div class="activity-student">
                                            <strong>@attempt.StudentName</strong>
                                            <span class="student-email-small">@attempt.StudentEmail</span>
                                        </div>
                                        <div class="activity-details">
                                            @if (attempt.IsCompleted)
                                            {
                                                <span class="activity-score @(attempt.ScorePercentage >= 70 ? "good" : attempt.ScorePercentage >= 50 ? "average" : "poor")">
                                                    @attempt.ScorePercentage.ToString("0.0")% score
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="activity-status in-progress">
                                                    <i class="fas fa-hourglass-half me-1"></i>In progress
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="activity-indicator @(attempt.IsCompleted ? "completed" : "in-progress")">
                                        <i class="fas @(attempt.IsCompleted ? "fa-check-circle" : "fa-clock")"></i>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (Model.RecentAttempts.Count() > 8)
                        {
                            <div class="show-more text-center">
                                <a asp-action="AllAttempts" asp-route-testId="@Model.TestId" class="btn btn-outline-primary">
                                    <i class="fas fa-list me-1"></i>View All Attempts
                                </a>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-clock"></i>
                            <p>No recent activity</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Insights and Recommendations Section -->
    <div class="insights-section">
        <div class="section-header">
            <h2 class="section-title">
                <i class="fas fa-lightbulb me-2"></i>
                AI-Powered Insights & Recommendations
            </h2>
            <div class="insights-actions">
                <button class="btn btn-outline-primary" onclick="generateNewInsights()">
                    <i class="fas fa-sync-alt me-1"></i>Refresh Insights
                </button>
            </div>
        </div>

        <div class="insights-grid">
            @{
                var overallPerformance = Model.PassingRate;
                var avgScore = Model.AverageScore;
                var questionCount = Model.QuestionPerformance?.Count() ?? 0;
                var difficultQuestions = Model.QuestionPerformance?.Where(q => q.SuccessRate < 60).Count() ?? 0;
            }

            <!-- Performance Insight -->
            <div class="insight-card performance-insight">
                <div class="insight-header">
                    <div class="insight-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="insight-meta">
                        <h4 class="insight-title">Overall Performance</h4>
                        <span class="insight-category">Test Analysis</span>
                    </div>
                </div>
                <div class="insight-content">
                    @if (overallPerformance >= 80)
                    {
                        <p class="insight-text">Excellent test performance! Students are demonstrating strong understanding of the material with an @overallPerformance.ToString("0.0")% pass rate.</p>
                        <div class="insight-recommendation positive">
                            <i class="fas fa-check-circle me-2"></i>
                            Consider using this test as a model for future assessments.
                        </div>
                    }
                    else if (overallPerformance >= 60)
                    {
                        <p class="insight-text">Good overall performance with room for improvement. @overallPerformance.ToString("0.0")% of students are passing the test.</p>
                        <div class="insight-recommendation moderate">
                            <i class="fas fa-info-circle me-2"></i>
                            Consider reviewing challenging topics with students.
                        </div>
                    }
                    else
                    {
                        <p class="insight-text">Performance needs attention. Only @overallPerformance.ToString("0.0")% of students are passing. This suggests fundamental concepts may need reinforcement.</p>
                        <div class="insight-recommendation critical">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            Recommend additional instruction and practice sessions.
                        </div>
                    }
                </div>
                <div class="insight-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="viewPerformanceDetails()">
                        <i class="fas fa-eye me-1"></i>View Details
                    </button>
                </div>
            </div>

            <!-- Question Difficulty Insight -->
            <div class="insight-card difficulty-insight">
                <div class="insight-header">
                    <div class="insight-icon">
                        <i class="fas fa-balance-scale"></i>
                    </div>
                    <div class="insight-meta">
                        <h4 class="insight-title">Question Difficulty</h4>
                        <span class="insight-category">Content Analysis</span>
                    </div>
                </div>
                <div class="insight-content">
                    @if (difficultQuestions == 0)
                    {
                        <p class="insight-text">All questions are performing well with good success rates. The test appears well-balanced for your students' level.</p>
                        <div class="insight-recommendation positive">
                            <i class="fas fa-thumbs-up me-2"></i>
                            Test difficulty is appropriate for the target audience.
                        </div>
                    }
                    else if (difficultQuestions <= questionCount * 0.3)
                    {
                        <p class="insight-text">@difficultQuestions out of @questionCount questions are challenging (below 60% success rate). This provides good discrimination.</p>
                        <div class="insight-recommendation moderate">
                            <i class="fas fa-adjust me-2"></i>
                            Consider reviewing the most challenging questions with students.
                        </div>
                    }
                    else
                    {
                        <p class="insight-text">@difficultQuestions out of @questionCount questions have low success rates. Consider reviewing question clarity or content coverage.</p>
                        <div class="insight-recommendation critical">
                            <i class="fas fa-tools me-2"></i>
                            Review and potentially revise challenging questions.
                        </div>
                    }
                </div>
                <div class="insight-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="showDifficultQuestions()">
                        <i class="fas fa-list me-1"></i>View Questions
                    </button>
                </div>
            </div>

            <!-- Time Management Insight -->
            <div class="insight-card time-insight">
                <div class="insight-header">
                    <div class="insight-icon">
                        <i class="fas fa-stopwatch"></i>
                    </div>
                    <div class="insight-meta">
                        <h4 class="insight-title">Time Management</h4>
                        <span class="insight-category">Efficiency Analysis</span>
                    </div>
                </div>
                <div class="insight-content">
                    @{
                        var avgMinutes = Model.AverageCompletionTime.TotalMinutes;
                        var fastestMinutes = Model.FastestCompletionTime.TotalMinutes;
                        var slowestMinutes = Model.SlowestCompletionTime.TotalMinutes;
                        var timeSpread = slowestMinutes - fastestMinutes;
                    }
                    
                    @if (timeSpread <= 15)
                    {
                        <p class="insight-text">Students show consistent timing with minimal variation (@timeSpread.ToString("0.0") minute spread). This suggests appropriate time allocation.</p>
                        <div class="insight-recommendation positive">
                            <i class="fas fa-clock me-2"></i>
                            Time limit appears well-calibrated for this test.
                        </div>
                    }
                    else if (timeSpread <= 30)
                    {
                        <p class="insight-text">Moderate time variation among students (@timeSpread.ToString("0.0") minute spread). Some students may benefit from time management strategies.</p>
                        <div class="insight-recommendation moderate">
                            <i class="fas fa-hourglass-half me-2"></i>
                            Consider providing time management tips to students.
                        </div>
                    }
                    else
                    {
                        <p class="insight-text">Large time variation (@timeSpread.ToString("0.0") minute spread) suggests different approaches or understanding levels among students.</p>
                        <div class="insight-recommendation critical">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Review if time limit or question complexity is appropriate.
                        </div>
                    }
                </div>
                <div class="insight-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="viewTimingAnalysis()">
                        <i class="fas fa-chart-bar me-1"></i>View Analysis
                    </button>
                </div>
            </div>

            <!-- Learning Objectives Insight -->
            <div class="insight-card learning-insight">
                <div class="insight-header">
                    <div class="insight-icon">
                        <i class="fas fa-graduation-cap"></i>
                    </div>
                    <div class="insight-meta">
                        <h4 class="insight-title">Learning Outcomes</h4>
                        <span class="insight-category">Educational Impact</span>
                    </div>
                </div>
                <div class="insight-content">
                    @{
                        var strongQuestions = Model.QuestionPerformance?.Where(q => q.SuccessRate >= 80).Count() ?? 0;
                        var weakQuestions = Model.QuestionPerformance?.Where(q => q.SuccessRate < 60).Count() ?? 0;
                    }
                    
                    <p class="insight-text">@strongQuestions questions show strong mastery (≥80% success) while @weakQuestions need reinforcement. This indicates specific learning gaps.</p>
                    
                    @if (strongQuestions > weakQuestions)
                    {
                        <div class="insight-recommendation positive">
                            <i class="fas fa-trophy me-2"></i>
                            Students demonstrate good overall understanding. Focus on specific weak areas.
                        </div>
                    }
                    else
                    {
                        <div class="insight-recommendation moderate">
                            <i class="fas fa-book me-2"></i>
                            Consider additional instruction on fundamental concepts.
                        </div>
                    }
                </div>
                <div class="insight-actions">
                    <button class="btn btn-sm btn-outline-primary" onclick="generateLearningPlan()">
                        <i class="fas fa-route me-1"></i>Learning Plan
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Modals -->

<!-- Question Insights Modal -->
<div class="modal fade" id="questionInsightsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-lightbulb me-2"></i>
                    Question Insights
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="questionInsightsContent">
                <!-- Content loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="viewQuestionDetails()">View Full Analysis</button>
            </div>
        </div>
    </div>
</div>

<!-- Export Options Modal -->
<div class="modal fade" id="exportModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-download me-2"></i>
                    Export Analytics Report
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="export-options">
                    <div class="export-option">
                        <input type="radio" name="exportFormat" id="exportPDF" value="pdf" checked>
                        <label for="exportPDF" class="export-label">
                            <i class="fas fa-file-pdf text-danger"></i>
                            <div class="export-details">
                                <strong>PDF Report</strong>
                                <span>Complete analytics with charts and insights</span>
                            </div>
                        </label>
                    </div>
                    <div class="export-option">
                        <input type="radio" name="exportFormat" id="exportExcel" value="excel">
                        <label for="exportExcel" class="export-label">
                            <i class="fas fa-file-excel text-success"></i>
                            <div class="export-details">
                                <strong>Excel Spreadsheet</strong>
                                <span>Raw data for further analysis</span>
                            </div>
                        </label>
                    </div>
                    <div class="export-option">
                        <input type="radio" name="exportFormat" id="exportCSV" value="csv">
                        <label for="exportCSV" class="export-label">
                            <i class="fas fa-file-csv text-info"></i>
                            <div class="export-details">
                                <strong>CSV Data</strong>
                                <span>Simple data export for external tools</span>
                            </div>
                        </label>
                    </div>
                </div>
                <div class="export-settings mt-3">
                    <h6>Include in Export:</h6>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="includeCharts" checked>
                        <label class="form-check-label" for="includeCharts">Charts and Visualizations</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="includeInsights" checked>
                        <label class="form-check-label" for="includeInsights">AI Insights and Recommendations</label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="includeStudentData">
                        <label class="form-check-label" for="includeStudentData">Individual Student Performance</label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="processExport()">
                    <i class="fas fa-download me-1"></i>Export Report
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer"></div>


@section Scripts {
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    
    <script>
        // Global variables
        let currentTimeframe = 'all';
        let currentSort = { column: null, direction: 'asc' };
        let charts = {};

        // Enhanced color palette
        const colors = {
            primary: '#3b82f6',
            primaryLight: '#60a5fa',
            secondary: '#6366f1',
            success: '#22c55e',
            successLight: '#4ade80',
            danger: '#ef4444',
            dangerLight: '#f87171',
            warning: '#f59e0b',
            info: '#0ea5e9',
            gradient: {
                primary: ['#3b82f6', '#1d4ed8'],
                success: ['#22c55e', '#16a34a'],
                danger: ['#ef4444', '#dc2626'],
                warning: ['#f59e0b', '#d97706']
            }
        };

        // Default chart options
        const defaultChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom',
                    labels: {
                        usePointStyle: true,
                        padding: 20,
                        font: {
                            size: 12,
                            weight: '600'
                        }
                    }
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.9)',
                    titleColor: '#fff',
                    bodyColor: '#fff',
                    borderColor: colors.primary,
                    borderWidth: 1,
                    cornerRadius: 8,
                    titleFont: {
                        size: 14,
                        weight: 'bold'
                    },
                    bodyFont: {
                        size: 13
                    },
                    padding: 12
                }
            },
            animation: {
                duration: 1000,
                easing: 'easeOutQuart'
            }
        };

        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            initializeTable();
            initializeFilters();
            initializeTooltips();
            animateCounters();
        });

        // Chart initialization
        function initializeCharts() {
            // Score Distribution Chart
            const scoreDistributionCtx = document.getElementById('scoreDistributionChart').getContext('2d');
            charts.scoreDistribution = new Chart(scoreDistributionCtx, {
                type: 'bar',
                data: {
                    labels: @Json.Serialize(Model.ScoreRanges),
                    datasets: [{
                        label: 'Number of Students',
                        data: @Json.Serialize(Model.ScoreDistribution),
                        backgroundColor: colors.gradient.primary[0] + '80',
                        borderColor: colors.gradient.primary[0],
                        borderWidth: 2,
                        borderRadius: 8,
                        borderSkipped: false,
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0,
                                color: '#6b7280',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#f3f4f6',
                                lineWidth: 1
                            }
                        },
                        x: {
                            ticks: {
                                color: '#6b7280',
                                font: { size: 12, weight: '500' }
                            },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        ...defaultChartOptions.plugins,
                        tooltip: {
                            ...defaultChartOptions.plugins.tooltip,
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? ((context.parsed.y / total) * 100).toFixed(1) : 0;
                                    return `${context.parsed.y} students (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });

            // Question Success Rate Chart
            const questionSuccessData = @Json.Serialize(Model.QuestionPerformance
                .Select(q => new { number = q.Position + 1, rate = q.SuccessRate, type = q.QuestionType }));
                
            const questionSuccessCtx = document.getElementById('questionSuccessChart').getContext('2d');
            charts.questionSuccess = new Chart(questionSuccessCtx, {
                type: 'bar',
                data: {
                    labels: questionSuccessData.map(q => 'Q' + q.number),
                    datasets: [{
                        label: 'Success Rate (%)',
                        data: questionSuccessData.map(q => q.rate),
                        backgroundColor: questionSuccessData.map(q => {
                            if (q.rate >= 80) return colors.success + '80';
                            if (q.rate >= 60) return colors.primary + '80';
                            return colors.danger + '80';
                        }),
                        borderColor: questionSuccessData.map(q => {
                            if (q.rate >= 80) return colors.success;
                            if (q.rate >= 60) return colors.primary;
                            return colors.danger;
                        }),
                        borderWidth: 2,
                        borderRadius: 6,
                        borderSkipped: false,
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                },
                                color: '#6b7280',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#f3f4f6',
                                lineWidth: 1
                            }
                        },
                        x: {
                            ticks: {
                                color: '#6b7280',
                                font: { size: 12, weight: '500' }
                            },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        ...defaultChartOptions.plugins,
                        tooltip: {
                            ...defaultChartOptions.plugins.tooltip,
                            callbacks: {
                                title: function(tooltipItems) {
                                    const questionIndex = tooltipItems[0].dataIndex;
                                    const questionData = questionSuccessData[questionIndex];
                                    return `Question ${questionData.number} (${questionData.type})`;
                                },
                                label: function(context) {
                                    return `Success Rate: ${context.raw.toFixed(1)}%`;
                                }
                            }
                        }
                    }
                }
            });

            // Completion Timeline Chart
            const timelineCtx = document.getElementById('completionTimelineChart').getContext('2d');
            charts.timeline = new Chart(timelineCtx, {
                type: 'line',
                data: {
                    labels: generateTimelineLabels(),
                    datasets: [{
                        label: 'Completions',
                        data: generateTimelineData(),
                        borderColor: colors.primary,
                        backgroundColor: colors.primary + '20',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: colors.primary,
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    ...defaultChartOptions,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0,
                                color: '#6b7280',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#f3f4f6',
                                lineWidth: 1
                            }
                        },
                        x: {
                            ticks: {
                                color: '#6b7280',
                                font: { size: 12 }
                            },
                            grid: {
                                color: '#f3f4f6',
                                lineWidth: 1
                            }
                        }
                    }
                }
            });

            // Mini score distribution chart
            const miniCtx = document.getElementById('scoreDistributionMini').getContext('2d');
            charts.miniDistribution = new Chart(miniCtx, {
                type: 'line',
                data: {
                    labels: @Json.Serialize(Model.ScoreRanges),
                    datasets: [{
                        data: @Json.Serialize(Model.ScoreDistribution),
                        borderColor: colors.primary,
                        backgroundColor: colors.primary + '40',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4,
                        pointRadius: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    scales: {
                        x: { display: false },
                        y: { display: false }
                    },
                    animation: { duration: 2000 }
                }
            });
        }

        // Generate timeline data using real analytics data
        function generateTimelineLabels() {
            const timelineData = @Json.Serialize(Model.TimelineData);
            if (!timelineData || timelineData.length === 0) {
                return ['No Data'];
            }
            return timelineData.map(item => item.dateLabel);
        }

        function generateTimelineData() {
            const timelineData = @Json.Serialize(Model.TimelineData);
            if (!timelineData || timelineData.length === 0) {
                return [0];
            }
            return timelineData.map(item => item.completionCount);
        }

        // Table functionality
        function initializeTable() {
            const table = document.getElementById('questionsTable');
            const headers = table.querySelectorAll('th.sortable');
            
            headers.forEach(header => {
                header.addEventListener('click', function() {
                    const column = this.dataset.sort;
                    sortTable(column);
                });
            });
        }

        function sortTable(column) {
            const table = document.getElementById('questionsTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            // Update sort direction
            if (currentSort.column === column) {
                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
                currentSort.column = column;
                currentSort.direction = 'asc';
            }
            
            // Update header classes
            table.querySelectorAll('th.sortable').forEach(th => {
                th.classList.remove('sorted');
                const icon = th.querySelector('.fas');
                icon.className = 'fas fa-sort';
            });
            
            const currentHeader = table.querySelector(`th[data-sort="${column}"]`);
            currentHeader.classList.add('sorted');
            const currentIcon = currentHeader.querySelector('.fas');
            currentIcon.className = currentSort.direction === 'asc' ? 'fas fa-sort-up' : 'fas fa-sort-down';
            
            // Sort rows
            rows.sort((a, b) => {
                let aValue, bValue;
                
                switch (column) {
                    case 'position':
                        aValue = parseInt(a.querySelector('.question-number').textContent.replace('Q', ''));
                        bValue = parseInt(b.querySelector('.question-number').textContent.replace('Q', ''));
                        break;
                    case 'points':
                        aValue = parseFloat(a.querySelector('.points-badge').textContent);
                        bValue = parseFloat(b.querySelector('.points-badge').textContent);
                        break;
                    case 'average':
                        aValue = parseFloat(a.querySelector('.points-value').textContent);
                        bValue = parseFloat(b.querySelector('.points-value').textContent);
                        break;
                    case 'success':
                        aValue = parseFloat(a.querySelector('.rate-value').textContent.replace('%', ''));
                        bValue = parseFloat(b.querySelector('.rate-value').textContent.replace('%', ''));
                        break;
                    case 'responses':
                        aValue = parseInt(a.querySelector('.total-responses').textContent);
                        bValue = parseInt(b.querySelector('.total-responses').textContent);
                        break;
                    case 'type':
                        aValue = a.querySelector('.question-type-badge').textContent.trim();
                        bValue = b.querySelector('.question-type-badge').textContent.trim();
                        break;
                    default:
                        aValue = a.textContent;
                        bValue = b.textContent;
                }
                
                if (typeof aValue === 'string') {
                    return currentSort.direction === 'asc' 
                        ? aValue.localeCompare(bValue)
                        : bValue.localeCompare(aValue);
                } else {
                    return currentSort.direction === 'asc' 
                        ? aValue - bValue
                        : bValue - aValue;
                }
            });
            
            // Reorder rows in DOM
            rows.forEach(row => tbody.appendChild(row));
            
            // Add animation
            rows.forEach((row, index) => {
                row.style.animation = 'none';
                setTimeout(() => {
                    row.style.animation = 'slideUp 0.3s ease-out';
                }, index * 50);
            });
        }

        // Filter functionality
        function initializeFilters() {
            const searchInput = document.getElementById('questionSearch');
            const difficultyFilter = document.getElementById('difficultyFilter');
            
            searchInput.addEventListener('input', filterTable);
            difficultyFilter.addEventListener('change', filterTable);
            
            // Timeframe buttons
            document.querySelectorAll('[data-timeframe]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-timeframe]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentTimeframe = this.dataset.timeframe;
                    updateChartsForTimeframe();
                });
            });
            
            // Timeline buttons
            document.querySelectorAll('[data-timeline]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-timeline]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    updateTimelineChart(this.dataset.timeline);
                });
            });
            
            // Activity filters
            document.querySelectorAll('[data-filter]').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('[data-filter]').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    filterActivity(this.dataset.filter);
                });
            });
        }

        function filterTable() {
            const searchTerm = document.getElementById('questionSearch').value.toLowerCase();
            const difficultyFilter = document.getElementById('difficultyFilter').value;
            const rows = document.querySelectorAll('#questionsTable tbody tr');
            
            rows.forEach(row => {
                const questionText = row.querySelector('.question-text').textContent.toLowerCase();
                const successRate = parseFloat(row.querySelector('.rate-value').textContent.replace('%', ''));
                
                let matchesSearch = questionText.includes(searchTerm);
                let matchesDifficulty = true;
                
                if (difficultyFilter) {
                    switch (difficultyFilter) {
                        case 'easy':
                            matchesDifficulty = successRate >= 80;
                            break;
                        case 'medium':
                            matchesDifficulty = successRate >= 60 && successRate < 80;
                            break;
                        case 'hard':
                            matchesDifficulty = successRate < 60;
                            break;
                    }
                }
                
                if (matchesSearch && matchesDifficulty) {
                    row.style.display = '';
                    row.classList.add('fade-in');
                } else {
                    row.style.display = 'none';
                    row.classList.remove('fade-in');
                }
            });
        }

        function filterActivity(filter) {
            const activityItems = document.querySelectorAll('.activity-item');
            
            activityItems.forEach(item => {
                const isCompleted = item.classList.contains('completed');
                const isInProgress = item.classList.contains('in-progress');
                
                let show = false;
                switch (filter) {
                    case 'all':
                        show = true;
                        break;
                    case 'completed':
                        show = isCompleted;
                        break;
                    case 'in-progress':
                        show = isInProgress;
                        break;
                }
                
                item.style.display = show ? '' : 'none';
            });
        }

        // Chart update functions
        function updateChartsForTimeframe() {
            // This would typically fetch new data based on timeframe
            showToast(`Updated charts for ${currentTimeframe} timeframe`, 'info');
        }

        function updateTimelineChart(timeline) {
            // Update timeline chart based on selection
            showToast(`Updated timeline to ${timeline} view`, 'info');
        }

        function toggleChartView(chartType) {
            // Toggle between different chart views
            showToast(`Toggled ${chartType} chart view`, 'info');
        }

        // Initialize tooltips
        function initializeTooltips() {
            if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
        }

        // Animate counters
        function animateCounters() {
            const counters = document.querySelectorAll('.stat-number');
            
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const counter = entry.target;
                        const finalValue = parseFloat(counter.textContent);
                        animateValue(counter, 0, finalValue, 1500);
                        observer.unobserve(counter);
                    }
                });
            });
            
            counters.forEach(counter => observer.observe(counter));
        }

        function animateValue(element, start, end, duration) {
            const range = end - start;
            const increment = range / (duration / 16);
            let current = start;
            
            const timer = setInterval(() => {
                current += increment;
                if (current >= end) {
                    current = end;
                    clearInterval(timer);
                }
                
                // Format based on content type
                if (element.textContent.includes('%')) {
                    element.textContent = current.toFixed(1) + '%';
                } else if (element.textContent.includes(':')) {
                    // Time format
                    const minutes = Math.floor(current);
                    const seconds = Math.round((current - minutes) * 60);
                    element.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                } else {
                    element.textContent = Math.round(current);
                }
            }, 16);
        }

        // Modal and action functions
        function showQuestionInsights(questionId) {
            const modal = new bootstrap.Modal(document.getElementById('questionInsightsModal'));
            const content = document.getElementById('questionInsightsContent');
            
            content.innerHTML = `
                <div class="text-center mb-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading question insights...</p>
                </div>
            `;
            
            modal.show();
            
            // Simulate loading insights
            setTimeout(() => {
                content.innerHTML = generateQuestionInsightsHTML(questionId);
            }, 1000);
        }

        function generateQuestionInsightsHTML(questionId) {
            return `
                <div class="insight-summary">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="insight-metric">
                                <h6>Response Data</h6>
                                <p>Based on actual student responses</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="insight-metric">
                                <h6>Performance</h6>
                                <p>Calculated from completed attempts</p>
                            </div>
                        </div>
                    </div>
                    <div class="insight-recommendations mt-3">
                        <h6>Analysis:</h6>
                        <ul>
                            <li>Question analytics based on real data</li>
                            <li>Performance metrics calculated automatically</li>
                            <li>Data updates with each completed attempt</li>
                        </ul>
                    </div>
                </div>
            `;
        }

        function exportAnalytics() {
            const modal = new bootstrap.Modal(document.getElementById('exportModal'));
            modal.show();
        }

        function processExport() {
            const format = document.querySelector('input[name="exportFormat"]:checked').value;
            const includeCharts = document.getElementById('includeCharts').checked;
            const includeInsights = document.getElementById('includeInsights').checked;
            const includeStudentData = document.getElementById('includeStudentData').checked;
            
            showToast(`Exporting analytics as ${format.toUpperCase()}...`, 'info');
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('exportModal'));
            modal.hide();
            
            // Simulate export process
            setTimeout(() => {
                showToast('Export completed successfully!', 'success');
            }, 2000);
        }

        function refreshAnalytics() {
            showToast('Refreshing analytics data...', 'info');
            
            // Add loading states to charts
            Object.values(charts).forEach(chart => {
                chart.data.datasets.forEach(dataset => {
                    dataset.backgroundColor = dataset.backgroundColor.replace('80', '40');
                });
                chart.update();
            });
            
            // Simulate refresh
            setTimeout(() => {
                Object.values(charts).forEach(chart => {
                    chart.data.datasets.forEach(dataset => {
                        dataset.backgroundColor = dataset.backgroundColor.replace('40', '80');
                    });
                    chart.update();
                });
                showToast('Analytics refreshed successfully!', 'success');
            }, 1500);
        }

        function generateNewInsights() {
            showToast('Generating new AI insights...', 'info');
            setTimeout(() => {
                showToast('New insights generated successfully!', 'success');
            }, 2000);
        }

        function viewPerformanceDetails() {
            showToast('Opening performance details...', 'info');
        }

        function showDifficultQuestions() {
            const difficultyFilter = document.getElementById('difficultyFilter');
            difficultyFilter.value = 'hard';
            filterTable();
            document.getElementById('difficultyFilter').scrollIntoView({ behavior: 'smooth' });
            showToast('Filtered to show difficult questions', 'info');
        }

        function viewTimingAnalysis() {
            showToast('Opening timing analysis...', 'info');
        }

        function generateLearningPlan() {
            showToast('Generating personalized learning plan...', 'info');
        }

        function showAllTopPerformers() {
            showToast('Showing all top performers...', 'info');
        }

        function showAllStrugglingStudents() {
            showToast('Showing all struggling students...', 'info');
        }

        function contactStudent(email) {
            showToast(`Opening email to ${email}...`, 'info');
        }

        function viewQuestionDetails() {
            const modal = bootstrap.Modal.getInstance(document.getElementById('questionInsightsModal'));
            modal.hide();
            showToast('Redirecting to detailed question analytics...', 'info');
        }

        // Toast notification system
        function showToast(message, type = 'info', duration = 4000) {
            const toastContainer = document.getElementById('toastContainer');
            const toastId = 'toast-' + Date.now();

            const toastHtml = `
                <div id="${toastId}" class="toast toast-${type} show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <i class="fas ${getToastIcon(type)} me-2"></i>
                        <strong class="me-auto">${getToastTitle(type)}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);

            // Auto-hide toast
            setTimeout(() => {
                const toast = document.getElementById(toastId);
                if (toast) {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }
            }, duration);
        }

        function getToastIcon(type) {
            const icons = {
                success: 'fa-check-circle',
                error: 'fa-exclamation-circle',
                warning: 'fa-exclamation-triangle',
                info: 'fa-info-circle'
            };
            return icons[type] || icons.info;
        }

        function getToastTitle(type) {
            const titles = {
                success: 'Success',
                error: 'Error',
                warning: 'Warning',
                info: 'Information'
            };
            return titles[type] || titles.info;
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Escape key to close modals
            if (e.key === 'Escape') {
                const openModals = document.querySelectorAll('.modal.show');
                openModals.forEach(modal => {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                });
            }
            
            // Ctrl/Cmd + E for export
            if ((e.ctrlKey || e.metaKey) && e.key === 'e') {
                e.preventDefault();
                exportAnalytics();
            }
            
            // Ctrl/Cmd + R for refresh
            if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
                e.preventDefault();
                refreshAnalytics();
            }
        });

        // Add smooth scrolling to anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    </script>
}