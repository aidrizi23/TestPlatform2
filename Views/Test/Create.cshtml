@model TestForCreationDto

@{
ViewData["Title"] = "Create Test";
}

<div class="container">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1>
                <i class="fas fa-plus-circle me-2"></i>Create New Test
                <small class="text-muted d-block mt-2 fs-6">Enter the details for your new test</small>
            </h1>
        </div>
        <div class="col-md-4 text-md-end d-flex align-items-center justify-content-md-end mt-3 mt-md-0">
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Tests
            </a>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h4 class="mb-0"><i class="fas fa-clipboard-list me-2"></i>Test Information</h4>
        </div>
        <div class="card-body p-4">
            <!-- Validation Summary -->
            @if (!ViewData.ModelState.IsValid)
            {
            <div class="alert alert-danger">
                <div asp-validation-summary="ModelOnly" class="mb-0"></div>
            </div>
            }

            <form asp-action="Create" method="post" asp-antiforgery="true">
                <!-- Test Title -->
                <div class="mb-4">
                    <label asp-for="Title" class="form-label">Test Title</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-heading"></i></span>
                        <input asp-for="Title" class="form-control" placeholder="Enter a descriptive title for your test" required />
                    </div>
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>

                <!-- Description -->
                <div class="mb-4">
                    <label asp-for="Description" class="form-label">Description</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                        <textarea asp-for="Description" class="form-control" rows="3"
                                  placeholder="Enter instructions or details about the test"></textarea>
                    </div>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <!-- Test Settings -->
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label asp-for="TimeLimit" class="form-label">Time Limit (minutes)</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                            <input asp-for="TimeLimit" class="form-control" type="number" min="1" max="180" required />
                        </div>
                        <span asp-validation-for="TimeLimit" class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mb-3">
                        <label asp-for="MaxAttempts" class="form-label">Max Attempts</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-redo"></i></span>
                            <input asp-for="MaxAttempts" class="form-control" type="number" min="1" max="10" required />
                        </div>
                        <span asp-validation-for="MaxAttempts" class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mb-3 d-flex align-items-end">
                        <div class="form-check form-switch">
                            <input asp-for="RandomizeQuestions" class="form-check-input" type="checkbox" role="switch" id="randomizeQuestions" />
                            <label asp-for="RandomizeQuestions" class="form-check-label">
                                <i class="fas fa-random me-2"></i>Randomize Questions
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Scheduling Section -->
                <div class="card mt-4 bg-light border-0">
                    <div class="card-header bg-transparent border-0 pb-0">
                        <div class="form-check form-switch">
                            <input asp-for="IsScheduled" class="form-check-input" type="checkbox" role="switch" id="isScheduled" onchange="toggleSchedulingFields()" />
                            <label asp-for="IsScheduled" class="form-check-label fw-bold">
                                <i class="fas fa-calendar-alt me-2"></i>Schedule this test
                            </label>
                        </div>
                        <small class="text-muted">Automatically publish and close the test at specific times</small>
                    </div>
                    <div class="card-body pt-3" id="schedulingFields" style="display: none;">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label asp-for="ScheduledStartDate" class="form-label">Start Date & Time</label>
                                <input asp-for="ScheduledStartDate" class="form-control" type="datetime-local" />
                                <div class="form-text">When the test becomes available to students</div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label asp-for="ScheduledEndDate" class="form-label">End Date & Time</label>
                                <input asp-for="ScheduledEndDate" class="form-control" type="datetime-local" />
                                <div class="form-text">When the test automatically closes</div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check form-switch">
                                    <input asp-for="AutoPublish" class="form-check-input" type="checkbox" role="switch" id="autoPublish" />
                                    <label asp-for="AutoPublish" class="form-check-label">
                                        <i class="fas fa-play me-2"></i>Auto-publish at start time
                                    </label>
                                    <div class="form-text">Automatically make the test available when start time is reached</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check form-switch">
                                    <input asp-for="AutoClose" class="form-check-input" type="checkbox" role="switch" id="autoClose" />
                                    <label asp-for="AutoClose" class="form-check-label">
                                        <i class="fas fa-stop me-2"></i>Auto-close at end time
                                    </label>
                                    <div class="form-text">Automatically close the test when end time is reached</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Test Preview -->
                <div class="card mt-4 mb-4 bg-light border-0">
                    <div class="card-body">
                        <h5 class="mb-3"><i class="fas fa-eye me-2"></i>Test Preview</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="test-preview-item">
                                    <span class="preview-label">Title:</span>
                                    <span id="preview-title" class="preview-value">@(string.IsNullOrEmpty(Model.Title) ? "Your test title" : Model.Title)</span>
                                </div>
                                <div class="test-preview-item">
                                    <span class="preview-label">Description:</span>
                                    <span id="preview-description" class="preview-value">@(string.IsNullOrEmpty(Model.Description) ? "Test description will appear here" : Model.Description)</span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="test-preview-item">
                                    <span class="preview-label">Time Limit:</span>
                                    <span id="preview-timeLimit" class="preview-value">@Model.TimeLimit minutes</span>
                                </div>
                                <div class="test-preview-item">
                                    <span class="preview-label">Max Attempts:</span>
                                    <span id="preview-maxAttempts" class="preview-value">@Model.MaxAttempts</span>
                                </div>
                                <div class="test-preview-item">
                                    <span class="preview-label">Randomize Questions:</span>
                                    <span id="preview-randomize" class="preview-value">@(Model.RandomizeQuestions ? "Yes" : "No")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="d-flex justify-content-end mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Create Test
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Focus the title field when the page loads
        document.getElementById('Title').focus();

        // Live preview update
        const titleInput = document.getElementById('Title');
        const descriptionInput = document.getElementById('Description');
        const timeLimitInput = document.getElementById('TimeLimit');
        const maxAttemptsInput = document.getElementById('MaxAttempts');
        const randomizeInput = document.getElementById('randomizeQuestions');

        const previewTitle = document.getElementById('preview-title');
        const previewDescription = document.getElementById('preview-description');
        const previewTimeLimit = document.getElementById('preview-timeLimit');
        const previewMaxAttempts = document.getElementById('preview-maxAttempts');
        const previewRandomize = document.getElementById('preview-randomize');

        // Update title preview
        if (titleInput && previewTitle) {
            titleInput.addEventListener('input', function() {
                previewTitle.textContent = this.value || 'Your test title';
            });
        }

        // Update description preview
        if (descriptionInput && previewDescription) {
            descriptionInput.addEventListener('input', function() {
                previewDescription.textContent = this.value || 'Test description will appear here';
            });
        }

        // Update time limit preview
        if (timeLimitInput && previewTimeLimit) {
            timeLimitInput.addEventListener('input', function() {
                previewTimeLimit.textContent = this.value + ' minutes';
            });
        }

        // Update max attempts preview
        if (maxAttemptsInput && previewMaxAttempts) {
            maxAttemptsInput.addEventListener('input', function() {
                previewMaxAttempts.textContent = this.value;
            });
        }

        // Update randomize preview
        if (randomizeInput && previewRandomize) {
            randomizeInput.addEventListener('change', function() {
                previewRandomize.textContent = this.checked ? 'Yes' : 'No';
            });
        }
    });

    // Toggle scheduling fields visibility
    function toggleSchedulingFields() {
        const isScheduled = document.getElementById('isScheduled').checked;
        const schedulingFields = document.getElementById('schedulingFields');
        
        if (isScheduled) {
            schedulingFields.style.display = 'block';
            // Set default start time to current time + 1 hour
            const now = new Date();
            now.setHours(now.getHours() + 1);
            const startInput = document.getElementById('ScheduledStartDate');
            if (startInput && !startInput.value) {
                startInput.value = now.toISOString().slice(0, 16);
            }
            // Set default end time to start time + 2 hours
            const endTime = new Date(now);
            endTime.setHours(endTime.getHours() + 2);
            const endInput = document.getElementById('ScheduledEndDate');
            if (endInput && !endInput.value) {
                endInput.value = endTime.toISOString().slice(0, 16);
            }
        } else {
            schedulingFields.style.display = 'none';
        }
    }
</script>
}