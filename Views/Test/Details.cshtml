@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TestPlatform2.Data.Questions
@model TestPlatform2.Data.Test
@{
ViewData["Title"] = "Test Details";
}

<div class="container">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h1>
                <i class="fas fa-clipboard-check me-2"></i>@Model.TestName
                <span class="badge ms-2 @(Model.IsLocked ? "bg-danger" : "bg-success")">
                    @(Model.IsLocked ? "Locked" : "Active")
                </span>
            </h1>
            <p>@Model.Description</p>
        </div>
        <div class="col-md-4 text-md-end d-flex flex-wrap justify-content-md-end gap-2 mt-3 mt-md-0">
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Tests
            </a>
            <button id="lockTestButton" class="btn @(Model.IsLocked ? "btn-success" : "btn-warning")" onclick="lockTest('@Model.Id')">
                <i class="fas @(Model.IsLocked ? "fa-lock-open" : "fa-lock") me-2"></i>
                @(Model.IsLocked ? "Unlock Test" : "Lock Test")
            </button>
        </div>
    </div>

    <!-- Test Information Card -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0"><i class="fas fa-info-circle me-2"></i>Test Information</h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-random me-2"></i>Randomize Questions</span>
                                    <span class="badge @(Model.RandomizeQuestions ? "bg-success" : "bg-secondary")">
                                        @(Model.RandomizeQuestions ? "Yes" : "No")
                                    </span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-clock me-2"></i>Time Limit</span>
                                    <span class="badge bg-primary">@Model.TimeLimit minutes</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-redo me-2"></i>Max Attempts</span>
                                    <span class="badge bg-info">@Model.MaxAttempts</span>
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-6 mt-3 mt-md-0">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-question-circle me-2"></i>Questions</span>
                                    <span class="badge bg-primary">@Model.Questions.Count</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-users me-2"></i>Invitations</span>
                                    <span class="badge bg-info">@Model.InvitedStudents.Count</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><i class="fas fa-clipboard-list me-2"></i>Attempts</span>
                                    <span class="badge bg-success">@Model.Attempts.Count</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12 d-flex justify-content-center gap-2">
                            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                                <i class="fas fa-edit me-2"></i>Edit Test
                            </a>
                            <a asp-action="AllAttempts" asp-route-testId="@Model.Id" class="btn btn-info">
                                <i class="fas fa-clipboard-list me-2"></i>View Attempts
                            </a>
                            <a asp-action="Analytics" asp-route-id="@Model.Id" class="btn btn-info">
                                <i class="fas fa-chart-line me-2"></i>View Analytics
                            </a>

                            <button type="button" class="btn btn-danger" onclick="confirmDelete('@Model.Id')">
                                <i class="fas fa-trash me-2"></i>Delete Test
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabs for Questions and Invites -->
    <ul class="nav nav-tabs mb-4" id="testDetailsTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="questions-tab" data-bs-toggle="tab" data-bs-target="#questions"
                    type="button" role="tab" aria-controls="questions" aria-selected="true">
                <i class="fas fa-question-circle me-2"></i>Questions
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="invites-tab" data-bs-toggle="tab" data-bs-target="#invites"
                    type="button" role="tab" aria-controls="invites" aria-selected="false">
                <i class="fas fa-envelope me-2"></i>Send Invites
            </button>
        </li>
    </ul>

    <div class="tab-content" id="testDetailsTabsContent">
        <!-- Questions Tab -->
        <div class="tab-pane fade show active" id="questions" role="tabpanel" aria-labelledby="questions-tab">
            <!-- Add Questions Section -->
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-plus-circle me-2"></i>Add Questions</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3 mb-md-0">
                            <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id"
                               class="btn btn-primary d-flex flex-column align-items-center justify-content-center p-4 h-100 w-100">
                                <i class="fas fa-list-ul fa-2x mb-2"></i>
                                <span>Multiple Choice</span>
                            </a>
                        </div>
                        <div class="col-md-4 mb-3 mb-md-0">
                            <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id"
                               class="btn btn-success d-flex flex-column align-items-center justify-content-center p-4 h-100 w-100">
                                <i class="fas fa-check-circle fa-2x mb-2"></i>
                                <span>True/False</span>
                            </a>
                        </div>
                        <div class="col-md-4">
                            <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id"
                               class="btn btn-info d-flex flex-column align-items-center justify-content-center p-4 h-100 w-100">
                                <i class="fas fa-pen fa-2x mb-2"></i>
                                <span>Short Answer</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Questions List -->
            @if (Model.Questions?.Any() == true)
            {
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-list me-2"></i>Questions List</h5>
                    <span class="badge bg-primary">@Model.Questions.Count Questions</span>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @foreach (var question in Model.Questions.OrderBy(q => q.Position))
                        {
                        <div class="list-group-item question-list-item">
                            <div class="question-info">
                                <span class="badge bg-secondary">@(question.Position + 1)</span>
                                <span class="question-text">@question.Text</span>
                                <span class="badge bg-primary">@question.Points pts</span>
                                @{
                                var questionType = question switch
                                {
                                TrueFalseQuestion => "True/False",
                                MultipleChoiceQuestion => "Multiple Choice",
                                ShortAnswerQuestion => "Short Answer",
                                _ => "Unknown"
                                };

                                var badgeClass = questionType switch
                                {
                                "True/False" => "bg-success",
                                "Multiple Choice" => "bg-primary",
                                "Short Answer" => "bg-info",
                                _ => "bg-secondary"
                                };
                                }
                                <span class="badge @badgeClass">@questionType</span>
                            </div>
                            <div class="question-actions">
                                <a href="#" class="btn btn-sm btn-info" title="View Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id"
                                   class="btn btn-sm btn-warning" title="Edit Question">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a asp-controller="Test" asp-action="QuestionAnalytics" asp-route-questionId="@question.Id" asp-route-testId="@Model.Id"
                                   class="btn btn-sm btn-warning" title="Edit Question">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-danger" title="Delete Question"
                                        onclick="confirmDeleteQuestion('@question.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        }
                    </div>
                </div>
            </div>
            }
            else
            {
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                No questions have been added to this test. Use the buttons above to add questions.
            </div>
            }
        </div>

        <!-- Invites Tab -->
        <div class="tab-pane fade" id="invites" role="tabpanel" aria-labelledby="invites-tab">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-envelope me-2"></i>Send Invites to Students</h5>
                </div>
                <div class="card-body">
                    @if(Model.Questions.Count == 0)
                    {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        You need to add at least one question before sending invites.
                    </div>
                    }
                    else if(Model.IsLocked)
                    {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        The test is currently locked. Unlock it to send invites.
                    </div>
                    }
                    else
                    {
                    <!-- Form to Specify Number of Emails -->
                    <form id="emailForm" class="mb-4">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="emailCount" class="form-label">Number of students to invite:</label>
                                    <input type="number" id="emailCount" name="emailCount" class="form-control"
                                           min="1" placeholder="Enter number" required>
                                    <div class="form-text text-muted">Enter the number of email fields to generate</div>
                                </div>
                            </div>
                            <div class="col-md-6 d-flex align-items-end">
                                <div class="d-flex gap-2 w-100">
                                    <button type="button" class="btn btn-primary flex-grow-1" onclick="generateEmailFields()">
                                        <i class="fas fa-plus-circle me-2"></i>Generate Fields
                                    </button>
                                    <button type="button" class="btn btn-secondary flex-grow-1" onclick="addSingleField()">
                                        <i class="fas fa-plus me-2"></i>Add Single Field
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>

                    <!-- Dynamic Email Input Fields -->
                    <div id="emailInputsContainer" style="display: none;" class="email-inputs-container">
                        <h5 class="mb-3"><i class="fas fa-user-plus me-2"></i>Student Email Addresses</h5>
                        <form id="emailInputsForm" novalidate>
                            <div id="emailInputs" class="mb-3"></div>
                            <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')">
                                <i class="fas fa-paper-plane me-2"></i>Send Invites
                            </button>
                        </form>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Question Confirmation Modal -->
<div class="modal fade" id="deleteQuestionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this question?</p>
                <p class="text-danger">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <form id="deleteQuestionForm" method="post">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-2"></i>Delete Question
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Delete Test Confirmation Modal -->
<div class="modal fade" id="deleteTestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete Test</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this test?</p>
                <p class="text-danger">This action cannot be undone and will delete all questions and student attempts associated with this test.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <a id="deleteTestLink" href="#" class="btn btn-danger">
                    <i class="fas fa-trash me-2"></i>Delete Test
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Lock/Unlock Test
    function lockTest(id) {
        fetch('/Test/LockTest/' + id, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const button = document.getElementById('lockTestButton');
                    const icon = button.querySelector('i');

                    if (data.isLocked) {
                        button.innerHTML = '<i class="fas fa-lock-open me-2"></i>Unlock Test';
                        button.classList.remove('btn-warning');
                        button.classList.add('btn-success');
                        showToast('Test has been locked successfully', 'success');
                    } else {
                        button.innerHTML = '<i class="fas fa-lock me-2"></i>Lock Test';
                        button.classList.remove('btn-success');
                        button.classList.add('btn-warning');
                        showToast('Test has been unlocked successfully', 'success');
                    }

                    // Reload the page to refresh all status indicators
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(data.message || 'Error updating test status', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while updating the test', 'error');
            });
    }

    // Confirm Delete Question
    function confirmDeleteQuestion(id) {
        const deleteForm = document.getElementById('deleteQuestionForm');
        deleteForm.action = '/Question/Delete/' + id;

        const modal = new bootstrap.Modal(document.getElementById('deleteQuestionModal'));
        modal.show();
    }

    // Confirm Delete Test
    function confirmDelete(id) {
        const deleteLink = document.getElementById('deleteTestLink');
        deleteLink.href = '/Test/Delete/' + id;

        const modal = new bootstrap.Modal(document.getElementById('deleteTestModal'));
        modal.show();
    }

    // Generate Email Fields
    function generateEmailFields() {
        const emailCount = parseInt(document.getElementById('emailCount').value);

        if (!emailCount || emailCount < 1) {
            showToast('Please enter a valid number of students', 'warning');
            return;
        }

        const emailInputsDiv = document.getElementById('emailInputs');
        emailInputsDiv.innerHTML = ''; // Clear existing fields

        for (let i = 1; i <= emailCount; i++) {
            addEmailField(i);
        }

        document.getElementById('emailInputsContainer').style.display = 'block';
    }

    // Add Single Email Field
    function addSingleField() {
        const emailInputsDiv = document.getElementById('emailInputs');
        const emailCount = emailInputsDiv.children.length + 1;

        addEmailField(emailCount);

        document.getElementById('emailInputsContainer').style.display = 'block';
    }

    // Helper function to add email field
    function addEmailField(index) {
        const emailInputsDiv = document.getElementById('emailInputs');

        const emailInputDiv = document.createElement('div');
        emailInputDiv.className = 'input-group email-input-group mb-2';

        const uniqueId = `email-${Date.now()}-${index}`;

        emailInputDiv.innerHTML = `
                <span class="input-group-text"><i class="fas fa-user"></i></span>
                <input type="email" id="${uniqueId}" class="form-control" placeholder="Student ${index} email" required>
                <button type="button" class="btn btn-danger" onclick="removeEmailField(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;

        emailInputsDiv.appendChild(emailInputDiv);
    }

    // Remove Email Field
    function removeEmailField(button) {
        const emailInputGroup = button.closest('.email-input-group');

        // Add removal animation
        emailInputGroup.style.opacity = '0';
        emailInputGroup.style.transform = 'translateX(20px)';
        emailInputGroup.style.transition = 'all 0.3s ease';

        setTimeout(() => {
            emailInputGroup.remove();

            // Renumber remaining fields
            const emailGroups = document.querySelectorAll('.email-input-group');
            emailGroups.forEach((group, index) => {
                const input = group.querySelector('input');
                input.placeholder = `Student ${index + 1} email`;
            });

            // Hide container if no email fields remain
            if (emailGroups.length === 0) {
                document.getElementById('emailInputsContainer').style.display = 'none';
            }
        }, 300);
    }

    // Send Invites
    function sendInvites(testId) {
        const emailInputs = document.querySelectorAll('#emailInputs input[type="email"]');
        const emails = [];

        // Validate form
        let isValid = true;
        emailInputs.forEach(input => {
            if (!input.checkValidity()) {
                input.classList.add('is-invalid');
                isValid = false;
            } else {
                input.classList.remove('is-invalid');
                emails.push(input.value.trim());
            }
        });

        if (!isValid || emails.length === 0) {
            showToast('Please enter valid email addresses', 'warning');
            return;
        }

        // Disable button and show loading state
        const sendButton = document.querySelector('button[onclick^="sendInvites"]');
        const originalText = sendButton.innerHTML;
        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending...';

        // Send invites
        fetch(`/TestInvite/SendInvites?testId=${testId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(emails),
        })
            .then(response => {
                if (response.ok) {
                    return response.json().catch(() => ({})); // Handle empty responses
                }
                throw new Error('Failed to send invites');
            })
            .then(() => {
                showToast(`Invites sent successfully to ${emails.length} student(s)`, 'success');

                // Clear the form
                document.getElementById('emailInputs').innerHTML = '';
                document.getElementById('emailInputsContainer').style.display = 'none';
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error sending invites. Please try again.', 'error');
            })
            .finally(() => {
                // Restore button state
                sendButton.disabled = false;
                sendButton.innerHTML = originalText;
            });
    }

    // Initialize Bootstrap tabs
    document.addEventListener('DOMContentLoaded', function() {
        // Set active tab based on hash
        const hash = window.location.hash;
        if (hash) {
            const tab = document.querySelector(`a[href="${hash}"]`);
            if (tab) {
                tab.click();
            }
        }

        // Update hash when tab changes
        const tabLinks = document.querySelectorAll('button[data-bs-toggle="tab"]');
        tabLinks.forEach(link => {
            link.addEventListener('shown.bs.tab', function(e) {
                const id = e.target.getAttribute('data-bs-target');
                window.location.hash = id;
            });
        });
    });
</script>
}