


@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TestPlatform2.Data.Questions
@model TestPlatform2.Data.Test

@{
    ViewData["Title"] = "Test Details";
}

<h2>Test Details</h2>

<div class="card mb-4">
    <div class="card-body">
        <h4 class="card-title">@Model.TestName</h4>

        <dl class="row">
            <dt class="col-sm-3">Description</dt>
            <dd class="col-sm-9">@Model.Description</dd>

            <dt class="col-sm-3">Randomize Questions</dt>
            <dd class="col-sm-9">@(Model.RandomizeQuestions ? "Yes" : "No")</dd>

            <dt class="col-sm-3">Time Limit</dt>
            <dd class="col-sm-9">@Model.TimeLimit minutes</dd>

            <dt class="col-sm-3">Max Attempts</dt>
            <dd class="col-sm-9">@Model.MaxAttempts</dd>

            <dt class="col-sm-3">Created By</dt>
            <dd class="col-sm-9">@Model.User?.UserName</dd>
        </dl>

        <!-- Question Type Buttons -->
        <div class="mb-4">
            <h5>Add Questions:</h5>
            <div class="btn-group">
                <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id" class="btn btn-primary me-2">
                    <i class="fas fa-list-ul"></i> Multiple Choice
                </a>
                <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id" class="btn btn-success me-2">
                    <i class="fas fa-check-circle"></i> True/False
                </a>
                <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id" class="btn btn-info me-2">
                    <i class="fas fa-pen"></i> Short Answer
                </a>
            </div>
        </div>

        <!-- Navigation Buttons -->
        <div class="mt-3">
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Tests
            </a>
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning ms-2">
                <i class="fas fa-edit"></i> Edit Test
            </a>
            <button type="button" class="btn btn-danger ms-2" onclick="deleteTest('@Model.Id')">
                <i class="fas fa-trash"></i> Delete Test
            </button>
        </div>
    </div>
</div>

<!-- List of Existing Questions -->
@if (Model.Questions?.Any() == true)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Questions</h5>
            <div class="list-group">
                @foreach (var question in Model.Questions.OrderBy(q => q.Position))
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge bg-secondary me-2">@question.Position</span>
                            @question.Text
                            <span class="badge bg-primary ms-2">@question.Points pts</span>
                            @{
                                var questionType = question switch
                                {
                                    TrueFalseQuestion => "True/False",
                                    MultipleChoiceQuestion => "Multiple Choice",
                                    ShortAnswerQuestion => "Short Answer",
                                    _ => "Unknown"
                                };
                            }
                            <span class="badge bg-info ms-2">@questionType</span>
                        </div>
                        <div class="btn-group">
                            <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id" class="btn btn-sm btn-warning">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button type="button" class="btn btn-sm btn-danger" onclick="confirmDeleteQuestion('@question.Id')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


<!-- Send Invites Section -->
<div class="card mt-4">
    <div class="card-body">
        <h5 class="card-title">Send Invites to Students</h5>

        <!-- Form to Add Emails -->
        <form id="addEmailsForm">
            <div class="mb-3">
                <label for="emails" class="form-label">Enter student emails (comma-separated):</label>
                <textarea id="emails" name="emails" class="form-control" rows="3" placeholder="e.g., student1@example.com, student2@example.com"></textarea>
            </div>
            <button type="button" class="btn btn-primary" onclick="addEmails()">
                <i class="fas fa-plus"></i> Add Emails
            </button>
        </form>

        <!-- List of Added Emails -->
        <div class="mt-4">
            <h6>Emails to Invite:</h6>
            <ul id="emailList" class="list-group">
                <!-- Emails will be dynamically added here -->
            </ul>
        </div>

        <!-- Button to Send Invites -->
        <div class="mt-3">
            <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')">
                <i class="fas fa-paper-plane"></i> Send Invites
            </button>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function confirmDeleteQuestion(id) {
            if (confirm('Are you sure you want to delete this question?')) {
                $.ajax({
                    url: '@Url.Action("Delete", "Question")/' + id,
                    type: 'POST',
                    success: function() {
                        location.reload();
                    },
                    error: function() {
                        alert('Error deleting question');
                    }
                });
            }
        }

        function deleteTest(id) {
            if (confirm('Are you sure you want to delete this test and all its questions?')) {
                window.location.href = '@Url.Action("Delete", "Test")/' + id;
            }
        }
    </script>

    <script>
        // Array to store emails
        let emails = [];

        // Function to add emails to the list
        function addEmails() {
            const emailInput = document.getElementById('emails').value;
            const newEmails = emailInput.split(',').map(email => email.trim()).filter(email => email);

            // Add new emails to the array
            emails = [...new Set([...emails, ...newEmails])];

            // Clear the input
            document.getElementById('emails').value = '';

            // Update the email list UI
            updateEmailList();
        }

        // Function to update the email list UI
        function updateEmailList() {
            const emailList = document.getElementById('emailList');
            emailList.innerHTML = ''; // Clear the list

            emails.forEach(email => {
                const listItem = document.createElement('li');
                listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                listItem.textContent = email;

                // Add a remove button
                const removeButton = document.createElement('button');
                removeButton.className = 'btn btn-sm btn-danger';
                removeButton.innerHTML = '<i class="fas fa-times"></i>';
                removeButton.onclick = () => removeEmail(email);

                listItem.appendChild(removeButton);
                emailList.appendChild(listItem);
            });
        }

        // Function to remove an email from the list
        function removeEmail(email) {
            emails = emails.filter(e => e !== email);
            updateEmailList();
        }

        // Function to send invites
        function sendInvites(testId) {
            if (emails.length === 0) {
                alert('Please add at least one email.');
                return;
            }

            // Send the emails to the server
            fetch(`/TestInvite/SendInvites?testId=${testId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(emails),
            })
                .then(response => {
                    if (response.ok) {
                        alert('Invites sent successfully!');
                        emails = []; // Clear the email list
                        updateEmailList(); // Update the UI
                    } else {
                        alert('Error sending invites.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error sending invites.');
                });
        }
    </script>
}