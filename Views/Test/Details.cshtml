@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TestPlatform2.Data.Questions
@model TestPlatform2.Data.Test
@{
ViewData["Title"] = "Test Details";
}

<div class="test-details-container">
    <!-- Header Section -->
    <div class="test-header">
        <div class="header-content">
            <div class="header-main">
                <div class="breadcrumb-nav">
                    <a asp-action="Index" class="breadcrumb-link">
                        <i class="fas fa-arrow-left me-2"></i>My Tests
                    </a>
                    <span class="breadcrumb-separator">/</span>
                    <span class="breadcrumb-current">Test Details</span>
                </div>

                <div class="test-title-section">
                    <h1 class="test-title">
                        @Model.TestName
                        <span class="status-indicator @(Model.IsLocked ? "status-locked" : "status-active")" id="statusIndicator">
                            <i class="fas @(Model.IsLocked ? "fa-lock" : "fa-unlock")" id="statusIcon"></i>
                            <span id="statusText">@(Model.IsLocked ? "Locked" : "Active")</span>
                        </span>
                    </h1>
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                    <p class="test-description">@Model.Description</p>
                    }
                </div>
            </div>

            <div class="header-actions">
                <div class="action-buttons">
                    <button id="lockTestButton" class="btn @(Model.IsLocked ? "btn-success" : "btn-warning")" onclick="toggleTestLock('@Model.Id')">
                        <i class="fas @(Model.IsLocked ? "fa-lock-open" : "fa-lock") me-2" id="lockIcon"></i>
                        <span id="lockButtonText">@(Model.IsLocked ? "Unlock" : "Lock") Test</span>
                    </button>
                    <button class="btn btn-outline-primary" onclick="openEditTestModal('@Model.Id')">
                        <i class="fas fa-edit me-2"></i>Edit Test
                    </button>
                    <button class="btn btn-outline-info" onclick="openTestStatsModal('@Model.Id')">
                        <i class="fas fa-chart-bar me-2"></i>Statistics
                    </button>
                    <button class="btn btn-outline-success" onclick="openShareTestModal('@Model.Id')">
                        <i class="fas fa-share-alt me-2"></i>Share Test
                    </button>
                    <div class="dropdown">
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="fas fa-download me-2"></i>Export
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" asp-controller="Test" asp-action="ExportTestSummaryPdf" asp-route-testId="@Model.Id">
                                    <i class="fas fa-file-pdf text-danger me-2"></i>Test Summary (PDF)
                                </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" asp-controller="Test" asp-action="AllAttempts" asp-route-testId="@Model.Id">
                                    <i class="fas fa-chart-bar me-2"></i>View Results to Export
                                </a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-grid" id="statsGrid">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-question-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="questionsCount">@Model.Questions.Count</div>
                <div class="stat-label">Questions</div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="invitesCount">@Model.InvitedStudents.Count</div>
                <div class="stat-label">Invitations Sent</div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="attemptsCount">@Model.Attempts.Count</div>
                <div class="stat-label">Total Attempts</div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="timeLimit">@Model.TimeLimit</div>
                <div class="stat-label">Minutes</div>
            </div>
        </div>
    </div>

    <!-- Test Configuration -->
    <div class="config-section">
        <h2 class="section-title">
            <i class="fas fa-cog me-2"></i>Test Configuration
        </h2>
        <div class="config-grid">
            <div class="config-item">
                <div class="config-icon">
                    <i class="fas fa-random"></i>
                </div>
                <div class="config-content">
                    <div class="config-title">Question Order</div>
                    <div class="config-value @(Model.RandomizeQuestions ? "text-success" : "text-muted")" id="questionOrder">
                        @(Model.RandomizeQuestions ? "Randomized" : "Sequential")
                    </div>
                </div>
            </div>

            <div class="config-item">
                <div class="config-icon">
                    <i class="fas fa-redo"></i>
                </div>
                <div class="config-content">
                    <div class="config-title">Maximum Attempts</div>
                    <div class="config-value" id="maxAttempts">@Model.MaxAttempts</div>
                </div>
            </div>

            <div class="config-item">
                <div class="config-icon">
                    <i class="fas fa-hourglass-half"></i>
                </div>
                <div class="config-content">
                    <div class="config-title">Time Limit</div>
                    <div class="config-value" id="timeLimitDisplay">@Model.TimeLimit minutes</div>
                </div>
            </div>

            @if (Model.IsScheduled)
            {
            <div class="config-item">
                <div class="config-icon">
                    <i class="fas fa-calendar-check"></i>
                </div>
                <div class="config-content">
                    <div class="config-title">Scheduling Status</div>
                    <div class="config-value">
                        @switch (Model.Status)
                        {
                            case TestPlatform2.Data.TestStatus.Scheduled:
                                <span class="badge bg-warning text-dark">
                                    <i class="fas fa-clock me-1"></i>Scheduled
                                </span>
                                @if (Model.ScheduledStartDate.HasValue)
                                {
                                    <small class="d-block text-muted mt-1">
                                        <i class="fas fa-play me-1"></i>
                                        Opens: @Model.ScheduledStartDate.Value.ToString("MMM dd, yyyy 'at' HH:mm")
                                    </small>
                                }
                                break;
                            case TestPlatform2.Data.TestStatus.Active:
                                <span class="badge bg-success">
                                    <i class="fas fa-play me-1"></i>Active
                                </span>
                                @if (Model.ScheduledEndDate.HasValue)
                                {
                                    <small class="d-block text-muted mt-1">
                                        <i class="fas fa-stop me-1"></i>
                                        Closes: @Model.ScheduledEndDate.Value.ToString("MMM dd, yyyy 'at' HH:mm")
                                    </small>
                                }
                                break;
                            case TestPlatform2.Data.TestStatus.Closed:
                                <span class="badge bg-danger">
                                    <i class="fas fa-stop me-1"></i>Closed
                                </span>
                                break;
                        }
                    </div>
                </div>
            </div>
            }
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <div class="actions-grid">
            <a asp-action="AllAttempts" asp-route-testId="@Model.Id" class="action-card">
                <div class="action-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <div class="action-content">
                    <div class="action-title">View Results</div>
                    <div class="action-subtitle">See all student attempts and scores</div>
                </div>
                <div class="action-arrow">
                    <i class="fas fa-chevron-right"></i>
                </div>
            </a>

            <a asp-action="Analytics" asp-route-id="@Model.Id" class="action-card">
                <div class="action-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <div class="action-content">
                    <div class="action-title">Analytics</div>
                    <div class="action-subtitle">Detailed performance insights</div>
                </div>
                <div class="action-arrow">
                    <i class="fas fa-chevron-right"></i>
                </div>
            </a>

            <button type="button" class="action-card action-button" onclick="openDeleteTestModal('@Model.Id')">
                <div class="action-icon text-danger">
                    <i class="fas fa-trash"></i>
                </div>
                <div class="action-content">
                    <div class="action-title text-danger">Delete Test</div>
                    <div class="action-subtitle">Permanently remove this test</div>
                </div>
                <div class="action-arrow text-danger">
                    <i class="fas fa-chevron-right"></i>
                </div>
            </button>

            <button type="button" class="action-card action-button" onclick="openCloneTestModal('@Model.Id')">
                <div class="action-icon text-info">
                    <i class="fas fa-clone"></i>
                </div>
                <div class="action-content">
                    <div class="action-title text-info">Clone Test</div>
                    <div class="action-subtitle">Create a copy of this test</div>
                </div>
                <div class="action-arrow text-info">
                    <i class="fas fa-chevron-right"></i>
                </div>
            </button>
        </div>
    </div>

    <!-- Main Content Tabs -->
    <div class="content-tabs">
        <nav class="tab-nav">
            <button class="tab-btn active" data-tab="questions">
                <i class="fas fa-question-circle me-2"></i>
                Questions <span class="tab-count" id="questionsTabCount">@Model.Questions.Count</span>
            </button>
            <button class="tab-btn" data-tab="invites">
                <i class="fas fa-envelope me-2"></i>
                Send Invites <span class="tab-count" id="invitesTabCount">@Model.InvitedStudents.Count</span>
            </button>
        </nav>

        <!-- Questions Tab -->
        <div class="tab-content active" id="questions">
            @if (Model.Questions?.Any() == true)
            {
            <!-- Add Question Actions -->
            <div class="add-questions-section">
                <h3 class="subsection-title">Add New Questions</h3>
                <div class="question-types-grid">
                    <button class="question-type-card" onclick="openCreateQuestionModal('MultipleChoice', '@Model.Id')">
                        <div class="question-type-icon multiple-choice">
                            <i class="fas fa-list-ul"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">Multiple Choice</div>
                            <div class="question-type-desc">Single or multiple selections</div>
                        </div>
                    </button>

                    <button class="question-type-card" onclick="openCreateQuestionModal('TrueFalse', '@Model.Id')">
                        <div class="question-type-icon true-false">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">True/False</div>
                            <div class="question-type-desc">Binary choice questions</div>
                        </div>
                    </button>

                    <button class="question-type-card" onclick="openCreateQuestionModal('ShortAnswer', '@Model.Id')">
                        <div class="question-type-icon short-answer">
                            <i class="fas fa-pen"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">Short Answer</div>
                            <div class="question-type-desc">Text-based responses</div>
                        </div>
                    </button>

                    <button class="question-type-card" onclick="openCreateQuestionModal('DragDrop', '@Model.Id')">
                        <div class="question-type-icon drag-drop">
                            <i class="fas fa-hand-rock"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">Drag & Drop</div>
                            <div class="question-type-desc">Interactive sorting questions</div>
                        </div>
                    </button>

                    <button class="question-type-card" onclick="openCreateQuestionModal('ImageBased', '@Model.Id')">
                        <div class="question-type-icon image-based">
                            <i class="fas fa-image"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">Image-Based</div>
                            <div class="question-type-desc">Visual hotspot questions</div>
                        </div>
                    </button>
                </div>
            </div>

            <!-- Questions List -->
            <div class="questions-section">
                <div class="section-header">
                    <h3 class="subsection-title">Questions List</h3>
                    <div class="section-meta">
                            <span class="total-points">
                                Total Points: <strong id="totalPoints">@Model.Questions.Sum(q => q.Points)</strong>
                            </span>
                    </div>
                </div>
                
                <!-- Question Filters -->
                <div class="question-filters">
                    <div class="filter-group">
                        <label class="filter-label">Filter by Type:</label>
                        <div class="filter-buttons">
                            <button class="filter-btn active" data-filter="all" onclick="filterQuestions('all')">
                                <i class="fas fa-list me-1"></i>All (@Model.Questions.Count)
                            </button>
                            <button class="filter-btn" data-filter="multiple-choice" onclick="filterQuestions('multiple-choice')">
                                <i class="fas fa-list-ul me-1"></i>Multiple Choice (@(Model.Questions.OfType<MultipleChoiceQuestion>().Count()))
                            </button>
                            <button class="filter-btn" data-filter="true-false" onclick="filterQuestions('true-false')">
                                <i class="fas fa-check-circle me-1"></i>True/False (@(Model.Questions.OfType<TrueFalseQuestion>().Count()))
                            </button>
                            <button class="filter-btn" data-filter="short-answer" onclick="filterQuestions('short-answer')">
                                <i class="fas fa-pen me-1"></i>Short Answer (@(Model.Questions.OfType<ShortAnswerQuestion>().Count()))
                            </button>
                            <button class="filter-btn" data-filter="drag-drop" onclick="filterQuestions('drag-drop')">
                                <i class="fas fa-hand-rock me-1"></i>Drag & Drop (@(Model.Questions.OfType<DragDropQuestion>().Count()))
                            </button>
                            <button class="filter-btn" data-filter="image-based" onclick="filterQuestions('image-based')">
                                <i class="fas fa-image me-1"></i>Image-Based (@(Model.Questions.OfType<ImageBasedQuestion>().Count()))
                            </button>
                        </div>
                    </div>
                    
                    <div class="filter-group">
                        <label class="filter-label">Sort by:</label>
                        <select class="filter-select" id="sortQuestions" onchange="sortQuestions(this.value)">
                            <option value="position">Position</option>
                            <option value="type">Question Type</option>
                            <option value="points-high">Points (High to Low)</option>
                            <option value="points-low">Points (Low to High)</option>
                        </select>
                    </div>
                </div>

                <div class="questions-list" id="questionsList">
                    @foreach (var question in Model.Questions.OrderBy(q => q.Position))
                    {
                    var questionType = question switch
                    {
                    TrueFalseQuestion => "True/False",
                    MultipleChoiceQuestion => "Multiple Choice",
                    ShortAnswerQuestion => "Short Answer",
                    DragDropQuestion => "Drag & Drop",
                    ImageBasedQuestion => "Image-Based",
                    _ => "Unknown"
                    };

                    var typeClass = questionType.ToLower().Replace("/", "-").Replace(" ", "-");

                    <div class="question-item" data-question-id="@question.Id">
                        <div class="question-number">
                            @(question.Position + 1)
                        </div>

                        <div class="question-content">
                            <div class="question-header">
                                <div class="question-meta">
                                            <span class="question-type-badge @typeClass">
                                                @switch (question)
                                                {
                                                case TrueFalseQuestion:
                                                <i class="fas fa-check-circle me-1"></i>
                                                break;
                                                case MultipleChoiceQuestion:
                                                <i class="fas fa-list-ul me-1"></i>
                                                break;
                                                case ShortAnswerQuestion:
                                                <i class="fas fa-pen me-1"></i>
                                                break;
                                                case DragDropQuestion:
                                                <i class="fas fa-hand-rock me-1"></i>
                                                break;
                                                case ImageBasedQuestion:
                                                <i class="fas fa-image me-1"></i>
                                                break;
                                                }
                                                @questionType
                                            </span>
                                    <span class="question-points">
                                                <i class="fas fa-star me-1"></i>
                                        @question.Points pts
                                            </span>
                                </div>
                            </div>

                            <div class="question-text">
                                @question.Text
                            </div>

                            @switch (question)
                            {
                            case MultipleChoiceQuestion mcq:
                            <div class="question-preview">
                                <div class="options-preview">
                                    @foreach (var option in mcq.Options.Take(3))
                                    {
                                    <div class="option-preview @(mcq.CorrectAnswers.Contains(option) ? "correct" : "")">
                                        @if (mcq.CorrectAnswers.Contains(option))
                                        {
                                        <i class="fas fa-check-circle text-success me-2"></i>
                                        }
                                        @option
                                    </div>
                                    }
                                    @if (mcq.Options.Count > 3)
                                    {
                                    <div class="option-preview more">
                                        +@(mcq.Options.Count - 3) more options
                                    </div>
                                    }
                                </div>
                            </div>
                            break;
                            case TrueFalseQuestion tfq:
                            <div class="question-preview">
                                <div class="tf-preview">
                                                    <span class="tf-option @(tfq.CorrectAnswer ? "correct" : "")">
                                                        @if (tfq.CorrectAnswer)
                                                        {
                                                        <i class="fas fa-check-circle text-success me-1"></i>
                                                        }
                                                        True
                                                    </span>
                                    <span class="tf-option @(!tfq.CorrectAnswer ? "correct" : "")">
                                                        @if (!tfq.CorrectAnswer)
                                        {
                                        <i class="fas fa-check-circle text-success me-1"></i>
                                        }
                                        False
                                                    </span>
                                </div>
                            </div>
                            break;
                            case ShortAnswerQuestion saq:
                            <div class="question-preview">
                                <div class="answer-preview">
                                    <strong>Expected Answer:</strong> @saq.ExpectedAnswer
                                    @if (saq.CaseSensitive)
                                    {
                                    <span class="case-sensitive">(Case Sensitive)</span>
                                    }
                                </div>
                            </div>
                            break;
                            case DragDropQuestion ddq:
                            <div class="question-preview">
                                <div class="dragdrop-preview">
                                    <div class="preview-info">
                                        <i class="fas fa-hand-rock me-2"></i>
                                        @ddq.DraggableItems.Count draggable items, @ddq.DropZones.Count drop zones
                                        @if (ddq.OrderMatters)
                                        {
                                            <span class="badge badge-info ms-2">Order Matters</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            break;
                            case ImageBasedQuestion ibq:
                            <div class="question-preview">
                                <div class="image-preview">
                                    <div class="preview-info">
                                        <i class="fas fa-image me-2"></i>
                                        @ibq.QuestionType.ToString() question with @ibq.Hotspots.Count hotspots
                                        @if (!string.IsNullOrEmpty(ibq.ImageUrl))
                                        {
                                            <div class="image-thumbnail mt-2">
                                                <img src="@ibq.ImageUrl" alt="Question Image" style="max-width: 150px; max-height: 100px; border-radius: 4px;">
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            break;
                            }
                        </div>

                        <div class="question-actions">
                            <div class="action-buttons">
                                <a asp-action="QuestionAnalytics" asp-route-questionId="@question.Id" asp-route-testId="@Model.Id" class="btn btn-sm btn-outline-info" title="View Analytics">
                                    <i class="fas fa-chart-line"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-warning" title="Edit Question" onclick="openEditQuestionModal('@question.Id')">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger" title="Delete Question" onclick="openDeleteQuestionModal('@question.Id')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    }
                </div>
            </div>
            }
            else
            {
            <!-- Empty Questions State -->
            <div class="empty-questions-state" id="emptyQuestionsState">
                <div class="empty-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <h3 class="empty-title">No Questions Yet</h3>
                <p class="empty-description">
                    Get started by adding your first question. Choose from multiple question types to create engaging tests.
                </p>

                <div class="question-types-grid">
                    <button class="question-type-card" onclick="openCreateQuestionModal('MultipleChoice', '@Model.Id')">
                        <div class="question-type-icon multiple-choice">
                            <i class="fas fa-list-ul"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">Multiple Choice</div>
                            <div class="question-type-desc">Single or multiple selections</div>
                        </div>
                    </button>

                    <button class="question-type-card" onclick="openCreateQuestionModal('TrueFalse', '@Model.Id')">
                        <div class="question-type-icon true-false">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">True/False</div>
                            <div class="question-type-desc">Binary choice questions</div>
                        </div>
                    </button>

                    <button class="question-type-card" onclick="openCreateQuestionModal('ShortAnswer', '@Model.Id')">
                        <div class="question-type-icon short-answer">
                            <i class="fas fa-pen"></i>
                        </div>
                        <div class="question-type-content">
                            <div class="question-type-title">Short Answer</div>
                            <div class="question-type-desc">Text-based responses</div>
                        </div>
                    </button>
                </div>
            </div>
            }
        </div>

        <!-- Invites Tab -->
        <div class="tab-content" id="invites">
            <div class="invites-section">
                <h3 class="subsection-title">Send Test Invitations</h3>

                <div id="inviteAlerts">
                    @if(Model.Questions.Count == 0)
                    {
                    <div class="alert alert-warning border-0">
                        <div class="alert-content">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <div>
                                <strong>Questions Required</strong>
                                <p class="mb-0 mt-1">You need to add at least one question before sending invites to students.</p>
                            </div>
                        </div>
                    </div>
                    }
                    else if(Model.IsLocked)
                    {
                    <div class="alert alert-warning border-0">
                        <div class="alert-content">
                            <i class="fas fa-lock me-2"></i>
                            <div>
                                <strong>Test Locked</strong>
                                <p class="mb-0 mt-1">This test is currently locked. Unlock it to send invitations to students.</p>
                            </div>
                        </div>
                    </div>
                    }
                </div>

                <div id="inviteFormContainer" style="@(Model.Questions.Count == 0 || Model.IsLocked ? "display: none;" : "")">
                    <!-- Email Input Form -->
                    <div class="invite-form">
                        <div class="form-section">
                            <label class="form-label">Number of Students</label>
                            <div class="input-group">
                                <input type="number" id="emailCount" class="form-control" min="1" max="50" placeholder="Enter number of students">
                                <button type="button" class="btn btn-outline-primary" onclick="generateEmailFields()">
                                    <i class="fas fa-plus me-2"></i>Generate Fields
                                </button>
                            </div>
                            <div class="form-text">Enter how many email fields you need (max 50)</div>
                        </div>

                        <!-- Dynamic Email Fields -->
                        <div id="emailFieldsContainer" class="email-fields-container" style="display: none;">
                            <div class="section-header">
                                <h4 class="subsection-title">Student Email Addresses</h4>
                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="addSingleField()">
                                    <i class="fas fa-plus me-1"></i>Add Field
                                </button>
                            </div>

                            <div id="emailFields" class="email-fields"></div>

                            <div class="invite-actions">
                                <button type="button" class="btn btn-success btn-lg" onclick="sendInvites('@Model.Id')">
                                    <i class="fas fa-paper-plane me-2"></i>Send Invitations
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Modals -->

<!-- Edit Test Modal -->
<div class="modal fade" id="editTestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header gradient-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>
                    Edit Test Settings
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editTestForm">
                    <input type="hidden" id="editTestId" />

                    <div class="form-floating mb-3">
                        <input type="text" class="form-control" id="editTestName" placeholder="Test Name" required>
                        <label for="editTestName">Test Name</label>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="form-floating mb-3">
                        <textarea class="form-control" id="editTestDescription" placeholder="Description" style="height: 100px"></textarea>
                        <label for="editTestDescription">Description</label>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <input type="number" class="form-control" id="editTimeLimit" min="1" max="300" placeholder="Time Limit" required>
                                <label for="editTimeLimit">Time Limit (minutes)</label>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating mb-3">
                                <input type="number" class="form-control" id="editMaxAttempts" min="1" max="10" placeholder="Max Attempts" required>
                                <label for="editMaxAttempts">Max Attempts</label>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <div class="settings-card mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="editRandomizeQuestions">
                            <label class="form-check-label" for="editRandomizeQuestions">
                                <i class="fas fa-random me-2"></i>
                                Randomize Question Order
                            </label>
                        </div>
                    </div>

                    <div class="settings-card">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="editIsLocked">
                            <label class="form-check-label" for="editIsLocked">
                                <i class="fas fa-lock me-2"></i>
                                Lock Test
                            </label>
                        </div>
                    </div>

                    <!-- Test Scheduling Section -->
                    <div class="settings-card mb-3">
                        <h6 class="card-subtitle mb-3">
                            <i class="fas fa-calendar-alt me-2"></i>Test Scheduling
                        </h6>
                        
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="editIsScheduled" onchange="toggleSchedulingFields()">
                            <label class="form-check-label" for="editIsScheduled">
                                <i class="fas fa-clock me-2"></i>
                                Enable Test Scheduling
                            </label>
                        </div>

                        <div id="schedulingFields" style="display: none;">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input type="datetime-local" class="form-control" id="editScheduledStartDate">
                                        <label for="editScheduledStartDate">Start Date & Time</label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating">
                                        <input type="datetime-local" class="form-control" id="editScheduledEndDate">
                                        <label for="editScheduledEndDate">End Date & Time</label>
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="editAutoPublish">
                                        <label class="form-check-label" for="editAutoPublish">
                                            <i class="fas fa-play me-2"></i>
                                            Auto-publish at start time
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="editAutoClose">
                                        <label class="form-check-label" for="editAutoClose">
                                            <i class="fas fa-stop me-2"></i>
                                            Auto-close at end time
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="alert alert-info mt-3">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Scheduling Info:</strong> When enabled, the test will automatically publish/close at the specified times. 
                                Students can only access the test during the scheduled time window.
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" onclick="saveTestChanges()">
                    <i class="fas fa-save me-2"></i>Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Test Modal -->
<div class="modal fade" id="deleteTestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                    Delete Test
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            @* <div class="modal-body"> *@
            @*     <p class="mb-3">Are you sure you want to delete this test?</p> *@
            @*     <div class="alert alert-danger border-0"> *@
            @*         <i class="fas fa-info-circle me-2"></i> *@
            @*         This action cannot be undone and will permanently delete all questions and student attempts. *@
            @*     </div> *@
            @* </div> *@
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteTest()">
                    <i class="fas fa-trash me-2"></i>Delete Test
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Clone Test Modal -->
<div class="modal fade" id="cloneTestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header gradient-header-info">
                <h5 class="modal-title">
                    <i class="fas fa-clone me-2"></i>
                    Clone Test
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Create a copy of this test with all its questions?</p>
                <div class="alert alert-info border-0">
                    <i class="fas fa-info-circle me-2"></i>
                    The cloned test will have the same questions but will be unlocked and have no student attempts.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-info" onclick="confirmCloneTest()">
                    <i class="fas fa-clone me-2"></i>Clone Test
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Question Modal -->
<div class="modal fade" id="deleteQuestionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title">Delete Question</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this question?</p>
                <p class="text-muted small">This action cannot be undone.</p>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDeleteQuestion()">
                    <i class="fas fa-trash me-2"></i>Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Test Statistics Modal -->
<div class="modal fade" id="testStatsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header gradient-header-info">
                <h5 class="modal-title">
                    <i class="fas fa-chart-bar me-2"></i>
                    Test Statistics
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="statsContent">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading statistics...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Share Test Modal -->
<div class="modal fade" id="shareTestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header gradient-header-success">
                <h5 class="modal-title">
                    <i class="fas fa-share-alt me-2"></i>Share Test
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="shareTestForm" onsubmit="return false;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="shareTestId" name="TestId" value="@Model.Id">
                    <div class="mb-3">
                        <label for="shareEmail" class="form-label">
                            <i class="fas fa-envelope me-2"></i>Email Address
                        </label>
                        <input type="email" class="form-control" id="shareEmail" name="Email" required 
                               placeholder="Enter the recipient's email address">
                        <div class="invalid-feedback"></div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="sharePermission" class="form-label">
                            <i class="fas fa-user-shield me-2"></i>Permission Level
                        </label>
                        <select class="form-select" id="sharePermission" name="Permission" required>
                            <option value="">Select permission level</option>
                            <option value="0">View Only - Can view test content</option>
                            <option value="1">Edit - Can modify test content</option>
                            <option value="2">Copy - Can duplicate the test</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="shareMessage" class="form-label">
                            <i class="fas fa-comment me-2"></i>Message (Optional)
                        </label>
                        <textarea class="form-control" id="shareMessage" name="Message" rows="3" 
                                  placeholder="Add a personal message for the recipient"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="shareExpiresAt" class="form-label">
                            <i class="fas fa-calendar-alt me-2"></i>Expiration Date (Optional)
                        </label>
                        <input type="datetime-local" class="form-control" id="shareExpiresAt" name="ExpiresAt">
                        <div class="form-text">Leave empty for permanent access</div>
                    </div>
                    
                    <input type="hidden" id="shareTestId" name="TestId" value="@Model.Id">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-success" onclick="submitShareTest()">
                    <i class="fas fa-share-alt me-2"></i>Share Test
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create Question Modal -->
<div class="modal fade" id="createQuestionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header gradient-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus-circle me-2"></i>
                    <span id="createQuestionTitle">Create Question</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="questionFormContainer">
                    <!-- Question forms will be loaded here dynamically -->
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading question form...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-primary" id="saveQuestionBtn" onclick="saveQuestion()">
                    <i class="fas fa-check-circle me-2"></i>Create Question
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay" style="display: none;">
    <div class="loading-content">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Processing request...</p>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer">
</div>

<style>
    /* Enhanced Test Details Styles */
    .test-details-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
        animation: fadeIn 0.6s ease-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* Header Section */
    .test-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 2rem;
        color: white;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
        position: relative;
        overflow: hidden;
    }

    .test-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, rgba(255,255,255,0.1) 25%, transparent 25%, transparent 75%, rgba(255,255,255,0.1) 75%),
        linear-gradient(45deg, rgba(255,255,255,0.1) 25%, transparent 25%, transparent 75%, rgba(255,255,255,0.1) 75%);
        background-size: 20px 20px;
        background-position: 0 0, 10px 10px;
        opacity: 0.3;
    }

    .header-content {
        position: relative;
        z-index: 1;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 2rem;
    }

    .breadcrumb-nav {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }

    .breadcrumb-link {
        color: rgba(255,255,255,0.9);
        text-decoration: none;
        display: flex;
        align-items: center;
        transition: all 0.2s ease;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        background: rgba(255,255,255,0.1);
        backdrop-filter: blur(10px);
    }

    .breadcrumb-link:hover {
        color: white;
        background: rgba(255,255,255,0.2);
        transform: translateY(-1px);
    }

    .breadcrumb-separator {
        margin: 0 0.75rem;
        color: rgba(255,255,255,0.6);
    }

    .breadcrumb-current {
        color: rgba(255,255,255,0.8);
    }

    .test-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .status-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-size: 0.875rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }

    .status-active {
        background: rgba(34, 197, 94, 0.2);
        border: 1px solid rgba(34, 197, 94, 0.3);
        color: #22c55e;
    }

    .status-locked {
        background: rgba(239, 68, 68, 0.2);
        border: 1px solid rgba(239, 68, 68, 0.3);
        color: #ef4444;
    }

    .test-description {
        color: rgba(255,255,255,0.9);
        font-size: 1.125rem;
        line-height: 1.6;
        margin: 0;
    }

    .action-buttons {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
    }

    .action-buttons .btn {
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
        transition: all 0.3s ease;
    }

    .action-buttons .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    /* Enhanced Statistics Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 16px;
        padding: 1.5rem;
        border: 1px solid #e5e7eb;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        position: relative;
        overflow: hidden;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #3b82f6, #1d4ed8);
        transform: scaleX(0);
        transition: transform 0.3s ease;
    }

    .stat-card:hover::before {
        transform: scaleX(1);
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 28px rgba(0, 0, 0, 0.12);
    }

    .stat-icon {
        width: 56px;
        height: 56px;
        border-radius: 16px;
        background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #2563eb;
        font-size: 1.5rem;
        transition: all 0.3s ease;
    }

    .stat-card:hover .stat-icon {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        color: white;
        transform: scale(1.1);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        line-height: 1;
        transition: color 0.3s ease;
    }

    .stat-card:hover .stat-number {
        color: #2563eb;
    }

    .stat-label {
        color: #6b7280;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        font-weight: 500;
    }

    /* Enhanced Configuration Section */
    .config-section {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 2rem;
        border: 1px solid #e5e7eb;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }

    .section-title {
        font-size: 1.375rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .config-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
    }

    .config-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1.5rem;
        background: linear-gradient(135deg, #f8fafc, #f1f5f9);
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        transition: all 0.3s ease;
    }

    .config-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.08);
        border-color: #3b82f6;
    }

    .config-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: linear-gradient(135deg, #dbeafe, #bfdbfe);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #2563eb;
        font-size: 1.25rem;
        transition: all 0.3s ease;
    }

    .config-item:hover .config-icon {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        color: white;
        transform: scale(1.1);
    }

    .config-title {
        font-weight: 600;
        color: #374151;
        font-size: 0.875rem;
        margin-bottom: 0.25rem;
    }

    .config-value {
        font-weight: 700;
        color: #1f2937;
        font-size: 1.125rem;
    }

    /* Enhanced Quick Actions */
    .quick-actions {
        margin-bottom: 2rem;
    }

    .actions-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 1rem;
    }

    .action-card {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 16px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        text-decoration: none;
        color: inherit;
        transition: all 0.3s ease;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        position: relative;
        overflow: hidden;
    }

    .action-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent, rgba(59,130,246,0.02));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .action-card:hover::before {
        opacity: 1;
    }

    .action-button {
        border: none;
        width: 100%;
        text-align: left;
        background: white;
    }

    .action-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 28px rgba(0, 0, 0, 0.12);
        border-color: #3b82f6;
        text-decoration: none;
        color: inherit;
    }

    .action-icon {
        width: 56px;
        height: 56px;
        border-radius: 14px;
        background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #2563eb;
        font-size: 1.375rem;
        flex-shrink: 0;
        transition: all 0.3s ease;
    }

    .action-card:hover .action-icon {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        color: white;
        transform: scale(1.1);
    }

    .action-content {
        flex: 1;
    }

    .action-title {
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 0.25rem;
        font-size: 1.125rem;
    }

    .action-subtitle {
        color: #6b7280;
        font-size: 0.875rem;
        line-height: 1.4;
    }

    .action-arrow {
        color: #d1d5db;
        transition: all 0.3s ease;
        font-size: 1.25rem;
    }

    .action-card:hover .action-arrow {
        color: #2563eb;
        transform: translateX(6px);
    }

    /* Enhanced Content Tabs */
    .content-tabs {
        background: white;
        border-radius: 16px;
        border: 1px solid #e5e7eb;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }

    .tab-nav {
        display: flex;
        background: linear-gradient(135deg, #f8fafc, #f1f5f9);
        border-bottom: 1px solid #e5e7eb;
    }

    .tab-btn {
        padding: 1.25rem 1.75rem;
        border: none;
        background: transparent;
        color: #6b7280;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        flex: 1;
        justify-content: center;
    }

    .tab-btn::before {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        width: 0;
        height: 3px;
        background: linear-gradient(90deg, #3b82f6, #1d4ed8);
        border-radius: 3px 3px 0 0;
        transition: all 0.3s ease;
        transform: translateX(-50%);
    }

    .tab-btn:hover {
        color: #2563eb;
        background: rgba(59, 130, 246, 0.05);
    }

    .tab-btn.active {
        color: #2563eb;
        background: white;
    }

    .tab-btn.active::before {
        width: 100%;
    }

    .tab-count {
        background: linear-gradient(135deg, #e5e7eb, #d1d5db);
        color: #374151;
        padding: 0.25rem 0.75rem;
        border-radius: 15px;
        font-size: 0.75rem;
        font-weight: 700;
        transition: all 0.3s ease;
    }

    .tab-btn.active .tab-count {
        background: linear-gradient(135deg, #dbeafe, #bfdbfe);
        color: #1d4ed8;
    }

    .tab-content {
        display: none;
        padding: 2rem;
        animation: fadeInUp 0.4s ease-out;
    }

    .tab-content.active {
        display: block;
    }

    @@keyframes fadeInUp {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* Enhanced Questions Section */
    .add-questions-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
        border-radius: 16px;
        border: 1px solid #bae6fd;
    }

    .subsection-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 1rem;
    }

    .question-types-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 1rem;
    }

    .question-type-card {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 16px;
        padding: 1.5rem;
        text-decoration: none;
        color: inherit;
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 1rem;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        position: relative;
        overflow: hidden;
    }

    .question-type-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent, rgba(59,130,246,0.03));
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .question-type-card:hover::before {
        opacity: 1;
    }

    .question-type-card:hover {
        border-color: #3b82f6;
        background: white;
        transform: translateY(-6px);
        box-shadow: 0 16px 32px rgba(0, 0, 0, 0.12);
        text-decoration: none;
        color: inherit;
    }

    .question-type-icon {
        width: 72px;
        height: 72px;
        border-radius: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        color: white;
        transition: all 0.3s ease;
    }

    .question-type-card:hover .question-type-icon {
        transform: scale(1.1);
    }

    .question-type-icon.multiple-choice {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    }

    .question-type-icon.true-false {
        background: linear-gradient(135deg, #10b981, #059669);
    }

    .question-type-icon.short-answer {
        background: linear-gradient(135deg, #0ea5e9, #0284c7);
    }

    .question-type-title {
        font-weight: 700;
        color: #1f2937;
        font-size: 1.125rem;
    }

    .question-type-desc {
        font-size: 0.875rem;
        color: #6b7280;
        line-height: 1.4;
    }

    /* Enhanced Questions List */
    .questions-section .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f3f4f6;
    }

    .section-meta .total-points {
        color: #374151;
        font-size: 1rem;
        font-weight: 600;
        padding: 0.5rem 1rem;
        background: linear-gradient(135deg, #fef3c7, #fde68a);
        border-radius: 20px;
        border: 1px solid #f59e0b;
    }

    /* Question Filters */
    .question-filters {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #f9fafb;
        border-radius: 12px;
        margin-bottom: 1.5rem;
        border: 1px solid #e5e7eb;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .filter-group {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .filter-label {
        font-weight: 600;
        color: #374151;
        font-size: 0.875rem;
        margin: 0;
    }

    .filter-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 0.5rem 1rem;
        border: 2px solid #e5e7eb;
        background: white;
        color: #6b7280;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
    }

    .filter-btn:hover {
        border-color: #3b82f6;
        color: #3b82f6;
        background: #eff6ff;
    }

    .filter-btn.active {
        border-color: #3b82f6;
        background: #3b82f6;
        color: white;
    }

    .filter-select {
        padding: 0.5rem 1rem;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        background: white;
        color: #374151;
        font-weight: 500;
        cursor: pointer;
        transition: border-color 0.2s ease;
        min-width: 150px;
    }

    .filter-select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .questions-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .question-item {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 16px;
        padding: 1.5rem;
        display: flex;
        gap: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        position: relative;
        overflow: hidden;
    }

    .question-item::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 4px;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        transform: scaleY(0);
        transition: transform 0.3s ease;
    }

    .question-item:hover::before {
        transform: scaleY(1);
    }

    .question-item:hover {
        background: #fafbff;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        transform: translateY(-2px);
    }

    .question-number {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #3b82f6, #1d4ed8);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 0.875rem;
        flex-shrink: 0;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .question-content {
        flex: 1;
    }

    .question-header {
        margin-bottom: 0.75rem;
    }

    .question-meta {
        display: flex;
        gap: 0.75rem;
        flex-wrap: wrap;
    }

    .question-type-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.375rem 0.875rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .question-type-badge.multiple-choice {
        background: rgba(59, 130, 246, 0.1);
        color: #1d4ed8;
        border: 1px solid rgba(59, 130, 246, 0.2);
    }

    .question-type-badge.true-false {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .question-type-badge.short-answer {
        background: rgba(14, 165, 233, 0.1);
        color: #0284c7;
        border: 1px solid rgba(14, 165, 233, 0.2);
    }

    .question-points {
        display: inline-flex;
        align-items: center;
        color: #f59e0b;
        font-size: 0.75rem;
        font-weight: 700;
        padding: 0.375rem 0.875rem;
        background: rgba(245, 158, 11, 0.1);
        border-radius: 20px;
        border: 1px solid rgba(245, 158, 11, 0.2);
    }

    .question-text {
        font-weight: 500;
        color: #1f2937;
        margin-bottom: 1rem;
        line-height: 1.6;
        font-size: 1.125rem;
    }

    .question-preview {
        margin-top: 0.75rem;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .options-preview {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .option-preview {
        padding: 0.75rem;
        background: white;
        border-radius: 8px;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        border: 1px solid #e5e7eb;
        transition: all 0.2s ease;
    }

    .option-preview.correct {
        background: rgba(34, 197, 94, 0.05);
        border-color: #22c55e;
    }

    .option-preview.more {
        color: #6b7280;
        font-style: italic;
        border-style: dashed;
    }

    .tf-preview {
        display: flex;
        gap: 1rem;
    }

    .tf-option {
        padding: 0.75rem 1rem;
        background: white;
        border-radius: 8px;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        border: 1px solid #e5e7eb;
        transition: all 0.2s ease;
    }

    .tf-option.correct {
        background: rgba(34, 197, 94, 0.05);
        border-color: #22c55e;
    }

    .answer-preview {
        padding: 1rem;
        background: white;
        border-radius: 8px;
        font-size: 0.875rem;
        border: 1px solid #e5e7eb;
    }

    .case-sensitive {
        color: #f59e0b;
        font-size: 0.75rem;
        margin-left: 0.5rem;
        padding: 0.25rem 0.5rem;
        background: rgba(245, 158, 11, 0.1);
        border-radius: 12px;
    }

    .question-actions {
        display: flex;
        align-items: center;
    }

    .question-actions .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .question-actions .btn {
        transition: all 0.3s ease;
    }

    .question-actions .btn:hover {
        transform: scale(1.1);
    }

    /* Enhanced Empty Questions State */
    .empty-questions-state {
        text-align: center;
        padding: 4rem 2rem;
        background: linear-gradient(135deg, #f8fafc, #f1f5f9);
        border-radius: 16px;
        border: 2px dashed #d1d5db;
    }

    .empty-icon {
        font-size: 5rem;
        color: #d1d5db;
        margin-bottom: 1.5rem;
    }

    .empty-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 1rem;
    }

    .empty-description {
        color: #6b7280;
        margin-bottom: 2rem;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
        font-size: 1.125rem;
        line-height: 1.6;
    }

    /* Enhanced Invites Section */
    .invites-section {
        max-width: 800px;
    }

    .alert {
        border-radius: 12px;
        border: none;
        margin-bottom: 2rem;
        padding: 1.25rem 1.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }

    .alert-content {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
    }

    .alert-warning {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(251, 191, 36, 0.05));
        color: #92400e;
        border: 1px solid rgba(245, 158, 11, 0.2);
    }

    .invite-form {
        max-width: 600px;
    }

    .form-section {
        margin-bottom: 2rem;
    }

    .form-label {
        font-weight: 700;
        color: #374151;
        margin-bottom: 0.75rem;
        display: block;
        font-size: 1.125rem;
    }

    .input-group {
        display: flex;
        gap: 0.75rem;
        align-items: stretch;
    }

    .input-group .form-control {
        flex: 1;
        border-radius: 12px;
        border: 2px solid #e5e7eb;
        padding: 0.875rem 1rem;
        transition: all 0.3s ease;
    }

    .input-group .form-control:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.15);
    }

    .input-group .btn {
        border-radius: 12px;
        padding: 0.875rem 1.5rem;
        font-weight: 600;
    }

    .form-text {
        font-size: 0.875rem;
        color: #6b7280;
        margin-top: 0.75rem;
        line-height: 1.4;
    }

    .email-fields-container {
        margin-top: 2rem;
        padding: 1.5rem;
        background: #f8fafc;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
    }

    .email-fields-container .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .email-fields {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 2rem;
    }

    .email-field-group {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .email-field-group .form-control {
        flex: 1;
        border-radius: 8px;
        border: 1px solid #d1d5db;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }

    .email-field-group .form-control:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.15);
    }

    .invite-actions {
        display: flex;
        justify-content: center;
        padding-top: 1.5rem;
        border-top: 1px solid #e5e7eb;
    }

    /* Enhanced Modal Styles */
    .modal-content {
        border: none;
        border-radius: 16px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        overflow: hidden;
    }

    .modal-header {
        padding: 1.5rem 2rem;
        border-bottom: 1px solid #e5e7eb;
    }

    .gradient-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom: none;
    }

    .gradient-header-info {
        background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
        color: white;
        border-bottom: none;
    }

    .gradient-header-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        border-bottom: none;
    }

    .modal-title {
        font-weight: 700;
        font-size: 1.25rem;
        margin: 0;
    }

    .modal-body {
        padding: 2rem;
        max-height: 70vh;
        overflow-y: auto;
    }

    .modal-footer {
        padding: 1.5rem 2rem;
        border-top: 1px solid #e5e7eb;
        background: #f8fafc;
    }

    /* Question Form Styles */
    .question-form {
        max-width: 100%;
    }

    .question-form .form-floating {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .question-form .form-floating > .form-control {
        border-radius: 12px;
        border: 2px solid #e5e7eb;
        padding: 1rem 0.75rem 0.25rem 0.75rem;
        height: calc(3.5rem + 2px);
        line-height: 1.25;
        transition: all 0.3s ease;
    }

    .question-form .form-floating > .form-control:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.15);
    }

    .question-form .form-floating > label {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        padding: 1rem 0.75rem;
        pointer-events: none;
        border: 1px solid transparent;
        transform-origin: 0 0;
        transition: all 0.3s ease;
        color: #6b7280;
        font-weight: 500;
    }

    .question-form .form-floating > textarea {
        min-height: 120px;
        resize: vertical;
    }

    .question-form .settings-card {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1rem 1.25rem;
        margin-bottom: 1.5rem;
    }

    .question-form .form-check-input {
        width: 2.5rem;
        height: 1.25rem;
        border-radius: 2rem;
        background-color: #e5e7eb;
        border: none;
        transition: all 0.3s ease;
    }

    .question-form .form-check-input:checked {
        background-color: #3b82f6;
    }

    .question-form .form-check-label {
        font-weight: 600;
        color: #374151;
        margin-left: 0.75rem;
        display: flex;
        align-items: center;
    }

    /* Multiple Choice Form Styles */
    .options-container {
        background: #f8fafc;
        border: 2px dashed #d1d5db;
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
    }

    .options-container:hover {
        border-color: #3b82f6;
        background: #f0f9ff;
    }

    .options-container.has-options {
        border-style: solid;
        border-color: #e5e7eb;
        background: white;
    }

    .options-title {
        font-weight: 600;
        color: #374151;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .options-count {
        background: #e0e7ff;
        color: #3730a3;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 600;
    }

    .option-group {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        padding: 1.25rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        position: relative;
    }

    .option-group:hover {
        border-color: #3b82f6;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
        transform: translateY(-1px);
    }

    .option-group.correct-option {
        border-color: #10b981;
        background: #f0fdf4;
    }

    .option-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 0.75rem;
    }

    .option-number {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #e5e7eb, #d1d5db);
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        color: #374151;
        font-size: 0.875rem;
        flex-shrink: 0;
    }

    .option-group.correct-option .option-number {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
    }

    .option-label {
        font-weight: 600;
        color: #374151;
        margin: 0;
        flex: 1;
    }

    .option-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .correct-check {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: #f9fafb;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        border: 1px solid #e5e7eb;
        transition: all 0.2s ease;
    }

    .correct-check.is-correct {
        background: #f0fdf4;
        border-color: #10b981;
        color: #059669;
    }

    .correct-check-label {
        font-size: 0.875rem;
        font-weight: 500;
        margin: 0;
        cursor: pointer;
    }

    .remove-option-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.125rem;
        padding: 0;
        border: none;
    }

    .add-option-section {
        text-align: center;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e5e7eb;
    }

    .add-option-btn {
        background: linear-gradient(135deg, #f0f9ff, #dbeafe);
        color: #1d4ed8;
        border: 2px dashed #93c5fd;
        border-radius: 12px;
        padding: 1rem 2rem;
        font-weight: 600;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
    }

    .add-option-btn:hover {
        background: #3b82f6;
        color: white;
        border-color: #3b82f6;
        border-style: solid;
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(59, 130, 246, 0.25);
    }

    /* True/False Form Styles */
    .answer-options {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .answer-option {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .answer-option:hover {
        border-color: #3b82f6;
        background: rgba(59, 130, 246, 0.05);
    }

    .answer-option.selected {
        border-color: #3b82f6;
        background: rgba(59, 130, 246, 0.1);
    }

    .answer-option input[type="radio"] {
        width: 20px;
        height: 20px;
        accent-color: #3b82f6;
    }

    .answer-option-icon {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }

    .true-icon {
        background-color: rgba(22, 163, 74, 0.2);
        color: #16a34a;
    }

    .false-icon {
        background-color: rgba(220, 38, 38, 0.2);
        color: #dc2626;
    }

    /* Short Answer Form Styles */
    .answer-preview {
        background: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1rem;
        margin-top: 1rem;
    }

    .answer-preview-title {
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .answer-preview-text {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 0.75rem;
        font-family: monospace;
        color: #3b82f6;
        min-height: 50px;
        display: flex;
        align-items: center;
    }

    .case-sensitive-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 0.75rem;
        background-color: rgba(245, 158, 11, 0.1);
        color: #f59e0b;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-top: 0.5rem;
    }

    .case-insensitive-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 0.75rem;
        background-color: rgba(16, 185, 129, 0.1);
        color: #10b981;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-top: 0.5rem;
    }

    /* Loading Overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        backdrop-filter: blur(4px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        animation: fadeIn 0.3s ease-out;
    }

    .loading-content {
        background: white;
        padding: 2rem;
        border-radius: 16px;
        text-align: center;
        box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    /* Toast Styles */
    .toast {
        border: none;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.15);
        backdrop-filter: blur(10px);
    }

    .toast-success {
        background: linear-gradient(135deg, rgba(34, 197, 94, 0.9), rgba(16, 185, 129, 0.9));
        color: white;
    }

    .toast-error {
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.9), rgba(220, 38, 38, 0.9));
        color: white;
    }

    .toast-warning {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.9), rgba(217, 119, 6, 0.9));
        color: white;
    }

    .toast-info {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.9), rgba(37, 99, 235, 0.9));
        color: white;
    }

    /* Responsive Design */
    @@media (max-width: 1024px) {
        .header-content {
            flex-direction: column;
            align-items: stretch;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .config-grid {
            grid-template-columns: 1fr;
        }

        .actions-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 768px) {
        .test-header {
            padding: 1.5rem;
        }

        .test-title {
            font-size: 2rem;
            flex-direction: column;
            align-items: flex-start;
            gap: 0.75rem;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .tab-nav {
            flex-direction: column;
        }

        .tab-btn {
            padding: 1rem;
            justify-content: flex-start;
        }

        .tab-content {
            padding: 1.5rem;
        }

        .question-types-grid {
            grid-template-columns: 1fr;
        }

        .question-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .question-number {
            align-self: flex-start;
        }

        .question-actions {
            align-self: stretch;
            justify-content: flex-end;
            margin-top: 1rem;
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .modal-dialog {
            margin: 1rem;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .option-controls {
            flex-direction: column;
            gap: 0.75rem;
            align-items: stretch;
        }

        .option-header {
            flex-wrap: wrap;
        }
    }

    @@media (max-width: 576px) {
        .test-header {
            padding: 1rem;
        }

        .breadcrumb-nav {
            font-size: 0.75rem;
        }

        .action-buttons {
            flex-direction: column;
            width: 100%;
        }

        .question-meta {
            flex-direction: column;
            gap: 0.5rem;
        }

        .tf-preview {
            flex-direction: column;
            gap: 0.5rem;
        }

        .input-group {
            flex-direction: column;
        }

        .email-field-group {
            flex-direction: column;
            gap: 0.5rem;
        }

        .answer-option {
            flex-direction: column;
            text-align: center;
            gap: 0.75rem;
        }
    }

    /* Animation Classes */
    .pulse {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .shake {
        animation: shake 0.6s ease-in-out;
    }

    @@keyframes shake {
        0%, 100% { transform: translateX(0); }
        10%, 30%, 50%, 70%, 90% { transform: translateX(-3px); }
        20%, 40%, 60%, 80% { transform: translateX(3px); }
    }

    .bounce-in {
        animation: bounceIn 0.6s ease-out;
    }

    @@keyframes bounceIn {
        0% { opacity: 0; transform: scale(0.3); }
        50% { opacity: 1; transform: scale(1.05); }
        70% { transform: scale(0.9); }
        100% { opacity: 1; transform: scale(1); }
    }

    .slide-up {
        animation: slideUp 0.4s ease-out;
    }

    @@keyframes slideUp {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>





@section Scripts
{
    <script>
        // Global variables
        let currentTestId = '@Model.Id';
        let currentQuestionType = '';
        let currentQuestionId = '';

        // Toast notification system
        function showToast(message, type = 'info', duration = 5000) {
            const toastContainer = document.getElementById('toastContainer');
            const toastId = 'toast-' + Date.now();

            const toastHtml = `
   <div id="${toastId}" class="toast toast-${type} show" role="alert" aria-live="assertive" aria-atomic="true">
       <div class="toast-header">
           <i class="fas ${getToastIcon(type)} me-2"></i>
           <strong class="me-auto">${getToastTitle(type)}</strong>
           <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
       </div>
       <div class="toast-body">
           ${message}
       </div>
   </div>
`;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);

            // Auto-hide toast
            setTimeout(() => {
                const toast = document.getElementById(toastId);
                if (toast) {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }
            }, duration);
        }

        function getToastIcon(type) {
            const icons = {
                success: 'fa-check-circle',
                error: 'fa-exclamation-circle',
                warning: 'fa-exclamation-triangle',
                info: 'fa-info-circle'
            };
            return icons[type] || icons.info;
        }

        function getToastTitle(type) {
            const titles = {
                success: 'Success',
                error: 'Error',
                warning: 'Warning',
                info: 'Information'
            };
            return titles[type] || titles.info;
        }

        // Loading overlay functions
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Tab functionality
        document.addEventListener('DOMContentLoaded', function() {
            const tabButtons = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');

            tabButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;

                    // Remove active class from all tabs and contents
                    tabButtons.forEach(b => b.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));

                    // Add active class to clicked tab and corresponding content
                    this.classList.add('active');
                    document.getElementById(targetTab).classList.add('active');
                });
            });
        });

        // Test management functions
        async function toggleTestLock(testId) {
            showLoading();

            try {
                const response = await fetch('/Test/ToggleLockAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Id: testId })
                });

                const result = await response.json();

                if (result.success) {
                    // Update button
                    const button = document.getElementById('lockTestButton');
                    const icon = document.getElementById('lockIcon');
                    const text = document.getElementById('lockButtonText');

                    if (result.isLocked) {
                        button.className = 'btn btn-success';
                        icon.className = 'fas fa-lock-open me-2';
                        text.textContent = 'Unlock Test';
                    } else {
                        button.className = 'btn btn-warning';
                        icon.className = 'fas fa-lock me-2';
                        text.textContent = 'Lock Test';
                    }

                    // Update status indicator
                    const statusIndicator = document.getElementById('statusIndicator');
                    const statusIcon = document.getElementById('statusIcon');
                    const statusText = document.getElementById('statusText');

                    if (result.isLocked) {
                        statusIndicator.className = 'status-indicator status-locked';
                        statusIcon.className = 'fas fa-lock';
                        statusText.textContent = 'Locked';
                    } else {
                        statusIndicator.className = 'status-indicator status-active';
                        statusIcon.className = 'fas fa-unlock';
                        statusText.textContent = 'Active';
                    }

                    // Update invite form visibility
                    updateInviteFormVisibility(result.isLocked);

                    showToast(result.message, 'success');
                } else {
                    showToast(result.message || 'Error updating test status', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                hideLoading();
            }
}

        function updateInviteFormVisibility(isLocked) {
            const questionsCount = parseInt(document.getElementById('questionsCount').textContent);
            const inviteAlerts = document.getElementById('inviteAlerts');
            const inviteFormContainer = document.getElementById('inviteFormContainer');

            // Clear existing alerts
            inviteAlerts.innerHTML = '';

            if (questionsCount === 0) {
                inviteAlerts.innerHTML = `
       <div class="alert alert-warning border-0">
           <div class="alert-content">
               <i class="fas fa-exclamation-triangle me-2"></i>
               <div>
                   <strong>Questions Required</strong>
                   <p class="mb-0 mt-1">You need to add at least one question before sending invites to students.</p>
               </div>
           </div>
       </div>
   `;
                inviteFormContainer.style.display = 'none';
            } else if (isLocked) {
                inviteAlerts.innerHTML = `
       <div class="alert alert-warning border-0">
           <div class="alert-content">
               <i class="fas fa-lock me-2"></i>
               <div>
                   <strong>Test Locked</strong>
                   <p class="mb-0 mt-1">This test is currently locked. Unlock it to send invitations to students.</p>
               </div>
           </div>
       </div>
   `;
                inviteFormContainer.style.display = 'none';
            } else {
                inviteFormContainer.style.display = 'block';
            }
}

        // Modal functions
        async function openEditTestModal(testId) {
            showLoading();

            try {
                const response = await fetch(`/Test/GetTestDataAjax?id=${testId}`);
                const result = await response.json();

                if (result.success) {
                    const data = result.data;

                    // Populate form
                    document.getElementById('editTestId').value = data.id;
                    document.getElementById('editTestName').value = data.testName;
                    document.getElementById('editTestDescription').value = data.description || '';
                    document.getElementById('editTimeLimit').value = data.timeLimit;
                    document.getElementById('editMaxAttempts').value = data.maxAttempts;
                    document.getElementById('editRandomizeQuestions').checked = data.randomizeQuestions;
                    document.getElementById('editIsLocked').checked = data.isLocked;
                    
                    // Populate scheduling fields
                    document.getElementById('editIsScheduled').checked = data.isScheduled || false;
                    document.getElementById('editScheduledStartDate').value = data.scheduledStartDate ? 
                        new Date(data.scheduledStartDate).toISOString().slice(0, 16) : '';
                    document.getElementById('editScheduledEndDate').value = data.scheduledEndDate ? 
                        new Date(data.scheduledEndDate).toISOString().slice(0, 16) : '';
                    document.getElementById('editAutoPublish').checked = data.autoPublish || false;
                    document.getElementById('editAutoClose').checked = data.autoClose || false;
                    
                    // Show/hide scheduling fields based on checkbox state
                    toggleSchedulingFields();

                    // Show modal
                    const modal = new bootstrap.Modal(document.getElementById('editTestModal'));
                    modal.show();
                } else {
                    showToast(result.message || 'Error loading test data', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                hideLoading();
            }
}

        async function saveTestChanges() {
            const form = document.getElementById('editTestForm');
            const submitButton = event.target;
            const originalText = submitButton.innerHTML;

            // Validate form
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            // Show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Saving...';

            const data = {
                Id: document.getElementById('editTestId').value,
                TestName: document.getElementById('editTestName').value,
                Description: document.getElementById('editTestDescription').value,
                TimeLimit: parseInt(document.getElementById('editTimeLimit').value),
                MaxAttempts: parseInt(document.getElementById('editMaxAttempts').value),
                RandomizeQuestions: document.getElementById('editRandomizeQuestions').checked,
                IsLocked: document.getElementById('editIsLocked').checked,
                // Scheduling fields
                IsScheduled: document.getElementById('editIsScheduled').checked,
                ScheduledStartDate: document.getElementById('editScheduledStartDate').value || null,
                ScheduledEndDate: document.getElementById('editScheduledEndDate').value || null,
                AutoPublish: document.getElementById('editAutoPublish').checked,
                AutoClose: document.getElementById('editAutoClose').checked
            };

            try {
                const response = await fetch('/Test/EditAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    // Update page elements
                    updatePageAfterEdit(data);

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editTestModal'));
                    modal.hide();

                    showToast(result.message, 'success');
                } else {
                    showToast(result.message || 'Error saving changes', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
}

        function updatePageAfterEdit(data) {
            // Update title
            document.querySelector('.test-title').firstChild.textContent = data.TestName;

            // Update description (if exists)
            const descElement = document.querySelector('.test-description');
            if (descElement) {
                if (data.Description) {
                    descElement.textContent = data.Description;
                    descElement.style.display = 'block';
                } else {
                    descElement.style.display = 'none';
                }
            }

            // Update configuration values
            document.getElementById('questionOrder').textContent = data.RandomizeQuestions ? 'Randomized' : 'Sequential';
            document.getElementById('questionOrder').className = data.RandomizeQuestions ? 'config-value text-success' : 'config-value text-muted';
            document.getElementById('maxAttempts').textContent = data.MaxAttempts;
            document.getElementById('timeLimit').textContent = data.TimeLimit;
            document.getElementById('timeLimitDisplay').textContent = `${data.TimeLimit} minutes`;

            // Update status if changed
            if (data.IsLocked !== document.getElementById('statusIndicator').classList.contains('status-locked')) {
                const statusIndicator = document.getElementById('statusIndicator');
                const statusIcon = document.getElementById('statusIcon');
                const statusText = document.getElementById('statusText');
                const button = document.getElementById('lockTestButton');
                const icon = document.getElementById('lockIcon');
                const text = document.getElementById('lockButtonText');

                if (data.IsLocked) {
                    statusIndicator.className = 'status-indicator status-locked';
                    statusIcon.className = 'fas fa-lock';
                    statusText.textContent = 'Locked';
                    button.className = 'btn btn-success';
                    icon.className = 'fas fa-lock-open me-2';
                    text.textContent = 'Unlock Test';
                } else {
                    statusIndicator.className = 'status-indicator status-active';
                    statusIcon.className = 'fas fa-unlock';
                    statusText.textContent = 'Active';
                    button.className = 'btn btn-warning';
                    icon.className = 'fas fa-lock me-2';
                    text.textContent = 'Lock Test';
                }

                updateInviteFormVisibility(data.IsLocked);
            }
}

        function openDeleteTestModal(testId) {
            currentTestId = testId;
            const modal = new bootstrap.Modal(document.getElementById('deleteTestModal'));
            modal.show();
        }

        async function confirmDeleteTest() {
            const submitButton = event.target;
            const originalText = submitButton.innerHTML;

            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';

            try {
                const response = await fetch('/Test/DeleteAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Id: currentTestId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');

                    // Redirect to test list after a short delay
                    setTimeout(() => {
                        window.location.href = '/Test';
                    }, 1500);
                } else {
                    showToast(result.message || 'Error deleting test', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
}

        function openCloneTestModal(testId) {
            currentTestId = testId;
            const modal = new bootstrap.Modal(document.getElementById('cloneTestModal'));
            modal.show();
        }

        async function confirmCloneTest() {
            const submitButton = event.target;
            const originalText = submitButton.innerHTML;

            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Cloning...';

            try {
                const response = await fetch('/Test/CloneTestAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Id: currentTestId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('cloneTestModal'));
                    modal.hide();

                    // Optionally redirect to the new test
                    setTimeout(() => {
                        window.location.href = `/Test/Details/${result.newTestId}`;
                    }, 1500);
                } else {
                    showToast(result.message || 'Error cloning test', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
}

        async function openTestStatsModal(testId) {
            const modal = new bootstrap.Modal(document.getElementById('testStatsModal'));
            modal.show();

            try {
                const response = await fetch(`/Test/GetTestStatisticsAjax?id=${testId}`);
                const result = await response.json();

                if (result.success) {
                    const statsContent = document.getElementById('statsContent');
                    statsContent.innerHTML = generateStatsHTML(result.data);
                } else {
                    document.getElementById('statsContent').innerHTML = `
           <div class="alert alert-warning">
               <i class="fas fa-exclamation-triangle me-2"></i>
               ${result.message || 'Unable to load statistics'}
           </div>
       `;
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('statsContent').innerHTML = `
       <div class="alert alert-danger">
           <i class="fas fa-exclamation-circle me-2"></i>
           Error loading statistics
       </div>
   `;
            }
}

        function generateStatsHTML(stats) {
            if (!stats) {
                return `
       <div class="alert alert-info">
           <i class="fas fa-info-circle me-2"></i>
           No statistics available yet. Statistics will appear once students start taking the test.
       </div>
   `;
            }

            return `
   <div class="row">
       <div class="col-md-6">
           <div class="stat-card mb-3">
               <h6 class="text-muted mb-2">Average Score</h6>
               <h3 class="text-primary">${stats.averageScore?.toFixed(1) || '0.0'}%</h3>
           </div>
       </div>
       <div class="col-md-6">
           <div class="stat-card mb-3">
               <h6 class="text-muted mb-2">Completion Rate</h6>
               <h3 class="text-success">${stats.completionRate?.toFixed(1) || '0.0'}%</h3>
           </div>
       </div>
   </div>
   <div class="row">
       <div class="col-md-4">
           <div class="stat-card mb-3">
               <h6 class="text-muted mb-2">Total Attempts</h6>
               <h4>${stats.totalAttempts || 0}</h4>
           </div>
       </div>
       <div class="col-md-4">
           <div class="stat-card mb-3">
               <h6 class="text-muted mb-2">Completed</h6>
               <h4 class="text-success">${stats.completedAttempts || 0}</h4>
           </div>
       </div>
       <div class="col-md-4">
           <div class="stat-card mb-3">
               <h6 class="text-muted mb-2">In Progress</h6>
               <h4 class="text-warning">${stats.inProgressAttempts || 0}</h4>
           </div>
       </div>
   </div>
`;
        }

        // Share functionality
        function openShareTestModal(testId) {
            // Set the test ID in the hidden field
            document.getElementById('shareTestId').value = testId;
            
            // Clear the form
            document.getElementById('shareTestForm').reset();
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('shareTestModal'));
            modal.show();
        }

        async function submitShareTest() {
            const form = document.getElementById('shareTestForm');
            const formData = new FormData(form);
            
            // Clear previous validation errors
            document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
            document.querySelectorAll('.invalid-feedback').forEach(el => el.textContent = '');
            
            // Create the data object
            const shareData = {
                TestId: formData.get('TestId'),
                Email: formData.get('Email'),
                Permission: parseInt(formData.get('Permission')),
                Message: formData.get('Message'),
                ExpiresAt: formData.get('ExpiresAt') || null
            };
            
            try {
                const response = await fetch('/Test/ShareTest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(shareData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('shareTestModal'));
                    modal.hide();
                    
                    // Show success message
                    showToast('success', result.message, 'Test shared successfully!');
                    
                    // Optionally refresh the page or update the UI
                    // You could add a counter or list of shared users here
                    
                } else {
                    // Handle validation errors
                    if (result.errors) {
                        result.errors.forEach(error => {
                            const field = document.querySelector(`[name="${error.Field}"]`);
                            if (field) {
                                field.classList.add('is-invalid');
                                const feedback = field.parentElement.querySelector('.invalid-feedback');
                                if (feedback) {
                                    feedback.textContent = error.Message;
                                }
                            }
                        });
                    } else {
                        showToast('error', result.message || 'Failed to share test', 'Error');
                    }
                }
            } catch (error) {
                console.error('Error sharing test:', error);
                showToast('error', 'An unexpected error occurred while sharing the test', 'Error');
            }
        }

        // Test scheduling functionality
        function toggleSchedulingFields() {
            const checkbox = document.getElementById('editIsScheduled');
            const fieldsContainer = document.getElementById('schedulingFields');
            
            if (checkbox.checked) {
                fieldsContainer.style.display = 'block';
                // Set smart defaults if fields are empty
                const startInput = document.getElementById('editScheduledStartDate');
                const endInput = document.getElementById('editScheduledEndDate');
                
                if (!startInput.value) {
                    const now = new Date();
                    now.setHours(now.getHours() + 1);
                    startInput.value = now.toISOString().slice(0, 16);
                    
                    // Auto-enable auto-publish when scheduling
                    document.getElementById('editAutoPublish').checked = true;
                }
                
                if (!endInput.value && startInput.value) {
                    const endTime = new Date(startInput.value);
                    endTime.setHours(endTime.getHours() + 2);
                    endInput.value = endTime.toISOString().slice(0, 16);
                    
                    // Auto-enable auto-close when scheduling
                    document.getElementById('editAutoClose').checked = true;
                }
            } else {
                fieldsContainer.style.display = 'none';
                // Clear the fields when hiding
                document.getElementById('editScheduledStartDate').value = '';
                document.getElementById('editScheduledEndDate').value = '';
                document.getElementById('editAutoPublish').checked = false;
                document.getElementById('editAutoClose').checked = false;
            }
        }

        // Question management functions
        async function openCreateQuestionModal(questionType, testId) {
            // For complex question types, redirect to dedicated pages
            if (questionType === 'DragDrop') {
                window.location.href = `/Question/CreateDragDrop?testId=${testId}`;
                return;
            }
            
            if (questionType === 'ImageBased') {
                window.location.href = `/Question/CreateImageBased?testId=${testId}`;
                return;
            }
            
            // For simple question types, show modal
            currentQuestionType = questionType;
            currentTestId = testId;

            const modal = new bootstrap.Modal(document.getElementById('createQuestionModal'));
            const title = document.getElementById('createQuestionTitle');
            const formContainer = document.getElementById('questionFormContainer');

            const typeConfig = {
                'MultipleChoice': {
                    title: 'Create Multiple Choice Question',
                    endpoint: '/Question/GetMultipleChoiceFormDataAjax'
                },
                'TrueFalse': {
                    title: 'Create True/False Question',
                    endpoint: '/Question/GetTrueFalseFormDataAjax'
                },
                'ShortAnswer': {
                    title: 'Create Short Answer Question',
                    endpoint: '/Question/GetShortAnswerFormDataAjax'
                }
            };

            const config = typeConfig[questionType];
            if (!config) {
                console.error('Unknown question type:', questionType);
                return;
            }
            
            title.textContent = config.title;

            // Show loading state
            formContainer.innerHTML = `
       <div class="text-center">
           <div class="spinner-border text-primary" role="status">
               <span class="visually-hidden">Loading...</span>
           </div>
           <p class="mt-2">Loading question form...</p>
       </div>
   `;

            modal.show();

            try {
                const response = await fetch(`${config.endpoint}?testId=${testId}`);
                const result = await response.json();

                if (result.success) {
                    // Generate form HTML based on question type
                    formContainer.innerHTML = generateQuestionFormHTML(questionType, result.data);

                    // Initialize form functionality
                    initializeQuestionForm(questionType);
                } else {
                    formContainer.innerHTML = `
               <div class="alert alert-danger">
                   <i class="fas fa-exclamation-circle me-2"></i>
                   ${result.message || 'Error loading form'}
               </div>
           `;
                }
            } catch (error) {
                console.error('Error:', error);
                formContainer.innerHTML = `
           <div class="alert alert-danger">
               <i class="fas fa-exclamation-circle me-2"></i>
               Network error occurred
           </div>
       `;
            }
}

        function generateQuestionFormHTML(questionType, data) {
            const baseFormHTML = `
       <div class="question-form">
           <div class="form-floating mb-3">
               <textarea id="questionText" class="form-control" placeholder="Question Text" required style="min-height: 120px;">${data.text || ''}</textarea>
               <label for="questionText">Question Text</label>
               <div class="invalid-feedback">Please enter a question text.</div>
           </div>

           <div class="form-floating mb-3">
               <input type="number" id="questionPoints" class="form-control" placeholder="Points" 
                      min="0.5" max="100" step="0.5" value="${data.points || 1}" required>
               <label for="questionPoints">Points</label>
               <div class="invalid-feedback">Please enter valid points (0.5-100).</div>
           </div>
   `;

            switch (questionType) {
                case 'MultipleChoice':
                    return baseFormHTML + `
               <div class="settings-card mb-3">
                   <div class="form-check form-switch">
                       <input class="form-check-input" type="checkbox" id="allowMultipleSelections" ${data.allowMultipleSelections ? 'checked' : ''}>
                       <label class="form-check-label" for="allowMultipleSelections">
                           <i class="fas fa-list-ul me-2"></i>
                           Allow Multiple Selections
                       </label>
                   </div>
               </div>

               <div class="options-container" id="optionsContainer">
                   <div class="options-title">
                       <span>Answer Options</span>
                       <span class="options-count" id="optionsCount">0 options</span>
                   </div>

                   <div id="optionsList"></div>

                   <div class="add-option-section">
                       <button type="button" class="add-option-btn" id="addOption">
                           <i class="fas fa-plus-circle"></i>
                           Add Answer Option
                       </button>
                   </div>
               </div>
           </div>
       `;

                case 'TrueFalse':
                    return baseFormHTML + `
               <div class="answer-options">
                   <div class="answer-option" onclick="selectAnswer(true)" id="trueOption">
                       <input type="radio" name="correctAnswer" value="true" id="answerTrue" ${data.correctAnswer ? 'checked' : ''} />
                       <div class="answer-option-icon true-icon">
                           <i class="fas fa-check"></i>
                       </div>
                       <div class="flex-grow-1">
                           <label for="answerTrue" class="form-label fw-bold mb-1" style="cursor: pointer;">True</label>
                           <div class="text-muted small">The statement is correct</div>
                       </div>
                   </div>

                   <div class="answer-option" onclick="selectAnswer(false)" id="falseOption">
                       <input type="radio" name="correctAnswer" value="false" id="answerFalse" ${!data.correctAnswer ? 'checked' : ''} />
                       <div class="answer-option-icon false-icon">
                           <i class="fas fa-times"></i>
                       </div>
                       <div class="flex-grow-1">
                           <label for="answerFalse" class="form-label fw-bold mb-1" style="cursor: pointer;">False</label>
                           <div class="text-muted small">The statement is incorrect</div>
                       </div>
                   </div>
               </div>
           </div>
       `;

                case 'ShortAnswer':
                    return baseFormHTML + `
               <div class="form-floating mb-3">
                   <input type="text" id="expectedAnswer" class="form-control" placeholder="Expected Answer" 
                          value="${data.expectedAnswer || ''}" required>
                   <label for="expectedAnswer">Expected Answer</label>
                   <div class="invalid-feedback">Please enter the expected answer.</div>
               </div>

               <div class="settings-card mb-3">
                   <div class="form-check form-switch">
                       <input class="form-check-input" type="checkbox" id="caseSensitive" ${data.caseSensitive ? 'checked' : ''}>
                       <label class="form-check-label" for="caseSensitive">
                           <i class="fas fa-font me-2"></i>
                           Case Sensitive Matching
                       </label>
                   </div>
               </div>

               <div class="answer-preview">
                   <div class="answer-preview-title">
                       <i class="fas fa-eye"></i>
                       Answer Preview
                   </div>
                   <div class="answer-preview-text" id="answerPreview">
                       Enter expected answer above to see preview...
                   </div>
                   <div id="caseSensitiveIndicator">
                       <span class="case-insensitive-indicator">
                           <i class="fas fa-info-circle"></i>
                           Case insensitive matching
                       </span>
                   </div>
               </div>
           </div>
       `;

                default:
                    return baseFormHTML + '</div>';
            }
}

        function initializeQuestionForm(questionType) {
            switch (questionType) {
                case 'MultipleChoice':
                    initializeMultipleChoiceForm();
                    break;
                case 'TrueFalse':
                    initializeTrueFalseForm();
                    break;
                case 'ShortAnswer':
                    initializeShortAnswerForm();
                    break;
            }
}

        function initializeMultipleChoiceForm() {
            let optionIndex = 0;

            function updateOptionsContainer() {
                const container = document.getElementById('optionsContainer');
                const optionsList = document.querySelectorAll('#optionsList .option-group');
                const optionsCount = document.getElementById('optionsCount');

                if (optionsList.length === 0) {
                    container.classList.remove('has-options');
                    optionsCount.textContent = '0 options';
                } else {
                    container.classList.add('has-options');
                    optionsCount.textContent = `${optionsList.length} option${optionsList.length === 1 ? '' : 's'}`;

                    // Update option numbers
                    optionsList.forEach((option, index) => {
                        option.querySelector('.option-number').textContent = index + 1;
                        option.querySelector('.option-label').textContent = `Option ${index + 1}`;
                    });
                }
            }

            function handleMultipleSelection() {
                const allowMultiple = document.getElementById('allowMultipleSelections').checked;
                const correctAnswers = document.querySelectorAll('.correct-answer');

                correctAnswers.forEach(checkbox => {
                    checkbox.removeEventListener('change', handleSingleSelection);
                    checkbox.removeEventListener('change', handleMultipleSelectionChange);
                });

                if (!allowMultiple) {
                    correctAnswers.forEach(checkbox => {
                        checkbox.addEventListener('change', handleSingleSelection);
                    });
                } else {
                    correctAnswers.forEach(checkbox => {
                        checkbox.addEventListener('change', handleMultipleSelectionChange);
                    });
                }
            }

            function handleSingleSelection(event) {
                if (event.target.checked) {
                    document.querySelectorAll('.correct-answer').forEach(cb => {
                        if (cb !== event.target) cb.checked = false;
                    });
                    updateCorrectStyles();
                }
            }

            function handleMultipleSelectionChange(event) {
                updateCorrectStyles();
            }

            function updateCorrectStyles() {
                document.querySelectorAll('.option-group').forEach(group => {
                    const checkbox = group.querySelector('.correct-answer');
                    const check = group.querySelector('.correct-check');

                    if (checkbox.checked) {
                        group.classList.add('correct-option');
                        check.classList.add('is-correct');
                    } else {
                        group.classList.remove('correct-option');
                        check.classList.remove('is-correct');
                    }
                });
            }

            // Add option functionality
            document.getElementById('addOption').addEventListener('click', function() {
                optionIndex++;
                const newOption = document.createElement('div');
                newOption.className = 'option-group';
                newOption.innerHTML = `
           <div class="option-header">
               <div class="option-number">${optionIndex}</div>
               <div class="option-label">Option ${optionIndex}</div>
               <div class="option-controls">
                   <div class="correct-check">
                       <input type="checkbox" class="form-check-input correct-answer" id="correct-${optionIndex}" />
                       <label class="correct-check-label" for="correct-${optionIndex}">
                           <i class="fas fa-check me-1"></i>Correct
                       </label>
                   </div>
                   <button type="button" class="btn btn-danger remove-option-btn remove-option" title="Remove this option">
                       <i class="fas fa-times"></i>
                   </button>
               </div>
           </div>
           <input type="text" class="form-control option-text" placeholder="Enter answer option..." required />
       `;

                document.getElementById('optionsList').appendChild(newOption);
                updateOptionsContainer();
                handleMultipleSelection();

                // Focus on new input
                newOption.querySelector('.option-text').focus();
            });

            // Remove option functionality
            document.addEventListener('click', function(e) {
                if (e.target.closest('.remove-option')) {
                    const optionGroups = document.querySelectorAll('.option-group');
                    if (optionGroups.length > 1) {
                        e.target.closest('.option-group').remove();
                        updateOptionsContainer();
                    } else {
                        showToast('You must have at least one option', 'warning');
                    }
                }
            });

            // Initialize with 2 options
            document.getElementById('addOption').click();
            document.getElementById('addOption').click();

            // Handle multiple selection toggle
            document.getElementById('allowMultipleSelections').addEventListener('change', handleMultipleSelection);
            handleMultipleSelection();
        }

        function initializeTrueFalseForm() {
            // Select answer functionality
            window.selectAnswer = function(isTrue) {
                document.getElementById('answerTrue').checked = isTrue;
                document.getElementById('answerFalse').checked = !isTrue;

                const trueOption = document.getElementById('trueOption');
                const falseOption = document.getElementById('falseOption');

                if (isTrue) {
                    trueOption.classList.add('selected');
                    falseOption.classList.remove('selected');
                } else {
                    falseOption.classList.add('selected');
                    trueOption.classList.remove('selected');
                }
            };

            // Initialize selection
            const trueRadio = document.getElementById('answerTrue');
            if (trueRadio.checked) {
                selectAnswer(true);
            } else {
                selectAnswer(false);
            }
}

        function initializeShortAnswerForm() {
            function updatePreview() {
                const expectedAnswer = document.getElementById('expectedAnswer').value;
                const caseSensitive = document.getElementById('caseSensitive').checked;
                const preview = document.getElementById('answerPreview');
                const indicator = document.getElementById('caseSensitiveIndicator');

                // Update preview text
                if (expectedAnswer.trim()) {
                    preview.textContent = expectedAnswer;
                    preview.style.color = '#3b82f6';
                } else {
                    preview.textContent = 'Enter expected answer above to see preview...';
                    preview.style.color = '#6b7280';
                }

                // Update case sensitivity indicator
                // Update case sensitivity indicator
                if (caseSensitive) {
                    indicator.innerHTML = `
               <span class="case-sensitive-indicator">
                   <i class="fas fa-exclamation-triangle"></i>
                   Case sensitive matching - "Answer" ≠ "answer"
               </span>
           `;
                } else {
                    indicator.innerHTML = `
               <span class="case-insensitive-indicator">
                   <i class="fas fa-info-circle"></i>
                   Case insensitive matching - "Answer" = "answer"
               </span>
           `;
                }
            }

            // Add event listeners
            document.getElementById('expectedAnswer').addEventListener('input', updatePreview);
            document.getElementById('caseSensitive').addEventListener('change', updatePreview);

            // Initialize preview
            updatePreview();
        }

        async function saveQuestion() {
            const submitButton = document.getElementById('saveQuestionBtn');
            const originalText = submitButton.innerHTML;

            // Show loading state
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';

            try {
                const questionData = collectQuestionData();

                if (!questionData) {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                    return;
                }

                const endpoint = getEndpointForQuestionType(currentQuestionType);
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(questionData)
                });

                const result = await response.json();

                if (result.success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createQuestionModal'));
                    modal.hide();

                    // Add question to page
                    addQuestionToPage(result.question);

                    showToast(result.message, 'success');
                } else {
                    showToast(result.message || 'Error creating question', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
}

        function collectQuestionData() {
            const questionText = document.getElementById('questionText').value.trim();
            const questionPoints = parseFloat(document.getElementById('questionPoints').value);

            if (!questionText) {
                showToast('Please enter a question text', 'warning');
                document.getElementById('questionText').focus();
                return null;
            }

            if (!questionPoints || questionPoints <= 0) {
                showToast('Please enter valid points', 'warning');
                document.getElementById('questionPoints').focus();
                return null;
            }

            const baseData = {
                TestId: currentTestId,
                Text: questionText,
                Points: questionPoints
            };

            switch (currentQuestionType) {
                case 'MultipleChoice':
                    const options = Array.from(document.querySelectorAll('.option-text'))
                        .map(input => input.value.trim())
                        .filter(text => text);

                    const correctAnswers = Array.from(document.querySelectorAll('.correct-answer:checked'))
                        .map(checkbox => checkbox.closest('.option-group').querySelector('.option-text').value.trim());

                    if (options.length < 2) {
                        showToast('Please provide at least 2 answer options', 'warning');
                        return null;
                    }

                    if (correctAnswers.length === 0) {
                        showToast('Please select at least one correct answer', 'warning');
                        return null;
                    }

                    return {
                        ...baseData,
                        Options: options,
                        CorrectAnswers: correctAnswers,
                        AllowMultipleSelections: document.getElementById('allowMultipleSelections').checked
                    };

                case 'TrueFalse':
                    const correctAnswer = document.querySelector('input[name="correctAnswer"]:checked');
                    if (!correctAnswer) {
                        showToast('Please select the correct answer', 'warning');
                        return null;
                    }

                    return {
                        ...baseData,
                        CorrectAnswer: correctAnswer.value === 'true'
                    };

                case 'ShortAnswer':
                    const expectedAnswer = document.getElementById('expectedAnswer').value.trim();
                    if (!expectedAnswer) {
                        showToast('Please enter the expected answer', 'warning');
                        document.getElementById('expectedAnswer').focus();
                        return null;
                    }

                    return {
                        ...baseData,
                        ExpectedAnswer: expectedAnswer,
                        CaseSensitive: document.getElementById('caseSensitive').checked
                    };

                default:
                    return null;
            }
}

        function getEndpointForQuestionType(questionType) {
            const endpoints = {
                'MultipleChoice': '/Question/CreateMultipleChoiceAjax',
                'TrueFalse': '/Question/CreateTrueFalseAjax',
                'ShortAnswer': '/Question/CreateShortAnswerAjax'
            };
            return endpoints[questionType];
        }

        function addQuestionToPage(question) {
            // Update question count
            const questionsCount = document.getElementById('questionsCount');
            const questionsTabCount = document.getElementById('questionsTabCount');
            const currentCount = parseInt(questionsCount.textContent);
            const newCount = currentCount + 1;

            questionsCount.textContent = newCount;
            questionsTabCount.textContent = newCount;

            // Update total points
            const totalPoints = document.getElementById('totalPoints');
            const currentPoints = parseFloat(totalPoints.textContent);
            totalPoints.textContent = currentPoints + question.points;

            // If this is the first question, hide empty state and show questions section
            if (newCount === 1) {
                const emptyState = document.getElementById('emptyQuestionsState');
                if (emptyState) {
                    emptyState.style.display = 'none';
                }

                // Show add questions section and questions list
                const addQuestionsSection = document.querySelector('.add-questions-section');
                const questionsSection = document.querySelector('.questions-section');

                if (addQuestionsSection) addQuestionsSection.style.display = 'block';
                if (questionsSection) questionsSection.style.display = 'block';

                // Create questions list if it doesn't exist
                let questionsList = document.getElementById('questionsList');
                if (!questionsList) {
                    const questionsTab = document.getElementById('questions');
                    questionsList = document.createElement('div');
                    questionsList.id = 'questionsList';
                    questionsList.className = 'questions-list';
                    questionsTab.appendChild(questionsList);
                }
            }

            // Add question item to list
            const questionItem = createQuestionItemHTML(question, newCount);
            const questionsList = document.getElementById('questionsList');
            if (questionsList) {
                questionsList.insertAdjacentHTML('beforeend', questionItem);
            }

            // Update invite form visibility
            const isLocked = document.getElementById('statusIndicator').classList.contains('status-locked');
            updateInviteFormVisibility(isLocked);

            // Add pulse animation to counts
            questionsCount.classList.add('pulse');
            questionsTabCount.classList.add('pulse');

            setTimeout(() => {
                questionsCount.classList.remove('pulse');
                questionsTabCount.classList.remove('pulse');
            }, 2000);
        }

        function createQuestionItemHTML(question, position) {
            const typeInfo = getQuestionTypeInfo(question.type);

            return `
       <div class="question-item slide-up" data-question-id="${question.id}">
           <div class="question-number">${position}</div>
           <div class="question-content">
               <div class="question-header">
                   <div class="question-meta">
                       <span class="question-type-badge ${typeInfo.class}">
                           <i class="fas ${typeInfo.icon} me-1"></i>
                           ${typeInfo.name}
                       </span>
                       <span class="question-points">
                           <i class="fas fa-star me-1"></i>
                           ${question.points} pts
                       </span>
                   </div>
               </div>
               <div class="question-text">${question.text}</div>
               ${generateQuestionPreview(question)}
           </div>
           <div class="question-actions">
               <div class="action-buttons">
                   <a href="/Test/QuestionAnalytics/${currentTestId}/${question.id}" class="btn btn-sm btn-outline-info" title="View Analytics">
                       <i class="fas fa-chart-line"></i>
                   </a>
                   <button type="button" class="btn btn-sm btn-outline-warning" title="Edit Question" onclick="openEditQuestionModal('${question.id}')">
                       <i class="fas fa-edit"></i>
                   </button>
                   <button type="button" class="btn btn-sm btn-outline-danger" title="Delete Question" onclick="openDeleteQuestionModal('${question.id}')">
                       <i class="fas fa-trash"></i>
                   </button>
               </div>
           </div>
       </div>
   `;
        }

        function getQuestionTypeInfo(type) {
            const typeMap = {
                'MultipleChoice': { name: 'Multiple Choice', class: 'multiple-choice', icon: 'fa-list-ul' },
                'TrueFalse': { name: 'True/False', class: 'true-false', icon: 'fa-check-circle' },
                'ShortAnswer': { name: 'Short Answer', class: 'short-answer', icon: 'fa-pen' }
            };
            return typeMap[type] || { name: 'Unknown', class: 'unknown', icon: 'fa-question' };
        }

        function generateQuestionPreview(question) {
            switch (question.type) {
                case 'MultipleChoice':
                    let optionsHTML = '';
                    if (question.options) {
                        question.options.slice(0, 3).forEach(option => {
                            const isCorrect = question.correctAnswers && question.correctAnswers.includes(option);
                            optionsHTML += `
                       <div class="option-preview ${isCorrect ? 'correct' : ''}">
                           ${isCorrect ? '<i class="fas fa-check-circle text-success me-2"></i>' : ''}
                           ${option}
                       </div>
                   `;
                        });

                        if (question.options.length > 3) {
                            optionsHTML += `<div class="option-preview more">+${question.options.length - 3} more options</div>`;
                        }
                    }

                    return `
               <div class="question-preview">
                   <div class="options-preview">
                       ${optionsHTML}
                   </div>
               </div>
           `;

                case 'TrueFalse':
                    return `
               <div class="question-preview">
                   <div class="tf-preview">
                       <span class="tf-option ${question.correctAnswer ? 'correct' : ''}">
                           ${question.correctAnswer ? '<i class="fas fa-check-circle text-success me-1"></i>' : ''}
                           True
                       </span>
                       <span class="tf-option ${!question.correctAnswer ? 'correct' : ''}">
                           ${!question.correctAnswer ? '<i class="fas fa-check-circle text-success me-1"></i>' : ''}
                           False
                       </span>
                   </div>
               </div>
           `;

                case 'ShortAnswer':
                    return `
               <div class="question-preview">
                   <div class="answer-preview">
                       <strong>Expected Answer:</strong> ${question.expectedAnswer}
                       ${question.caseSensitive ? '<span class="case-sensitive">(Case Sensitive)</span>' : ''}
                   </div>
               </div>
           `;

                default:
                    return '';
            }
}

        function openEditQuestionModal(questionId) {
            // For now, show a toast message (can be enhanced later)
            showToast('Edit functionality will be available soon', 'info');
        }

        function openDeleteQuestionModal(questionId) {
            currentQuestionId = questionId;
            const modal = new bootstrap.Modal(document.getElementById('deleteQuestionModal'));
            modal.show();
        }

        async function confirmDeleteQuestion() {
            const submitButton = event.target;
            const originalText = submitButton.innerHTML;

            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';

            try {
                const response = await fetch('/Question/DeleteAjax', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ Id: currentQuestionId })
                });

                const result = await response.json();

                if (result.success) {
                    // Remove question from DOM
                    const questionItem = document.querySelector(`[data-question-id="${currentQuestionId}"]`);
                    if (questionItem) {
                        questionItem.style.animation = 'slideUp 0.3s ease-out reverse';
                        setTimeout(() => {
                            questionItem.remove();
                            updateQuestionCounts();
                            updateQuestionNumbers();
                        }, 300);
                    }

                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('deleteQuestionModal'));
                    modal.hide();

                    showToast(result.message, 'success');
                } else {
                    showToast(result.message || 'Error deleting question', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error occurred', 'error');
            } finally {
                submitButton.disabled = false;
                submitButton.innerHTML = originalText;
            }
}

        function updateQuestionCounts() {
            const questionItems = document.querySelectorAll('.question-item');
            const count = questionItems.length;

            // Update counts in various places
            document.getElementById('questionsCount').textContent = count;
            document.getElementById('questionsTabCount').textContent = count;

            // Calculate total points
            let totalPoints = 0;
            questionItems.forEach(item => {
                const pointsElement = item.querySelector('.question-points');
                if (pointsElement) {
                    const points = parseFloat(pointsElement.textContent.replace(/[^\d.]/g, ''));
                    if (!isNaN(points)) {
                        totalPoints += points;
                    }
                }
            });

            const totalPointsElement = document.getElementById('totalPoints');
            if (totalPointsElement) {
                totalPointsElement.textContent = totalPoints;
            }

            // Show/hide empty state
            if (count === 0) {
                showEmptyQuestionsState();
            }

            // Update invite form visibility
            const isLocked = document.getElementById('statusIndicator').classList.contains('status-locked');
            updateInviteFormVisibility(isLocked);
        }

        function updateQuestionNumbers() {
            const questionItems = document.querySelectorAll('.question-item');
            questionItems.forEach((item, index) => {
                const numberElement = item.querySelector('.question-number');
                if (numberElement) {
                    numberElement.textContent = index + 1;
                }
            });
        }

        function showEmptyQuestionsState() {
            const questionsSection = document.querySelector('.questions-section');
            if (questionsSection) {
                questionsSection.style.display = 'none';
            }

            const addQuestionsSection = document.querySelector('.add-questions-section');
            if (addQuestionsSection) {
                addQuestionsSection.style.display = 'none';
            }

            let emptyState = document.getElementById('emptyQuestionsState');
            if (!emptyState) {
                const questionsTab = document.getElementById('questions');
                emptyState = document.createElement('div');
                emptyState.id = 'emptyQuestionsState';
                emptyState.className = 'empty-questions-state';
                emptyState.innerHTML = `
          <div class="empty-icon">
              <i class="fas fa-question-circle"></i>
          </div>
          <h3 class="empty-title">No Questions Yet</h3>
          <p class="empty-description">
              Get started by adding your first question. Choose from multiple question types to create engaging tests.
          </p>
          
          <div class="question-types-grid">
              <button class="question-type-card" onclick="openCreateQuestionModal('MultipleChoice', '${currentTestId}')">
                  <div class="question-type-icon multiple-choice">
                      <i class="fas fa-list-ul"></i>
                  </div>
                  <div class="question-type-content">
                      <div class="question-type-title">Multiple Choice</div>
                      <div class="question-type-desc">Single or multiple selections</div>
                  </div>
              </button>
              
              <button class="question-type-card" onclick="openCreateQuestionModal('TrueFalse', '${currentTestId}')">
                  <div class="question-type-icon true-false">
                      <i class="fas fa-check-circle"></i>
                  </div>
                  <div class="question-type-content">
                      <div class="question-type-title">True/False</div>
                      <div class="question-type-desc">Binary choice questions</div>
                  </div>
              </button>
              
              <button class="question-type-card" onclick="openCreateQuestionModal('ShortAnswer', '${currentTestId}')">
                  <div class="question-type-icon short-answer">
                      <i class="fas fa-pen"></i>
                  </div>
                  <div class="question-type-content">
                      <div class="question-type-title">Short Answer</div>
                      <div class="question-type-desc">Text-based responses</div>
                  </div>
              </button>
          </div>
      `;
                questionsTab.appendChild(emptyState);
            }

            emptyState.style.display = 'block';
            emptyState.classList.add('bounce-in');
        }

        // Email invitation functionality
        function generateEmailFields() {
            const count = parseInt(document.getElementById('emailCount').value);

            if (!count || count < 1 || count > 50) {
                showToast('Please enter a number between 1 and 50', 'warning');
                return;
            }

            const container = document.getElementById('emailFields');
            container.innerHTML = '';

            for (let i = 1; i <= count; i++) {
                addEmailFieldAtIndex(i);
            }

            document.getElementById('emailFieldsContainer').style.display = 'block';

            // Add slide-up animation
            const fieldsContainer = document.getElementById('emailFieldsContainer');
            fieldsContainer.classList.add('slide-up');

            // Focus on first email field
            setTimeout(() => {
                const firstInput = container.querySelector('input');
                if (firstInput) {
                    firstInput.focus();
                }
            }, 400);
        }

        function addSingleField() {
            const container = document.getElementById('emailFields');
            const currentCount = container.children.length + 1;

            if (currentCount > 50) {
                showToast('Maximum 50 email fields allowed', 'warning');
                return;
            }

            addEmailFieldAtIndex(currentCount);
            document.getElementById('emailFieldsContainer').style.display = 'block';

            // Focus on the new field
            setTimeout(() => {
                const newInput = container.lastElementChild.querySelector('input');
                if (newInput) {
                    newInput.focus();
                }
            }, 100);
        }

        function addEmailFieldAtIndex(index) {
            const container = document.getElementById('emailFields');
            const fieldGroup = document.createElement('div');
            fieldGroup.className = 'email-field-group slide-up';
            fieldGroup.innerHTML = `
      <input type="email" class="form-control" placeholder="Student ${index} email address" required>
      <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeEmailField(this)" title="Remove this field">
          <i class="fas fa-times"></i>
      </button>
  `;
            container.appendChild(fieldGroup);
        }

        function removeEmailField(button) {
            const fieldGroup = button.parentElement;
            const container = document.getElementById('emailFields');

            if (container.children.length > 1) {
                fieldGroup.style.animation = 'slideUp 0.3s ease-out reverse';
                setTimeout(() => {
                    fieldGroup.remove();

                    // Update placeholder numbers
                    const emailFields = document.querySelectorAll('.email-field-group input');
                    emailFields.forEach((input, index) => {
                        input.placeholder = `Student ${index + 1} email address`;
                    });
                }, 300);
            } else {
                // Show error for trying to remove the last field
                button.classList.add('shake');
                showToast('You must have at least one email field', 'warning');

                setTimeout(() => {
                    button.classList.remove('shake');
                }, 600);
            }

            // Hide container if no fields remain
            setTimeout(() => {
                if (container.children.length === 0) {
                    document.getElementById('emailFieldsContainer').style.display = 'none';
                }
            }, 350);
        }

        async function sendInvites(testId) {
            const emailInputs = document.querySelectorAll('.email-field-group input');
            const emails = [];

            let isValid = true;
            emailInputs.forEach(input => {
                if (!input.value.trim()) {
                    input.classList.add('is-invalid');
                    isValid = false;
                } else if (!input.checkValidity()) {
                    input.classList.add('is-invalid');
                    isValid = false;
                } else {
                    input.classList.remove('is-invalid');
                    emails.push(input.value.trim());
                }
            });

            if (!isValid || emails.length === 0) {
                showToast('Please enter valid email addresses', 'warning');
                return;
            }

            // Check for duplicates
            const uniqueEmails = [...new Set(emails)];
            if (uniqueEmails.length !== emails.length) {
                showToast('Please remove duplicate email addresses', 'warning');
                return;
            }

            // Show loading state
            const sendButton = event.target;
            const originalText = sendButton.innerHTML;
            sendButton.disabled = true;
            sendButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sending Invitations...';

            try {
                const response = await fetch(`/TestInvite/SendInvites?testId=${testId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(uniqueEmails),
                });

                if (response.ok) {
                    const result = await response.json();

                    if (result.successfulInvites && result.successfulInvites.length > 0) {
                        showToast(`Invites sent successfully to ${result.successfulInvites.length} student(s)`, 'success');

                        // Update invite count
                        const invitesCountElement = document.getElementById('invitesCount');
                        const invitesTabCountElement = document.getElementById('invitesTabCount');
                        const currentCount = parseInt(invitesCountElement.textContent);
                        const newCount = currentCount + result.successfulInvites.length;

                        invitesCountElement.textContent = newCount;
                        invitesTabCountElement.textContent = newCount;

                        // Add pulse animation to counts
                        invitesCountElement.classList.add('pulse');
                        invitesTabCountElement.classList.add('pulse');

                        setTimeout(() => {
                            invitesCountElement.classList.remove('pulse');
                            invitesTabCountElement.classList.remove('pulse');
                        }, 2000);

                        // Clear the form
                        clearInviteForm();
                    }

                    if (result.failedInvites && result.failedInvites.length > 0) {
                        showToast(`Failed to send ${result.failedInvites.length} invite(s). ${result.message || ''}`, 'warning', 8000);
                    }
                } else {
                    throw new Error('Failed to send invites');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error sending invites. Please try again.', 'error');
            } finally {
                sendButton.disabled = false;
                sendButton.innerHTML = originalText;
            }
}

        function clearInviteForm() {
            document.getElementById('emailFields').innerHTML = '';
            document.getElementById('emailFieldsContainer').style.display = 'none';
            document.getElementById('emailCount').value = '';
        }

        // Auto-save draft functionality for email fields
        let emailDraftTimer;
        function saveEmailDraft() {
            const emails = Array.from(document.querySelectorAll('.email-field-group input'))
                .map(input => input.value.trim())
                .filter(email => email);

            if (emails.length > 0) {
                localStorage.setItem(`emailDraft_${currentTestId}`, JSON.stringify(emails));
            } else {
                localStorage.removeItem(`emailDraft_${currentTestId}`);
            }
}

        function loadEmailDraft() {
            const draft = localStorage.getItem(`emailDraft_${currentTestId}`);
            if (draft) {
                try {
                    const emails = JSON.parse(draft);
                    if (emails.length > 0) {
                        document.getElementById('emailCount').value = emails.length;
                        generateEmailFields();

                        setTimeout(() => {
                            const inputs = document.querySelectorAll('.email-field-group input');
                            emails.forEach((email, index) => {
                                if (inputs[index]) {
                                    inputs[index].value = email;
                                }
                            });
                        }, 100);

                        // showToast('Restored draft email list', 'info');
                    }
                } catch (e) {
                    console.error('Error loading email draft:', e);
                }
            }
}

        // Event listeners for auto-save
        document.addEventListener('input', function(e) {
            if (e.target.matches('.email-field-group input')) {
                clearTimeout(emailDraftTimer);
                emailDraftTimer = setTimeout(saveEmailDraft, 1000);
            }
});

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Escape key to close modals
            if (e.key === 'Escape') {
                const openModals = document.querySelectorAll('.modal.show');
                openModals.forEach(modal => {
                    const bsModal = bootstrap.Modal.getInstance(modal);
                    if (bsModal) {
                        bsModal.hide();
                    }
                });
            }

            // Ctrl/Cmd + S to save (if edit modal is open)
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                const editModal = document.getElementById('editTestModal');
                const questionModal = document.getElementById('createQuestionModal');

                if (editModal.classList.contains('show')) {
                    e.preventDefault();
                    saveTestChanges();
                } else if (questionModal.classList.contains('show')) {
                    e.preventDefault();
                    saveQuestion();
                }
            }
});

        // Question filtering and sorting functions
        function filterQuestions(filterType) {
            const questionItems = document.querySelectorAll('.question-item');
            const filterButtons = document.querySelectorAll('.filter-btn');
            
            // Update active filter button
            filterButtons.forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[data-filter="${filterType}"]`).classList.add('active');
            
            questionItems.forEach(item => {
                if (filterType === 'all') {
                    item.style.display = 'flex';
                } else {
                    const questionType = item.querySelector('.question-type-badge').className;
                    const matchesFilter = questionType.includes(filterType);
                    item.style.display = matchesFilter ? 'flex' : 'none';
                }
            });
            
            // Update visible count
            updateVisibleQuestionCount();
        }
        
        function sortQuestions(sortType) {
            const questionsList = document.getElementById('questionsList');
            const questionItems = Array.from(questionsList.querySelectorAll('.question-item'));
            
            questionItems.sort((a, b) => {
                switch(sortType) {
                    case 'position':
                        const posA = parseInt(a.querySelector('.question-number').textContent);
                        const posB = parseInt(b.querySelector('.question-number').textContent);
                        return posA - posB;
                        
                    case 'type':
                        const typeA = a.querySelector('.question-type-badge').textContent.trim();
                        const typeB = b.querySelector('.question-type-badge').textContent.trim();
                        return typeA.localeCompare(typeB);
                        
                    case 'points-high':
                        const pointsA = parseFloat(a.querySelector('.question-points').textContent.replace(' pts', ''));
                        const pointsB = parseFloat(b.querySelector('.question-points').textContent.replace(' pts', ''));
                        return pointsB - pointsA;
                        
                    case 'points-low':
                        const pointsA2 = parseFloat(a.querySelector('.question-points').textContent.replace(' pts', ''));
                        const pointsB2 = parseFloat(b.querySelector('.question-points').textContent.replace(' pts', ''));
                        return pointsA2 - pointsB2;
                        
                    default:
                        return 0;
                }
            });
            
            // Re-append sorted items
            questionItems.forEach(item => questionsList.appendChild(item));
        }
        
        function updateVisibleQuestionCount() {
            const visibleQuestions = document.querySelectorAll('.question-item[style*="flex"], .question-item:not([style*="none"])');
            const totalQuestions = document.querySelectorAll('.question-item');
            
            // Update counts in filter buttons if needed
            console.log(`Showing ${visibleQuestions.length} of ${totalQuestions.length} questions`);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Load email draft if available
            loadEmailDraft();

            // Add smooth scrolling to anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Initialize Bootstrap tooltips if available
            if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            }
});

        // Clean up when page unloads
        window.addEventListener('beforeunload', function() {
            clearTimeout(emailDraftTimer);
        });
    </script>
}
