@* *@
@* *@
@* *@
@* @using Microsoft.AspNetCore.Mvc.TagHelpers *@
@* @using TestPlatform2.Data.Questions *@
@* @model TestPlatform2.Data.Test *@
@* *@
@* @{ *@
@*     ViewData["Title"] = "Test Details"; *@
@* } *@
@* *@
@* <h2>Test Details</h2> *@
@* *@
@* <div class="card mb-4"> *@
@*     <div class="card-body"> *@
@*         <h4 class="card-title">@Model.TestName</h4> *@
@* *@
@*         <dl class="row"> *@
@*             <dt class="col-sm-3">Description</dt> *@
@*             <dd class="col-sm-9">@Model.Description</dd> *@
@* *@
@*             <dt class="col-sm-3">Randomize Questions</dt> *@
@*             <dd class="col-sm-9">@(Model.RandomizeQuestions ? "Yes" : "No")</dd> *@
@* *@
@*             <dt class="col-sm-3">Time Limit</dt> *@
@*             <dd class="col-sm-9">@Model.TimeLimit minutes</dd> *@
@* *@
@*             <dt class="col-sm-3">Max Attempts</dt> *@
@*             <dd class="col-sm-9">@Model.MaxAttempts</dd> *@
@* *@
@*             <dt class="col-sm-3">Created By</dt> *@
@*             <dd class="col-sm-9">@Model.User?.UserName</dd> *@
@*         </dl> *@
@* *@
@*         <!-- Question Type Buttons --> *@
@*         <div class="mb-4"> *@
@*             <h5>Add Questions:</h5> *@
@*             <div class="btn-group"> *@
@*                 <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id" class="btn btn-primary me-2"> *@
@*                     <i class="fas fa-list-ul"></i> Multiple Choice *@
@*                 </a> *@
@*                 <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id" class="btn btn-success me-2"> *@
@*                     <i class="fas fa-check-circle"></i> True/False *@
@*                 </a> *@
@*                 <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id" class="btn btn-info me-2"> *@
@*                     <i class="fas fa-pen"></i> Short Answer *@
@*                 </a> *@
@*             </div> *@
@*         </div> *@
@* *@
@*         <!-- Navigation Buttons --> *@
@*         <div class="mt-3"> *@
@*             <a asp-action="Index" class="btn btn-secondary"> *@
@*                 <i class="fas fa-arrow-left"></i> Back to Tests *@
@*             </a> *@
@*             <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning ms-2"> *@
@*                 <i class="fas fa-edit"></i> Edit Test *@
@*             </a> *@
@*             <button type="button" class="btn btn-danger ms-2" onclick="deleteTest('@Model.Id')"> *@
@*                 <i class="fas fa-trash"></i> Delete Test *@
@*             </button> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* <!-- List of Existing Questions --> *@
@* @if (Model.Questions?.Any() == true) *@
@* { *@
@*     <div class="card"> *@
@*         <div class="card-body"> *@
@*             <h5 class="card-title">Questions</h5> *@
@*             <div class="list-group"> *@
@*                 @foreach (var question in Model.Questions.OrderBy(q => q.Position)) *@
@*                 { *@
@*                     <div class="list-group-item d-flex justify-content-between align-items-center"> *@
@*                         <div> *@
@*                             <span class="badge bg-secondary me-2">@question.Position</span> *@
@*                             @question.Text *@
@*                             <span class="badge bg-primary ms-2">@question.Points pts</span> *@
@*                             @{ *@
@*                                 var questionType = question switch *@
@*                                 { *@
@*                                     TrueFalseQuestion => "True/False", *@
@*                                     MultipleChoiceQuestion => "Multiple Choice", *@
@*                                     ShortAnswerQuestion => "Short Answer", *@
@*                                     _ => "Unknown" *@
@*                                 }; *@
@*                             } *@
@*                             <span class="badge bg-info ms-2">@questionType</span> *@
@*                         </div> *@
@*                         <div class="btn-group"> *@
@*                             <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id" class="btn btn-sm btn-warning"> *@
@*                                 <i class="fas fa-edit"></i> *@
@*                             </a> *@
@*                             <button type="button" class="btn btn-sm btn-danger" onclick="confirmDeleteQuestion('@question.Id')"> *@
@*                                 <i class="fas fa-trash"></i> *@
@*                             </button> *@
@*                         </div> *@
@*                     </div> *@
@*                 } *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* } *@
@* *@
@* *@
@* <!-- Send Invites Section --> *@
@* <div class="card mt-4"> *@
@*     <div class="card-body"> *@
@*         <h5 class="card-title">Send Invites to Students</h5> *@
@* *@
@*         <!-- Form to Add Emails --> *@
@*         <form id="addEmailsForm"> *@
@*             <div class="mb-3"> *@
@*                 <label for="emails" class="form-label">Enter student emails (comma-separated):</label> *@
@*                 <textarea id="emails" name="emails" class="form-control" rows="3" placeholder="e.g., student1@example.com, student2@example.com"></textarea> *@
@*             </div> *@
@*             <button type="button" class="btn btn-primary" onclick="addEmails()"> *@
@*                 <i class="fas fa-plus"></i> Add Emails *@
@*             </button> *@
@*         </form> *@
@* *@
@*         <!-- List of Added Emails --> *@
@*         <div class="mt-4"> *@
@*             <h6>Emails to Invite:</h6> *@
@*             <ul id="emailList" class="list-group"> *@
@*                 <!-- Emails will be dynamically added here --> *@
@*             </ul> *@
@*         </div> *@
@* *@
@*         <!-- Button to Send Invites --> *@
@*         <div class="mt-3"> *@
@*             <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')"> *@
@*                 <i class="fas fa-paper-plane"></i> Send Invites *@
@*             </button> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* *@
@* @section Scripts { *@
@*     @{await Html.RenderPartialAsync("_ValidationScriptsPartial");} *@
@* *@
@*     <script> *@
@*         function confirmDeleteQuestion(id) { *@
@*             if (confirm('Are you sure you want to delete this question?')) { *@
@*                 $.ajax({ *@
@*                     url: '@Url.Action("Delete", "Question")/' + id, *@
@*                     type: 'POST', *@
@*                     success: function() { *@
@*                         location.reload(); *@
@*                     }, *@
@*                     error: function() { *@
@*                         alert('Error deleting question'); *@
@*                     } *@
@*                 }); *@
@*             } *@
@*         } *@
@* *@
@*         function deleteTest(id) { *@
@*             if (confirm('Are you sure you want to delete this test and all its questions?')) { *@
@*                 window.location.href = '@Url.Action("Delete", "Test")/' + id; *@
@*             } *@
@*         } *@
@*     </script> *@
@* *@
@*     <script> *@
@*         // Array to store emails *@
@*         let emails = []; *@
@* *@
@*         // Function to add emails to the list *@
@*         function addEmails() { *@
@*             const emailInput = document.getElementById('emails').value; *@
@*             const newEmails = emailInput.split(',').map(email => email.trim()).filter(email => email); *@
@* *@
@*             // Add new emails to the array *@
@*             emails = [...new Set([...emails, ...newEmails])]; *@
@* *@
@*             // Clear the input *@
@*             document.getElementById('emails').value = ''; *@
@* *@
@*             // Update the email list UI *@
@*             updateEmailList(); *@
@*         } *@
@* *@
@*         // Function to update the email list UI *@
@*         function updateEmailList() { *@
@*             const emailList = document.getElementById('emailList'); *@
@*             emailList.innerHTML = ''; // Clear the list *@
@* *@
@*             emails.forEach(email => { *@
@*                 const listItem = document.createElement('li'); *@
@*                 listItem.className = 'list-group-item d-flex justify-content-between align-items-center'; *@
@*                 listItem.textContent = email; *@
@* *@
@*                 // Add a remove button *@
@*                 const removeButton = document.createElement('button'); *@
@*                 removeButton.className = 'btn btn-sm btn-danger'; *@
@*                 removeButton.innerHTML = '<i class="fas fa-times"></i>'; *@
@*                 removeButton.onclick = () => removeEmail(email); *@
@* *@
@*                 listItem.appendChild(removeButton); *@
@*                 emailList.appendChild(listItem); *@
@*             }); *@
@*         } *@
@* *@
@*         // Function to remove an email from the list *@
@*         function removeEmail(email) { *@
@*             emails = emails.filter(e => e !== email); *@
@*             updateEmailList(); *@
@*         } *@
@* *@
@*         // Function to send invites *@
@*         function sendInvites(testId) { *@
@*             if (emails.length === 0) { *@
@*                 alert('Please add at least one email.'); *@
@*                 return; *@
@*             } *@
@* *@
@*             // Send the emails to the server *@
@*             fetch(`/TestInvite/SendInvites?testId=${testId}`, { *@
@*                 method: 'POST', *@
@*                 headers: { *@
@*                     'Content-Type': 'application/json', *@
@*                 }, *@
@*                 body: JSON.stringify(emails), *@
@*             }) *@
@*                 .then(response => { *@
@*                     if (response.ok) { *@
@*                         alert('Invites sent successfully!'); *@
@*                         emails = []; // Clear the email list *@
@*                         updateEmailList(); // Update the UI *@
@*                     } else { *@
@*                         alert('Error sending invites.'); *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error:', error); *@
@*                     alert('Error sending invites.'); *@
@*                 }); *@
@*         } *@
@*     </script> *@
@* } *@



@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TestPlatform2.Data.Questions
@model TestPlatform2.Data.Test
@{
    ViewData["Title"] = "Test Details";
}

<!-- Page Title -->
<h2 class="text-center mb-4">Test Details</h2>

<div class="container">
    <!-- Test Details Card -->
    <div class="card shadow mb-5">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">@Model.TestName</h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3 font-weight-bold">Description</dt>
                <dd class="col-sm-9">@Model.Description</dd>
                <dt class="col-sm-3 font-weight-bold">Randomize Questions</dt>
                <dd class="col-sm-9">@(Model.RandomizeQuestions ? "Yes" : "No")</dd>
                <dt class="col-sm-3 font-weight-bold">Time Limit</dt>
                <dd class="col-sm-9">@Model.TimeLimit minutes</dd>
                <dt class="col-sm-3 font-weight-bold">Max Attempts</dt>
                <dd class="col-sm-9">@Model.MaxAttempts</dd>
                <dt class="col-sm-3 font-weight-bold">Created By</dt>
                <dd class="col-sm-9">@Model.User?.UserName</dd>
            </dl>
        </div>
        <div class="card-footer d-flex justify-content-between align-items-center">
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Tests
            </a>
            <div>
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning me-2">
                    <i class="fas fa-edit"></i> Edit Test
                </a>
                <button type="button" class="btn btn-danger" onclick="deleteTest('@Model.Id')">
                    <i class="fas fa-trash"></i> Delete Test
                </button>
            </div>
        </div>
    </div>

    <!-- Add Questions Section -->
    <div class="card shadow mb-5">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">Add Questions</h5>
        </div>
        <div class="card-body">
            <div class="btn-group w-100">
                <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id" class="btn btn-primary w-100 me-2">
                    <i class="fas fa-list-ul"></i> Multiple Choice
                </a>
                <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id" class="btn btn-success w-100 me-2">
                    <i class="fas fa-check-circle"></i> True/False
                </a>
                <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id" class="btn btn-info w-100">
                    <i class="fas fa-pen"></i> Short Answer
                </a>
            </div>
        </div>
    </div>

    <!-- Existing Questions List -->
    @if (Model.Questions?.Any() == true)
    {
        <div class="card shadow mb-5">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Questions</h5>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var question in Model.Questions.OrderBy(q => q.Position))
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge bg-secondary me-2">@question.Position</span>
                            <strong>@question.Text</strong>
                            <span class="badge bg-primary ms-2">@question.Points pts</span>
                            @{
                                var questionType = question switch
                                {
                                    TrueFalseQuestion => "True/False",
                                    MultipleChoiceQuestion => "Multiple Choice",
                                    ShortAnswerQuestion => "Short Answer",
                                    _ => "Unknown"
                                };
                            }
                            <span class="badge bg-info ms-2">@questionType</span>
                        </div>
                        <div class="btn-group">
                            <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id" class="btn btn-sm btn-warning">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button type="button" class="btn btn-sm btn-danger" onclick="confirmDeleteQuestion('@question.Id')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }

    <!-- Send Invites Section -->
    <div class="card shadow mb-5">
        <div class="card-header bg-dark text-white">
            <h5 class="mb-0">Send Invites to Students</h5>
        </div>
        <div class="card-body">
            <!-- Form to Specify Number of Emails -->
            <form id="emailForm">
                <div class="mb-3">
                    <label for="emailCount" class="form-label">Enter the number of students:</label>
                    <input type="number" id="emailCount" name="emailCount" class="form-control" min="1" placeholder="e.g., 5" required>
                </div>
                <button type="button" class="btn btn-primary me-2" onclick="generateEmailFields()">
                    <i class="fas fa-plus"></i> Generate Email Fields
                </button>
                <button type="button" class="btn btn-secondary" onclick="addSingleField()">
                    <i class="fas fa-user-plus"></i> Add Single Field
                </button>
            </form>

            <!-- Dynamic Email Input Fields -->
            <div id="emailInputsContainer" class="mt-4" style="display: none;">
                <h6>Enter Student Emails:</h6>
                <form id="emailInputsForm" novalidate>
                    <div id="emailInputs" class="mb-3"></div>
                    <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')">
                        <i class="fas fa-paper-plane"></i> Send Invites
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Function to confirm question deletion
        function confirmDeleteQuestion(id) {
            if (confirm('Are you sure you want to delete this question?')) {
                $.ajax({
                    url: '@Url.Action("Delete", "Question")/' + id,
                    type: 'POST',
                    success: function () {
                        location.reload();
                    },
                    error: function () {
                        alert('Error deleting question');
                    }
                });
            }
        }

        // Function to confirm test deletion
        function deleteTest(id) {
            if (confirm('Are you sure you want to delete this test and all its questions?')) {
                window.location.href = '@Url.Action("Delete", "Test")/' + id;
            }
        }

        // Function to generate email input fields dynamically
        function generateEmailFields() {
            const emailCount = document.getElementById('emailCount').value;

            if (!emailCount || emailCount < 1) {
                alert('Please enter a valid number of students.');
                return;
            }

            const emailInputsDiv = document.getElementById('emailInputs');

            // Generate email input fields
            for (let i = 1; i <= emailCount; i++) {
                addSingleField(emailInputsDiv);
            }

            // Show the container
            document.getElementById('emailInputsContainer').style.display = 'block';
        }

        // Function to add a single email field
        function addSingleField(container = null) {
            const emailInputsDiv = container || document.getElementById('emailInputs');

            const emailInputDiv = document.createElement('div');
            emailInputDiv.className = 'input-group mb-2';

            // Generate unique ID for each input field
            const uniqueId = `email-${Date.now()}`;

            emailInputDiv.innerHTML = `
                <span class="input-group-text">Student</span>
                <input type="email" id="${uniqueId}" class="form-control" placeholder="Enter email" required>
                <button type="button" class="btn btn-danger" onclick="removeField(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            emailInputsDiv.appendChild(emailInputDiv);

            // Show the container
            document.getElementById('emailInputsContainer').style.display = 'block';
        }

        // Function to remove an email field
        function removeField(button) {
            const emailInputDiv = button.closest('.input-group');
            emailInputDiv.remove();
        }

        // Function to send invites
        function sendInvites(testId) {
            const emailInputsForm = document.getElementById('emailInputsForm');
            const emailInputs = emailInputsForm.querySelectorAll('input[type="email"]');
            const emails = [];

            // Check if the form is valid
            let isValid = true;
            emailInputs.forEach(input => {
                if (!input.checkValidity()) {
                    isValid = false;
                    input.reportValidity(); // Trigger browser validation message
                } else {
                    emails.push(input.value.trim());
                }
            });

            if (!isValid || emails.length === 0) {
                return;
            }

            // Send the emails to the server
            fetch(`/TestInvite/SendInvites?testId=${testId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(emails),
            })
                .then(response => {
                    if (response.ok) {
                        alert('Invites sent successfully!');
                    } else {
                        alert('Error sending invites.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error sending invites.');
                });
        }
    </script>
}