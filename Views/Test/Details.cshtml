@* $1$ @using Microsoft.AspNetCore.Mvc.TagHelpers #1# *@
@* $1$ @using TestPlatform2.Data.Questions #1# *@
@* $1$ @model TestPlatform2.Data.Test #1# *@
@* $1$ @{ #1# *@
@* $1$     ViewData["Title"] = "Test Details"; #1# *@
@* $1$ }<style> #1# *@
@* $1$     /* General Styles */ #1# *@
@* $1$     body { #1# *@
@* $1$         background-color: var(--primary-bg); #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .card { #1# *@
@* $1$         background-color: var(--secondary-bg); #1# *@
@* $1$         border: none; #1# *@
@* $1$         border-radius: 8px; #1# *@
@* $1$         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .card-header { #1# *@
@* $1$         background: linear-gradient(90deg, var(--accent-purple), var(--accent-green)); #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$         border-bottom: none; #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn { #1# *@
@* $1$         border: none; #1# *@
@* $1$         border-radius: 4px; #1# *@
@* $1$         transition: background-color 0.3s ease, transform 0.3s ease; #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn:hover { #1# *@
@* $1$         transform: translateY(-2px); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .list-group-item { #1# *@
@* $1$         background-color: var(--secondary-bg); #1# *@
@* $1$         border-color: rgba(255, 255, 255, 0.1); #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .badge { #1# *@
@* $1$         font-weight: 500; #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     /* Custom Button Colors */ #1# *@
@* $1$     .btn-primary { #1# *@
@* $1$         background-color: var(--accent-green); #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn-primary:hover { #1# *@
@* $1$         background-color: var(--accent-purple); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn-secondary { #1# *@
@* $1$         background-color: #6c757d; #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn-warning { #1# *@
@* $1$         background-color: #ffc107; #1# *@
@* $1$         color: #000; #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn-danger { #1# *@
@* $1$         background-color: #dc3545; #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn-info { #1# *@
@* $1$         background-color: #17a2b8; #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .btn-success { #1# *@
@* $1$         background-color: #28a745; #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     /* Form Styles */ #1# *@
@* $1$     .form-control { #1# *@
@* $1$         background-color: var(--primary-bg); #1# *@
@* $1$         border-color: rgba(255, 255, 255, 0.1); #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     .form-control:focus { #1# *@
@* $1$         background-color: var(--primary-bg); #1# *@
@* $1$         border-color: var(--accent-green); #1# *@
@* $1$         box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25); #1# *@
@* $1$         color: var(--text-primary); #1# *@
@* $1$     } #1# *@
@* $1$ </style> #1# *@
@* $1$ #1# *@
@* $1$ <!-- Page Title --> #1# *@
@* $1$ <h2 class="text-center mb-4">Test Details</h2> #1# *@
@* $1$ #1# *@
@* $1$ <div class="container"> #1# *@
@* $1$     <!-- Test Details Card --> #1# *@
@* $1$     <div class="card shadow mb-5"> #1# *@
@* $1$         <div class="card-header"> #1# *@
@* $1$             <h4 class="mb-0">@Model.TestName</h4> #1# *@
@* $1$         </div> #1# *@
@* $1$         <div class="card-body"> #1# *@
@* $1$             <dl class="row"> #1# *@
@* $1$                 <dt class="col-sm-3 font-weight-bold">Description</dt> #1# *@
@* $1$                 <dd class="col-sm-9">@Model.Description</dd> #1# *@
@* $1$                 <dt class="col-sm-3 font-weight-bold">Randomize Questions</dt> #1# *@
@* $1$                 <dd class="col-sm-9">@(Model.RandomizeQuestions ? "Yes" : "No")</dd> #1# *@
@* $1$                 <dt class="col-sm-3 font-weight-bold">Time Limit</dt> #1# *@
@* $1$                 <dd class="col-sm-9">@Model.TimeLimit minutes</dd> #1# *@
@* $1$                 <dt class="col-sm-3 font-weight-bold">Max Attempts</dt> #1# *@
@* $1$                 <dd class="col-sm-9">@Model.MaxAttempts</dd> #1# *@
@* $1$                 <dt class="col-sm-3 font-weight-bold">Created By</dt> #1# *@
@* $1$                 <dd class="col-sm-9">@Model.User?.UserName</dd> #1# *@
@* $1$             </dl> #1# *@
@* $1$         </div> #1# *@
@* $1$         <div class="card-footer d-flex justify-content-between align-items-center"> #1# *@
@* $1$             <a asp-action="Index" class="btn btn-secondary"> #1# *@
@* $1$                 <i class="fas fa-arrow-left"></i> Back to Tests #1# *@
@* $1$             </a> #1# *@
@* $1$             <div> #1# *@
@* $1$                 <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning me-2"> #1# *@
@* $1$                     <i class="fas fa-edit"></i> Edit Test #1# *@
@* $1$                 </a> #1# *@
@* $1$                 <button type="button" class="btn btn-danger" onclick="deleteTest('@Model.Id')"> #1# *@
@* $1$                     <i class="fas fa-trash"></i> Delete Test #1# *@
@* $1$                 </button> #1# *@
@* $1$             </div> #1# *@
@* $1$         </div> #1# *@
@* $1$     </div> #1# *@
@* $1$ #1# *@
@* $1$     <!-- Add Questions Section --> #1# *@
@* $1$     <div class="card shadow mb-5"> #1# *@
@* $1$         <div class="card-header"> #1# *@
@* $1$             <h5 class="mb-0">Add Questions</h5> #1# *@
@* $1$         </div> #1# *@
@* $1$         <div class="card-body"> #1# *@
@* $1$             <div class="btn-group w-100"> #1# *@
@* $1$                 <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id" class="btn btn-primary w-100 me-2"> #1# *@
@* $1$                     <i class="fas fa-list-ul"></i> Multiple Choice #1# *@
@* $1$                 </a> #1# *@
@* $1$                 <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id" class="btn btn-success w-100 me-2"> #1# *@
@* $1$                     <i class="fas fa-check-circle"></i> True/False #1# *@
@* $1$                 </a> #1# *@
@* $1$                 <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id" class="btn btn-info w-100"> #1# *@
@* $1$                     <i class="fas fa-pen"></i> Short Answer #1# *@
@* $1$                 </a> #1# *@
@* $1$             </div> #1# *@
@* $1$         </div> #1# *@
@* $1$     </div> #1# *@
@* $1$ #1# *@
@* $1$     <!-- Existing Questions List --> #1# *@
@* $1$     @if (Model.Questions?.Any() == true) #1# *@
@* $1$     { #1# *@
@* $1$         <div class="card shadow mb-5"> #1# *@
@* $1$             <div class="card-header"> #1# *@
@* $1$                 <h5 class="mb-0">Questions</h5> #1# *@
@* $1$             </div> #1# *@
@* $1$             <ul class="list-group list-group-flush"> #1# *@
@* $1$                 @foreach (var question in Model.Questions.OrderBy(q => q.Position)) #1# *@
@* $1$                 { #1# *@
@* $1$                     <li class="list-group-item d-flex justify-content-between align-items-center"> #1# *@
@* $1$                         <div> #1# *@
@* $1$                             <span class="badge bg-secondary me-2">@question.Position</span> #1# *@
@* $1$                             <strong>@question.Text</strong> #1# *@
@* $1$                             <span class="badge bg-primary ms-2">@question.Points pts</span> #1# *@
@* $1$                             @{ #1# *@
@* $1$                                 var questionType = question switch #1# *@
@* $1$                                 { #1# *@
@* $1$                                     TrueFalseQuestion => "True/False", #1# *@
@* $1$                                     MultipleChoiceQuestion => "Multiple Choice", #1# *@
@* $1$                                     ShortAnswerQuestion => "Short Answer", #1# *@
@* $1$                                     _ => "Unknown" #1# *@
@* $1$                                 }; #1# *@
@* $1$                             } #1# *@
@* $1$                             <span class="badge bg-info ms-2">@questionType</span> #1# *@
@* $1$                         </div> #1# *@
@* $1$                         <div class="btn-group"> #1# *@
@* $1$                             <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id" class="btn btn-sm btn-warning"> #1# *@
@* $1$                                 <i class="fas fa-edit"></i> #1# *@
@* $1$                             </a> #1# *@
@* $1$                             <button type="button" class="btn btn-sm btn-danger" onclick="confirmDeleteQuestion('@question.Id')"> #1# *@
@* $1$                                 <i class="fas fa-trash"></i> #1# *@
@* $1$                             </button> #1# *@
@* $1$                         </div> #1# *@
@* $1$                     </li> #1# *@
@* $1$                 } #1# *@
@* $1$             </ul> #1# *@
@* $1$         </div> #1# *@
@* $1$     } #1# *@
@* $1$ #1# *@
@* $1$     <!-- Send Invites Section --> #1# *@
@* $1$     <div class="card shadow mb-5"> #1# *@
@* $1$         <div class="card-header"> #1# *@
@* $1$             <h5 class="mb-0">Send Invites to Students</h5> #1# *@
@* $1$         </div> #1# *@
@* $1$         <div class="card-body"> #1# *@
@* $1$             <!-- Form to Specify Number of Emails --> #1# *@
@* $1$             <form id="emailForm"> #1# *@
@* $1$                 <div class="mb-3"> #1# *@
@* $1$                     <label for="emailCount" class="form-label">Enter the number of students:</label> #1# *@
@* $1$                     <input type="number" id="emailCount" name="emailCount" class="form-control" min="1" placeholder="e.g., 5" required> #1# *@
@* $1$                 </div> #1# *@
@* $1$                 <button type="button" class="btn btn-primary me-2" onclick="generateEmailFields()"> #1# *@
@* $1$                     <i class="fas fa-plus"></i> Generate Email Fields #1# *@
@* $1$                 </button> #1# *@
@* $1$                 <button type="button" class="btn btn-secondary" onclick="addSingleField()"> #1# *@
@* $1$                     <i class="fas fa-user-plus"></i> Add Single Field #1# *@
@* $1$                 </button> #1# *@
@* $1$             </form> #1# *@
@* $1$ #1# *@
@* $1$             <!-- Dynamic Email Input Fields --> #1# *@
@* $1$             <div id="emailInputsContainer" class="mt-4" style="display: none;"> #1# *@
@* $1$                 <h6>Enter Student Emails:</h6> #1# *@
@* $1$                 <form id="emailInputsForm" novalidate> #1# *@
@* $1$                     <div id="emailInputs" class="mb-3"></div> #1# *@
@* $1$                     <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')"> #1# *@
@* $1$                         <i class="fas fa-paper-plane"></i> Send Invites #1# *@
@* $1$                     </button> #1# *@
@* $1$                 </form> #1# *@
@* $1$             </div> #1# *@
@* $1$         </div> #1# *@
@* $1$     </div> #1# *@
@* $1$ </div> #1# *@
@* $1$ @section Scripts { #1# *@
@* $1$     @{await Html.RenderPartialAsync("_ValidationScriptsPartial");} #1# *@
@* $1$     <script> #1# *@
@* $1$         // Function to confirm question deletion #1# *@
@* $1$         function confirmDeleteQuestion(id) { #1# *@
@* $1$             if (confirm('Are you sure you want to delete this question?')) { #1# *@
@* $1$                 $.ajax({ #1# *@
@* $1$                     url: '@Url.Action("Delete", "Question")/' + id, #1# *@
@* $1$                     type: 'POST', #1# *@
@* $1$                     success: function () { #1# *@
@* $1$                         location.reload(); #1# *@
@* $1$                     }, #1# *@
@* $1$                     error: function () { #1# *@
@* $1$                         alert('Error deleting question'); #1# *@
@* $1$                     } #1# *@
@* $1$                 }); #1# *@
@* $1$             } #1# *@
@* $1$         } #1# *@
@* $1$ #1# *@
@* $1$         // Function to confirm test deletion #1# *@
@* $1$         function deleteTest(id) { #1# *@
@* $1$             if (confirm('Are you sure you want to delete this test and all its questions?')) { #1# *@
@* $1$                 window.location.href = '@Url.Action("Delete", "Test")/' + id; #1# *@
@* $1$             } #1# *@
@* $1$         } #1# *@
@* $1$ #1# *@
@* $1$         // Function to generate email input fields dynamically #1# *@
@* $1$         function generateEmailFields() { #1# *@
@* $1$             const emailCount = document.getElementById('emailCount').value; #1# *@
@* $1$ #1# *@
@* $1$             if (!emailCount || emailCount < 1) { #1# *@
@* $1$                 alert('Please enter a valid number of students.'); #1# *@
@* $1$                 return; #1# *@
@* $1$             } #1# *@
@* $1$ #1# *@
@* $1$             const emailInputsDiv = document.getElementById('emailInputs'); #1# *@
@* $1$ #1# *@
@* $1$             // Generate email input fields #1# *@
@* $1$             for (let i = 1; i <= emailCount; i++) { #1# *@
@* $1$                 addSingleField(emailInputsDiv); #1# *@
@* $1$             } #1# *@
@* $1$ #1# *@
@* $1$             // Show the container #1# *@
@* $1$             document.getElementById('emailInputsContainer').style.display = 'block'; #1# *@
@* $1$         } #1# *@
@* $1$ #1# *@
@* $1$         // Function to add a single email field #1# *@
@* $1$         function addSingleField(container = null) { #1# *@
@* $1$             const emailInputsDiv = container || document.getElementById('emailInputs'); #1# *@
@* $1$ #1# *@
@* $1$             const emailInputDiv = document.createElement('div'); #1# *@
@* $1$             emailInputDiv.className = 'input-group mb-2'; #1# *@
@* $1$ #1# *@
@* $1$             // Generate unique ID for each input field #1# *@
@* $1$             const uniqueId = `email-${Date.now()}`; #1# *@
@* $1$ #1# *@
@* $1$             emailInputDiv.innerHTML = ` #1# *@
@* $1$                 <span class="input-group-text">Student</span> #1# *@
@* $1$                 <input type="email" id="${uniqueId}" class="form-control" placeholder="Enter email" required> #1# *@
@* $1$                 <button type="button" class="btn btn-danger" onclick="removeField(this)"> #1# *@
@* $1$                     <i class="fas fa-times"></i> #1# *@
@* $1$                 </button> #1# *@
@* $1$             `; #1# *@
@* $1$             emailInputsDiv.appendChild(emailInputDiv); #1# *@
@* $1$ #1# *@
@* $1$             // Show the container #1# *@
@* $1$             document.getElementById('emailInputsContainer').style.display = 'block'; #1# *@
@* $1$         } #1# *@
@* $1$ #1# *@
@* $1$         // Function to remove an email field #1# *@
@* $1$         function removeField(button) { #1# *@
@* $1$             const emailInputDiv = button.closest('.input-group'); #1# *@
@* $1$             emailInputDiv.remove(); #1# *@
@* $1$         } #1# *@
@* $1$ #1# *@
@* $1$         // Function to send invites #1# *@
@* $1$         function sendInvites(testId) { #1# *@
@* $1$             const emailInputsForm = document.getElementById('emailInputsForm'); #1# *@
@* $1$             const emailInputs = emailInputsForm.querySelectorAll('input[type="email"]'); #1# *@
@* $1$             const emails = []; #1# *@
@* $1$ #1# *@
@* $1$             // Check if the form is valid #1# *@
@* $1$             let isValid = true; #1# *@
@* $1$             emailInputs.forEach(input => { #1# *@
@* $1$                 if (!input.checkValidity()) { #1# *@
@* $1$                     isValid = false; #1# *@
@* $1$                     input.reportValidity(); // Trigger browser validation message #1# *@
@* $1$                 } else { #1# *@
@* $1$                     emails.push(input.value.trim()); #1# *@
@* $1$                 } #1# *@
@* $1$             }); #1# *@
@* $1$ #1# *@
@* $1$             if (!isValid || emails.length === 0) { #1# *@
@* $1$                 return; #1# *@
@* $1$             } #1# *@
@* $1$ #1# *@
@* $1$             // Send the emails to the server #1# *@
@* $1$             fetch(`/TestInvite/SendInvites?testId=${testId}`, { #1# *@
@* $1$                 method: 'POST', #1# *@
@* $1$                 headers: { #1# *@
@* $1$                     'Content-Type': 'application/json', #1# *@
@* $1$                 }, #1# *@
@* $1$                 body: JSON.stringify(emails), #1# *@
@* $1$             }) #1# *@
@* $1$                 .then(response => { #1# *@
@* $1$                     if (response.ok) { #1# *@
@* $1$                         alert('Invites sent successfully!'); #1# *@
@* $1$                     } else { #1# *@
@* $1$                         alert('Error sending invites.'); #1# *@
@* $1$                     } #1# *@
@* $1$                 }) #1# *@
@* $1$                 .catch(error => { #1# *@
@* $1$                     console.error('Error:', error); #1# *@
@* $1$                     alert('Error sending invites.'); #1# *@
@* $1$                 }); #1# *@
@* $1$         } #1# *@
@* $1$     </script> #1# *@
@* $1$ } #1# *@
@* *@
@* *@
@* @using Microsoft.AspNetCore.Mvc.TagHelpers *@
@* @using TestPlatform2.Data.Questions *@
@* @model TestPlatform2.Data.Test *@
@* @{ *@
@*     ViewData["Title"] = "Test Details"; *@
@* } *@
@* *@
@* <style> *@
@*     /* General Styles */ *@
@*     body { *@
@*         background-color: var(--primary-bg); *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .card { *@
@*         background-color: var(--secondary-bg); *@
@*         border: none; *@
@*         border-radius: 8px; *@
@*         box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); *@
@*         overflow: hidden; *@
@*     } *@
@* *@
@*     .card-header { *@
@*         background-color: var(--accent-primary); *@
@*         color: var(--text-primary); *@
@*         border-bottom: none; *@
@*         padding: 1rem; *@
@*     } *@
@* *@
@*     .card-body { *@
@*         padding: 1.5rem; *@
@*     } *@
@* *@
@*     .btn { *@
@*         border: none; *@
@*         border-radius: 6px; *@
@*         transition: all 0.3s ease; *@
@*         font-weight: 600; *@
@*         display: inline-flex; *@
@*         align-items: center; *@
@*         gap: 0.5rem; *@
@*         padding: 0.5rem 1rem; *@
@*     } *@
@* *@
@*     .btn:hover { *@
@*         opacity: 0.9; *@
@*         transform: translateY(-2px); *@
@*     } *@
@* *@
@*     .btn i { *@
@*         margin-right: 0.25rem; *@
@*     } *@
@* *@
@*     .list-group-item { *@
@*         background-color: var(--secondary-bg); *@
@*         border-color: rgba(255, 255, 255, 0.1); *@
@*         color: var(--text-primary); *@
@*         transition: background-color 0.3s ease; *@
@*     } *@
@* *@
@*     .list-group-item:hover { *@
@*         background-color: rgba(255, 255, 255, 0.05); *@
@*     } *@
@* *@
@*     .badge { *@
@*         font-weight: 500; *@
@*         padding: 0.4rem 0.6rem; *@
@*     } *@
@* *@
@*     /* Custom Button Colors */ *@
@*     .btn-primary { *@
@*         background-color: var(--accent-primary); *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .btn-primary:hover { *@
@*         background-color: #2a76b3; *@
@*     } *@
@* *@
@*     .btn-secondary { *@
@*         background-color: var(--accent-secondary); *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .btn-secondary:hover { *@
@*         background-color: #5a6372; *@
@*     } *@
@* *@
@*     .btn-warning { *@
@*         background-color: #d39e00; *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .btn-warning:hover { *@
@*         background-color: #bd8700; *@
@*     } *@
@* *@
@*     .btn-danger { *@
@*         background-color: #c82333; *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .btn-danger:hover { *@
@*         background-color: #a71d2a; *@
@*     } *@
@* *@
@*     .btn-info { *@
@*         background-color: #17a2b8; *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .btn-info:hover { *@
@*         background-color: #138496; *@
@*     } *@
@* *@
@*     .btn-success { *@
@*         background-color: var(--accent-highlight); *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     .btn-success:hover { *@
@*         background-color: #3ea86f; *@
@*     } *@
@* *@
@*     /* Form Styles */ *@
@*     .form-control { *@
@*         background-color: var(--primary-bg); *@
@*         border-color: rgba(255, 255, 255, 0.1); *@
@*         color: var(--text-primary); *@
@*         transition: all 0.3s ease; *@
@*     } *@
@* *@
@*     .form-control:focus { *@
@*         background-color: var(--primary-bg); *@
@*         border-color: var(--accent-primary); *@
@*         box-shadow: 0 0 0 0.2rem rgba(44, 142, 214, 0.25); *@
@*         color: var(--text-primary); *@
@*     } *@
@* *@
@*     /* Additional Enhancements */ *@
@*     .input-group-text { *@
@*         background-color: var(--secondary-bg); *@
@*         border-color: rgba(255, 255, 255, 0.1); *@
@*         color: var(--text-primary); *@
@*     } *@
@* </style> *@
@* *@
@* *@
@* <!-- Page Title --> *@
@* <h2 class="text-center mb-4">Test Details</h2> *@
@* *@
@* <div class="container"> *@
@*     <!-- Test Details Card --> *@
@*     <div class="card shadow mb-5"> *@
@*         <div class="card-header"> *@
@*             <h4 class="mb-0">@Model.TestName</h4> *@
@*         </div> *@
@*         <div class="card-body"> *@
@*             <dl class="row"> *@
@*                 <dt class="col-sm-3 font-weight-bold">Description</dt> *@
@*                 <dd class="col-sm-9">@Model.Description</dd> *@
@*                 <dt class="col-sm-3 font-weight-bold">Randomize Questions</dt> *@
@*                 <dd class="col-sm-9">@(Model.RandomizeQuestions ? "Yes" : "No")</dd> *@
@*                 <dt class="col-sm-3 font-weight-bold">Time Limit</dt> *@
@*                 <dd class="col-sm-9">@Model.TimeLimit minutes</dd> *@
@*                 <dt class="col-sm-3 font-weight-bold">Max Attempts</dt> *@
@*                 <dd class="col-sm-9">@Model.MaxAttempts</dd> *@
@*                 <dt class="col-sm-3 font-weight-bold">Created By</dt> *@
@*                 <dd class="col-sm-9">@Model.User?.UserName</dd> *@
@*             </dl> *@
@*         </div> *@
@*         <div class="card-footer d-flex justify-content-between align-items-center"> *@
@*             <a asp-action="Index" class="btn btn-secondary"> *@
@*                 <i class="fas fa-arrow-left"></i> Back to Tests *@
@*             </a> *@
@*             <div> *@
@*                 <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning me-2"> *@
@*                     <i class="fas fa-edit"></i> Edit Test *@
@*                 </a> *@
@*                 <button type="button" class="btn btn-danger" onclick="deleteTest('@Model.Id')"> *@
@*                     <i class="fas fa-trash"></i> Delete Test *@
@*                 </button> *@
@*                 <button type="button" class="btn btn-primary" id="lockTestButton" onclick="lockTest('@Model.Id')"> *@
@*                     <i class="fas fa-lock"></i> @(Model.IsLocked ? "Unlock Test" : "Lock Test") *@
@*                 </button> *@
@* *@
@*                 <a asp-action="AllAttempts" asp-route-testId="@Model.Id" class="btn btn-warning me-2"> *@
@*                     <i class="fas fa-edit"></i> All Attempts *@
@*                 </a> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* *@
@*     <!-- Add Questions Section --> *@
@*     <div class="card shadow mb-5"> *@
@*         <div class="card-header"> *@
@*             <h5 class="mb-0">Add Questions</h5> *@
@*         </div> *@
@*         <div class="card-body"> *@
@*             <div class="btn-group w-100"> *@
@*                 <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id" class="btn btn-primary w-100 me-2"> *@
@*                     <i class="fas fa-list-ul"></i> Multiple Choice *@
@*                 </a> *@
@*                 <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id" class="btn btn-success w-100 me-2"> *@
@*                     <i class="fas fa-check-circle"></i> True/False *@
@*                 </a> *@
@*                 <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id" class="btn btn-info w-100"> *@
@*                     <i class="fas fa-pen"></i> Short Answer *@
@*                 </a> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* *@
@*     <!-- Existing Questions List --> *@
@*     @if (Model.Questions?.Any() == true) *@
@*     { *@
@*         <div class="card shadow mb-5"> *@
@*             <div class="card-header"> *@
@*                 <h5 class="mb-0">Questions</h5> *@
@*             </div> *@
@*             <ul class="list-group list-group-flush"> *@
@*                 @foreach (var question in Model.Questions.OrderBy(q => q.Position)) *@
@*                 { *@
@*                     <li class="list-group-item d-flex justify-content-between align-items-center"> *@
@*                         <div> *@
@*                             <span class="badge bg-secondary me-2">@question.Position</span> *@
@*                             <strong>@question.Text</strong> *@
@*                             <span class="badge bg-primary ms-2">@question.Points pts</span> *@
@*                             @{ *@
@*                                 var questionType = question switch *@
@*                                 { *@
@*                                     TrueFalseQuestion => "True/False", *@
@*                                     MultipleChoiceQuestion => "Multiple Choice", *@
@*                                     ShortAnswerQuestion => "Short Answer", *@
@*                                     _ => "Unknown" *@
@*                                 }; *@
@*                             } *@
@*                             <span class="badge bg-info ms-2">@questionType</span> *@
@*                         </div> *@
@*                         <div class="btn-group"> *@
@*                             <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id" class="btn btn-sm btn-warning"> *@
@*                                 <i class="fas fa-edit"></i> *@
@*                             </a> *@
@*                             <button type="button" class="btn btn-sm btn-danger" onclick="confirmDeleteQuestion('@question.Id')"> *@
@*                                 <i class="fas fa-trash"></i> *@
@*                             </button> *@
@*                         </div> *@
@*                     </li> *@
@*                 } *@
@*             </ul> *@
@*         </div> *@
@*     } *@
@* *@
@*     <!-- Send Invites Section --> *@
@*     <div class="card shadow mb-5"> *@
@*         <div class="card-header"> *@
@*             <h5 class="mb-0">Send Invites to Students</h5> *@
@*         </div> *@
@*         <div class="card-body"> *@
@*             <!-- Form to Specify Number of Emails --> *@
@*             <form id="emailForm"> *@
@*                 <div class="mb-3"> *@
@*                     <label for="emailCount" class="form-label">Enter the number of students:</label> *@
@*                     <input type="number" id="emailCount" name="emailCount" class="form-control" min="1" placeholder="e.g., 5" required> *@
@*                 </div> *@
@*                 <button type="button" class="btn btn-primary me-2" onclick="generateEmailFields()"> *@
@*                     <i class="fas fa-plus"></i> Generate Email Fields *@
@*                 </button> *@
@*                 <button type="button" class="btn btn-secondary" onclick="addSingleField()">  *@
@*                 <i class="fas fa-user-plus"></i> Add Single Field #1# *@
@*                 </button>  *@
@*             </form> *@
@* *@
@*             <!-- Dynamic Email Input Fields --> *@
@*             <div id="emailInputsContainer" class="mt-4" style="display: none;"> *@
@*                 <h6>Enter Student Emails:</h6> *@
@*                 <form id="emailInputsForm" novalidate> *@
@*                     <div id="emailInputs" class="mb-3"></div> *@
@*                     <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')"> *@
@*                         <i class="fas fa-paper-plane"></i> Send Invites *@
@*                     </button> *@
@*                 </form> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
@* *@
@* @section Scripts { *@
@*     @{ *@
@*         await Html.RenderPartialAsync("_ValidationScriptsPartial"); *@
@*     } *@
@*     <script> *@
@*         // function to toggle the lock status of the test *@
@*         function lockTest(id) { *@
@*             $.ajax({ *@
@*                 url: '/Test/LockTest/' + id, *@
@*                 type: 'POST', *@
@*                 dataType: 'json', *@
@*                 success: function (data) { *@
@*                     if (data.success) { *@
@*                         var button = document.getElementById('lockTestButton'); *@
@*                         if (data.isLocked) { *@
@*                             button.innerHTML = '<i class="fas fa-lock"></i> Unlock Test'; *@
@*                         } else { *@
@*                             button.innerHTML = '<i class="fas fa-lock"></i> Lock Test'; *@
@*                         } *@
@*                     } else { *@
@*                         alert(data.message || 'Error locking/unlocking test.'); // Display the error message from the server *@
@*                         console.log(data.message || 'Error locking/unlocking test.') *@
@*                     } *@
@*                 }, *@
@*                 error: function (xhr, status, error) { *@
@*                     console.error("AJAX Error: " + status + " - " + error);  // Log the error to the console *@
@*                     alert('Error locking/unlocking test.  Check the console for details.'); // Provide a generic error message *@
@*                 } *@
@*             }); *@
@*         } *@
@*          *@
@*         // Function to confirm question deletion *@
@*         function confirmDeleteQuestion(id) { *@
@*             if (confirm('Are you sure you want to delete this question?')) { *@
@*                 $.ajax({ *@
@*                     url: '@Url.Action("Delete", "Question")/' + id, *@
@*                     type: 'POST', *@
@*                     success: function () { *@
@*                         location.reload(); *@
@*                     }, *@
@*                     error: function () { *@
@*                         alert('Error deleting question'); *@
@*                     } *@
@*                 }); *@
@*             } *@
@*         } *@
@* *@
@*         // Function to confirm test deletion *@
@*         function deleteTest(id) { *@
@*             if (confirm('Are you sure you want to delete this test and all its questions?')) { *@
@*                 window.location.href = '@Url.Action("Delete", "Test")/' + id; *@
@*             } *@
@*         } *@
@* *@
@*         // Function to generate email input fields dynamically *@
@*         function generateEmailFields() { *@
@*             const emailCount = parseInt(document.getElementById('emailCount').value, 10); *@
@* *@
@*             if (isNaN(emailCount) || emailCount < 1) { *@
@*                 alert('Please enter a valid number of students.'); *@
@*                 return; *@
@*             } *@
@* *@
@*             const emailInputsDiv = document.getElementById('emailInputs'); *@
@*             emailInputsDiv.innerHTML = ''; // Clear existing fields *@
@* *@
@*             // Generate email input fields *@
@*             for (let i = 1; i <= emailCount; i++) { *@
@*                 addSingleField(i); *@
@*             } *@
@* *@
@*             // Show the container *@
@*             document.getElementById('emailInputsContainer').style.display = 'block'; *@
@*         } *@
@* *@
@*         // Function to add a single email field *@
@*         function addSingleField() { *@
@*             const emailInputsDiv = document.getElementById('emailInputs'); *@
@*             const emailCount = emailInputsDiv.children.length + 1; *@
@* *@
@*             const emailInputDiv = document.createElement('div'); *@
@*             emailInputDiv.className = 'input-group mb-2'; *@
@* *@
@*             // Generate unique ID for each input field *@
@*             const uniqueId = `email-${Date.now()}-${emailCount}`; *@
@* *@
@*             emailInputDiv.innerHTML = ` *@
@*             <span class="input-group-text">Student ${emailCount}</span> *@
@*             <input type="email" id="${uniqueId}" class="form-control" placeholder="Enter email" required> *@
@*             <button type="button" class="btn btn-danger" onclick="removeField(this)"> *@
@*                 <i class="fas fa-times"></i> *@
@*             </button> *@
@*         `; *@
@*             emailInputsDiv.appendChild(emailInputDiv); *@
@* *@
@*             // Show the container *@
@*             document.getElementById('emailInputsContainer').style.display = 'block'; *@
@*         } *@
@* *@
@*         // Function to remove an email field *@
@*         function removeField(button) { *@
@*             const emailInputDiv = button.closest('.input-group'); *@
@*             emailInputDiv.remove(); *@
@*         } *@
@* *@
@*         // Function to send invites *@
@*         function sendInvites(testId) { *@
@*             const emailInputsForm = document.getElementById('emailInputsForm'); *@
@*             const emailInputs = emailInputsForm.querySelectorAll('input[type="email"]'); *@
@*             const emails = []; *@
@* *@
@*             // Check if the form is valid *@
@*             let isValid = true; *@
@*             emailInputs.forEach(input => { *@
@*                 if (!input.checkValidity()) { *@
@*                     isValid = false; *@
@*                     input.reportValidity(); // Trigger browser validation message *@
@*                 } else { *@
@*                     emails.push(input.value.trim()); *@
@*                 } *@
@*             }); *@
@* *@
@*             if (!isValid || emails.length === 0) { *@
@*                 return; *@
@*             } *@
@* *@
@*             // Send the emails to the server *@
@*             fetch(`/TestInvite/SendInvites?testId=${testId}`, { *@
@*                 method: 'POST', *@
@*                 headers: { *@
@*                     'Content-Type': 'application/json', *@
@*                 }, *@
@*                 body: JSON.stringify(emails), *@
@*             }) *@
@*                 .then(response => { *@
@*                     if (response.ok) { *@
@*                         alert('Invites sent successfully!'); *@
@*                     } else { *@
@*                         alert('Error sending invites.'); *@
@*                     } *@
@*                 }) *@
@*                 .catch(error => { *@
@*                     console.error('Error:', error); *@
@*                     alert('Error sending invites.'); *@
@*                 }); *@
@*         } *@
@*      *@
@*     </script> *@
@* } *@


@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TestPlatform2.Data.Questions
@model TestPlatform2.Data.Test
@{
    ViewData["Title"] = "Test Details";
}

<!-- Page Title -->
<div class="test-details-header fade-in">
    <h2 class="text-center mb-4">Test Details</h2>
</div>

<div class="container fade-in">
    <!-- Test Details Card -->
    <div class="card shadow mb-5">
        <div class="card-header">
            <h4 class="mb-0">@Model.TestName</h4>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Description</dt>
                <dd class="col-sm-9">@Model.Description</dd>
                
                <dt class="col-sm-3">Randomize Questions</dt>
                <dd class="col-sm-9">
                    @if (Model.RandomizeQuestions)
                    {
                        <span class="badge bg-success">Yes</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">No</span>
                    }
                </dd>
                
                <dt class="col-sm-3">Time Limit</dt>
                <dd class="col-sm-9">
                    <span class="badge bg-info">@Model.TimeLimit minutes</span>
                </dd>
                
                <dt class="col-sm-3">Max Attempts</dt>
                <dd class="col-sm-9">
                    <span class="badge bg-primary">@Model.MaxAttempts</span>
                </dd>
                
                <dt class="col-sm-3">Created By</dt>
                <dd class="col-sm-9">@Model.User?.UserName</dd>
                
                <dt class="col-sm-3">Status</dt>
                <dd class="col-sm-9">
                    @if (Model.IsLocked)
                    {
                        <span class="badge bg-danger">Locked</span>
                    }
                    else
                    {
                        <span class="badge bg-success">Unlocked</span>
                    }
                </dd>
            </dl>
        </div>
        <div class="card-footer d-flex justify-content-between align-items-center flex-wrap">
            <a asp-action="Index" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Tests
            </a>
            <div class="btn-group">
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
                    <i class="fas fa-edit"></i> Edit Test
                </a>
                <button type="button" class="btn btn-danger" onclick="deleteTest('@Model.Id')">
                    <i class="fas fa-trash"></i> Delete Test
                </button>
                <button type="button" class="btn btn-primary" id="lockTestButton" onclick="lockTest('@Model.Id')">
                    <i class="fas fa-lock"></i> @(Model.IsLocked ? "Unlock Test" : "Lock Test")
                </button>
                <a asp-action="AllAttempts" asp-route-testId="@Model.Id" class="btn btn-info">
                    <i class="fas fa-clipboard-list"></i> All Attempts
                </a>
            </div>
        </div>
    </div>

    <!-- Add Questions Section -->
    <div class="card shadow mb-5">
        <div class="card-header">
            <h5 class="mb-0">Add Questions</h5>
        </div>
        <div class="card-body">
            <div class="d-flex flex-wrap gap-2">
                <a asp-controller="Question" asp-action="CreateMultipleChoice" asp-route-testId="@Model.Id" class="btn btn-primary flex-grow-1">
                    <i class="fas fa-list-ul"></i> Multiple Choice
                </a>
                <a asp-controller="Question" asp-action="CreateTrueFalse" asp-route-testId="@Model.Id" class="btn btn-success flex-grow-1">
                    <i class="fas fa-check-circle"></i> True/False
                </a>
                <a asp-controller="Question" asp-action="CreateShortAnswer" asp-route-testId="@Model.Id" class="btn btn-info flex-grow-1">
                    <i class="fas fa-pen"></i> Short Answer
                </a>
            </div>
        </div>
    </div>

    <!-- Existing Questions List -->
    @if (Model.Questions?.Any() == true)
    {
        <div class="card shadow mb-5">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Questions</h5>
                <span class="badge bg-primary">@Model.Questions.Count() Questions</span>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var question in Model.Questions.OrderBy(q => q.Position))
                {
                    <li class="list-group-item question-list-item">
                        <div class="question-info">
                            <span class="badge bg-secondary">@question.Position</span>
                            <strong>@question.Text</strong>
                            <span class="badge bg-primary">@question.Points pts</span>
                            @{
                                var questionType = question switch
                                {
                                    TrueFalseQuestion => "True/False",
                                    MultipleChoiceQuestion => "Multiple Choice",
                                    ShortAnswerQuestion => "Short Answer",
                                    _ => "Unknown"
                                };
                                var badgeClass = questionType switch
                                {
                                    "True/False" => "bg-success",
                                    "Multiple Choice" => "bg-primary",
                                    "Short Answer" => "bg-info",
                                    _ => "bg-secondary"
                                };
                            }
                            <span class="badge @badgeClass">@questionType</span>
                        </div>
                        <div class="question-actions">
                            <a asp-controller="Question" asp-action="Edit" asp-route-id="@question.Id" class="btn btn-sm btn-warning">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button type="button" class="btn btn-sm btn-danger" onclick="confirmDeleteQuestion('@question.Id')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </li>
                }
            </ul>
        </div>
    }
    else
    {
        <div class="alert alert-info mb-5">
            <i class="fas fa-info-circle me-2"></i> No questions have been added to this test yet. Use the buttons above to add questions.
        </div>
    }

    <!-- Send Invites Section -->
    <div class="card shadow mb-5">
        <div class="card-header">
            <h5 class="mb-0">Send Invites to Students</h5>
        </div>
        <div class="card-body">
            <!-- Form to Specify Number of Emails -->
            <form id="emailForm">
                <div class="mb-3">
                    <label for="emailCount" class="form-label">Enter the number of students:</label>
                    <input type="number" id="emailCount" name="emailCount" class="form-control" min="1" placeholder="e.g., 5" required>
                </div>
                <div class="d-flex gap-2 flex-wrap">
                    <button type="button" class="btn btn-primary" onclick="generateEmailFields()">
                        <i class="fas fa-plus"></i> Generate Email Fields
                    </button>
                    <button type="button" class="btn btn-secondary" onclick="addSingleField()">
                        <i class="fas fa-user-plus"></i> Add Single Field
                    </button>
                </div>
            </form>

            <!-- Dynamic Email Input Fields -->
            <div id="emailInputsContainer" class="email-inputs-container mt-4" style="display: none;">
                <h6 class="mb-3">Enter Student Emails:</h6>
                <form id="emailInputsForm" novalidate>
                    <div id="emailInputs" class="mb-3"></div>
                    <button type="button" class="btn btn-success" onclick="sendInvites('@Model.Id')">
                        <i class="fas fa-paper-plane"></i> Send Invites
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        // Function to toggle the lock status of the test
        function lockTest(id) {
            $.ajax({
                url: '/Test/LockTest/' + id,
                type: 'POST',
                dataType: 'json',
                success: function (data) {
                    if (data.success) {
                        var button = document.getElementById('lockTestButton');
                        if (data.isLocked) {
                            button.innerHTML = '<i class="fas fa-lock"></i> Unlock Test';
                            button.classList.remove('btn-success');
                            button.classList.add('btn-primary');
                        } else {
                            button.innerHTML = '<i class="fas fa-lock"></i> Lock Test';
                            button.classList.remove('btn-primary');
                            button.classList.add('btn-success');
                        }
                        // Reload the page to update all status indicators
                        location.reload();
                    } else {
                        alert(data.message || 'Error locking/unlocking test.');
                        console.log(data.message || 'Error locking/unlocking test.')
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX Error: " + status + " - " + error);
                    alert('Error locking/unlocking test. Check the console for details.');
                }
            });
        }
        
        // Function to confirm question deletion
        function confirmDeleteQuestion(id) {
            if (confirm('Are you sure you want to delete this question?')) {
                $.ajax({
                    url: '@Url.Action("Delete", "Question")/' + id,
                    type: 'POST',
                    success: function () {
                        location.reload();
                    },
                    error: function () {
                        alert('Error deleting question');
                    }
                });
            }
        }

        // Function to confirm test deletion
        function deleteTest(id) {
            if (confirm('Are you sure you want to delete this test and all its questions?')) {
                window.location.href = '@Url.Action("Delete", "Test")/' + id;
            }
        }

        // Function to generate email input fields dynamically
        function generateEmailFields() {
            const emailCount = parseInt(document.getElementById('emailCount').value, 10);

            if (isNaN(emailCount) || emailCount < 1) {
                alert('Please enter a valid number of students.');
                return;
            }

            const emailInputsDiv = document.getElementById('emailInputs');
            emailInputsDiv.innerHTML = ''; // Clear existing fields

            // Generate email input fields
            for (let i = 1; i <= emailCount; i++) {
                addEmailField(i);
            }

            // Show the container
            document.getElementById('emailInputsContainer').style.display = 'block';
        }

        // Function to add a single email field
        function addSingleField() {
            const emailInputsDiv = document.getElementById('emailInputs');
            const emailCount = emailInputsDiv.children.length + 1;
            
            addEmailField(emailCount);
            
            // Show the container
            document.getElementById('emailInputsContainer').style.display = 'block';
        }
        
        // Helper function to add an email field
        function addEmailField(index) {
            const emailInputsDiv = document.getElementById('emailInputs');
            
            const emailInputDiv = document.createElement('div');
            emailInputDiv.className = 'input-group email-input-group';

            // Generate unique ID for each input field
            const uniqueId = `email-${Date.now()}-${index}`;

            emailInputDiv.innerHTML = `
                <span class="input-group-text">Student ${index}</span>
                <input type="email" id="${uniqueId}" class="form-control" placeholder="Enter email" required>
                <button type="button" class="btn btn-danger" onclick="removeField(this)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            emailInputsDiv.appendChild(emailInputDiv);
        }

        // Function to remove an email field
        function removeField(button) {
            const emailInputDiv = button.closest('.input-group');
            emailInputDiv.remove();
            
            // Renumber the remaining fields
            const emailInputs = document.querySelectorAll('.email-input-group');
            emailInputs.forEach((input, index) => {
                const label = input.querySelector('.input-group-text');
                label.textContent = `Student ${index + 1}`;
            });
        }

        // Function to send invites
        function sendInvites(testId) {
            const emailInputsForm = document.getElementById('emailInputsForm');
            const emailInputs = emailInputsForm.querySelectorAll('input[type="email"]');
            const emails = [];

            // Check if the form is valid
            let isValid = true;
            emailInputs.forEach(input => {
                if (!input.checkValidity()) {
                    isValid = false;
                    input.reportValidity(); // Trigger browser validation message
                } else {
                    emails.push(input.value.trim());
                }
            });

            if (!isValid || emails.length === 0) {
                return;
            }

            // Show loading state
            const sendButton = document.querySelector('button[onclick^="sendInvites"]');
            const originalText = sendButton.innerHTML;
            sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
            sendButton.disabled = true;

            // Send the emails to the server
            fetch(`/TestInvite/SendInvites?testId=${testId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(emails),
            })
                .then(response => {
                    if (response.ok) {
                        alert('Invites sent successfully!');
                        // Clear the form
                        document.getElementById('emailInputs').innerHTML = '';
                        document.getElementById('emailInputsContainer').style.display = 'none';
                    } else {
                        alert('Error sending invites.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error sending invites.');
                })
                .finally(() => {
                    // Restore button state
                    sendButton.innerHTML = originalText;
                    sendButton.disabled = false;
                });
        }
    </script>
}