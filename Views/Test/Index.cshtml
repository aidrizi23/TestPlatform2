@model IEnumerable<TestPlatform2.Data.Test>
@{
ViewData["Title"] = "My Tests";
}

@Html.AntiForgeryToken()

@section Styles
{
<link rel="stylesheet" href="~/css/test-index.css" asp-append-version="true" />

}

<div class="test-index-container">
    <!-- Hero Section -->
    <div class="hero-section">
        <div class="hero-content">
            <div class="hero-text">
                <h1 class="hero-title">
                    <i class="fas fa-clipboard-list me-3"></i>
                    My Tests
                </h1>
                <p class="hero-subtitle">Create, manage, and analyze your tests with powerful insights</p>
                <div class="stats-row">
                    <div class="stat-item">
                        <span class="stat-number">@Model.Count()</span>
                        <span class="stat-label">Total Tests</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Count(t => !t.IsLocked)</span>
                        <span class="stat-label">Active</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Sum(t => t.Attempts.Count)</span>
                        <span class="stat-label">Total Attempts</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Sum(t => t.Questions.Count)</span>
                        <span class="stat-label">Total Questions</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@(Model.Any() && Model.SelectMany(t => t.Attempts.Where(a => a.IsCompleted)).Any() ? Math.Round(Model.SelectMany(t => t.Attempts.Where(a => a.IsCompleted)).Average(a => a.Score), 1) : 0)%</span>
                        <span class="stat-label">Avg Score</span>
                    </div>
                </div>
            </div>
            <div class="hero-action">
                <div class="action-buttons">
                    <button class="btn btn-primary btn-lg create-test-btn" data-bs-toggle="modal" data-bs-target="#createTestModal">
                        <i class="fas fa-plus-circle me-2"></i>Create New Test
                    </button>
                    <a href="@Url.Action("Index", "Category")" class="btn btn-outline-primary btn-lg">
                        <i class="fas fa-tags me-2"></i>Manage Categories & Tags
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Success Message -->
    @if (TempData["SuccessMessage"] != null)
    {
    <div class="alert alert-success alert-dismissible fade show success-alert" role="alert">
        <div class="alert-content">
            <i class="fas fa-check-circle me-2"></i>
            <span>@TempData["SuccessMessage"]</span>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    }

    <!-- Filter and Sort Options - Always Show -->
    <div class="controls-section">
        <div class="controls-content">
            <h2 class="section-title">Your Tests</h2>
            <div class="controls-actions">
                <div class="search-box">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="searchTests" class="form-control" placeholder="Search tests...">
                    </div>
                </div>
                <div class="filter-controls">
                    <div class="filter-group">
                        <label for="categoryFilter" class="filter-label">Category:</label>
                        <select class="form-select filter-select" id="categoryFilter">
                            <option value="">All Categories</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="tagFilter" class="filter-label">Tag:</label>
                        <select class="form-select filter-select" id="tagFilter">
                            <option value="">All Tags</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <a href="@Url.Action("Index", "Category")" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-tags me-1"></i>Manage Categories & Tags
                        </a>
                    </div>
                </div>
                <div class="archive-toggle">
                    <button type="button" id="archiveToggle" 
                            class="btn @(ViewBag.ShowArchived == true ? "btn-outline-secondary" : "btn-outline-primary")"
                            data-show-archived="@(ViewBag.ShowArchived ?? false)">
                        <i class="fas @(ViewBag.ShowArchived == true ? "fa-box" : "fa-archive") me-2"></i>
                        <span id="archiveToggleText">@(ViewBag.ShowArchived == true ? "Show Active Tests" : "Show Archived Tests")</span>
                    </button>
                </div>
                <div class="view-options">
                    <button class="view-btn active" data-view="grid" title="Grid View">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button class="view-btn" data-view="list" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
                <div class="sort-options">
                    <select class="form-select sort-select" id="sortTests">
                        <option value="recent">Recently Created</option>
                        <option value="name">Name A-Z</option>
                        <option value="questions">Most Questions</option>
                        <option value="attempts">Most Attempts</option>
                        <option value="locked">Locked First</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    @if (Model.Any())
    {
    <!-- Dashboard Insights Section -->
    <div class="insights-section">
        <div class="insights-content">
            <h2 class="insights-title">
                <i class="fas fa-chart-line me-2"></i>
                Insights & Analytics
            </h2>
            
            <div class="insights-grid">
                <!-- Recent Activity Card -->
                <div class="insight-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="fas fa-clock me-2"></i>
                            Recent Activity
                        </h5>
                    </div>
                    <div class="card-body" id="recentActivityContent">
                        <div class="text-muted text-center">No recent activity</div>
                    </div>
                </div>

                <!-- Performance Overview Card -->
                <div class="insight-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="fas fa-chart-bar me-2"></i>
                            Performance Overview
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="performance-stats">
                            <div class="performance-item">
                                <div class="performance-label">Best Performing Test</div>
                                <div class="performance-value">
                                    @{
                                        var bestTest = Model.Where(t => t.Attempts.Any(a => a.IsCompleted))
                                                           .OrderByDescending(t => t.Attempts.Where(a => a.IsCompleted).Average(a => a.Score))
                                                           .FirstOrDefault();
                                    }
                                    @if (bestTest != null)
                                    {
                                        <a href="@Url.Action("Details", new { id = bestTest.Id })" class="performance-link">
                                            @bestTest.TestName
                                        </a>
                                        <span class="performance-score">@Math.Round(bestTest.Attempts.Where(a => a.IsCompleted).Average(a => a.Score), 1)%</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No completed attempts yet</span>
                                    }
                                </div>
                            </div>
                            
                            <div class="performance-item">
                                <div class="performance-label">Most Popular Test</div>
                                <div class="performance-value">
                                    @{
                                        var popularTest = Model.OrderByDescending(t => t.Attempts.Count).FirstOrDefault();
                                    }
                                    @if (popularTest != null && popularTest.Attempts.Any())
                                    {
                                        <a href="@Url.Action("Details", new { id = popularTest.Id })" class="performance-link">
                                            @popularTest.TestName
                                        </a>
                                        <span class="performance-score">@popularTest.Attempts.Count attempts</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">No attempts yet</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions Card -->
                <div class="insight-card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="fas fa-bolt me-2"></i>
                            Quick Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="quick-actions">
                            <button class="btn btn-primary w-100 mb-2" data-bs-toggle="modal" data-bs-target="#createTestModal">
                                <i class="fas fa-plus me-2"></i>Create New Test
                            </button>
                            @* <a href="@Url.Action("SharedTests")" class="btn btn-outline-info w-100 mb-2"> *@
                            @*     <i class="fas fa-share-alt me-2"></i>View Shared Tests *@
                            @* </a> *@
                            <a href="@Url.Action("Index", "Category")" class="btn btn-outline-secondary w-100">
                                <i class="fas fa-tags me-2"></i>Manage Categories
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    }

    <!-- Tests Grid -->
    @if (!Model.Any())
    {
    <div class="empty-state">
        <div class="empty-state-content">
            <div class="empty-state-icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <h3 class="empty-state-title">No Tests Yet</h3>
            <p class="empty-state-description">
                Get started by creating your first test. You can add various question types,
                set time limits, and invite students to take your tests.
            </p>
            <button class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#createTestModal">
                <i class="fas fa-plus-circle me-2"></i>Create Your First Test
            </button>
        </div>
    </div>
    }

    <!-- Tests Grid/List Container - Always Show -->
    <div class="tests-container" id="testsContainer">
        <div class="tests-grid" id="testsGrid">
            @foreach (var test in Model)
            {
            <div class="test-card" data-test-id="@test.Id" data-test-name="@test.TestName" data-question-count="@test.Questions?.Count" data-attempt-count="@test.Attempts.Count" data-locked="@test.IsLocked.ToString().ToLower()" data-archived="@test.IsArchived.ToString().ToLower()" data-category-id="@test.CategoryId" data-category-name="@(test.Category?.Name ?? "")" data-tags="@string.Join(",", test.Tags.Select(t => t.Name))" >
                <div class="test-card-header">
                    <div class="test-status">
                        <span class="status-badge @(test.IsArchived ? "status-archived" : (test.Status == TestPlatform2.Data.TestStatus.Scheduled ? "status-scheduled" : (test.Status == TestPlatform2.Data.TestStatus.Closed ? "status-closed" : (test.IsLocked ? "status-locked" : "status-active"))))">
                            <i class="fas @(test.IsArchived ? "fa-archive" : (test.Status == TestPlatform2.Data.TestStatus.Scheduled ? "fa-calendar-alt" : (test.Status == TestPlatform2.Data.TestStatus.Closed ? "fa-times-circle" : (test.IsLocked ? "fa-lock" : "fa-unlock"))))"></i>
                            @(test.IsArchived ? "Archived" : (test.Status == TestPlatform2.Data.TestStatus.Scheduled ? "Scheduled" : (test.Status == TestPlatform2.Data.TestStatus.Closed ? "Closed" : (test.IsLocked ? "Locked" : "Active"))))
                        </span>
                    </div>
                   
                </div>

                <div class="test-card-body">
                    <h3 class="test-title" title="@test.TestName">@test.TestName</h3>
                    <p class="test-description">
                        @if (string.IsNullOrEmpty(test.Description))
                        {
                            <span class="text-muted">No description provided</span>
                        }
                        else
                        {
                            @(test.Description.Length > 80 ? test.Description.Substring(0, 77) + "..." : test.Description)
                        }
                    </p>

                    @if (test.Category != null || test.Tags.Any())
                    {
                        <div class="test-categories-tags">
                            @if (test.Category != null)
                            {
                                <div class="category-badge" style="background-color: @test.Category.Color">
                                    @if (!string.IsNullOrEmpty(test.Category.Icon))
                                    {
                                        <i class="@test.Category.Icon"></i>
                                    }
                                    <span>@test.Category.Name</span>
                                </div>
                            }
                            @foreach (var tag in test.Tags.Take(3))
                            {
                                <div class="tag-badge" style="background-color: @tag.Color">
                                    <span>@tag.Name</span>
                                </div>
                            }
                            @if (test.Tags.Count > 3)
                            {
                                <div class="tag-badge tag-more">
                                    <span>+@(test.Tags.Count - 3) more</span>
                                </div>
                            }
                        </div>
                    }

                    <div class="test-stats">
                        <div class="stat-group">
                            <div class="stat">
                                <i class="fas fa-question-circle stat-icon"></i>
                                <span class="stat-value">@(test.Questions?.Count ?? 0)</span>
                                <span class="stat-label">Questions</span>
                            </div>
                            <div class="stat">
                                <i class="fas fa-clock stat-icon"></i>
                                <span class="stat-value">@test.TimeLimit</span>
                                <span class="stat-label">Minutes</span>
                            </div>
                            <div class="stat">
                                <i class="fas fa-users stat-icon"></i>
                                <span class="stat-value">@test.Attempts.Count</span>
                                <span class="stat-label">Attempts</span>
                            </div>
                        </div>
                    </div>

                    <div class="test-features">
                        @if (test.RandomizeQuestions)
                        {
                            <span class="feature-tag">
                                <i class="fas fa-random"></i>
                                Randomized
                            </span>
                        }
                        @if (test.MaxAttempts > 1)
                        {
                            <span class="feature-tag">
                                <i class="fas fa-redo"></i>
                                @test.MaxAttempts Attempts
                            </span>
                        }
                        @if (test.IsScheduled)
                        {
                            <span class="feature-tag scheduling-info">
                                <i class="fas fa-calendar-alt"></i>
                                @if (test.ScheduledStartDate.HasValue)
                                {
                                    <span>Starts: @test.ScheduledStartDate.Value.ToString("MMM dd, HH:mm")</span>
                                }
                                @if (test.ScheduledEndDate.HasValue)
                                {
                                    <span>Ends: @test.ScheduledEndDate.Value.ToString("MMM dd, HH:mm")</span>
                                }
                            </span>
                        }
                    </div>
                </div>
                <div class="test-card-footer">
                    <div class="primary-actions">
                        <a asp-action="Details" asp-route-id="@test.Id" class="btn btn-primary btn-sm">
                            <i class="fas fa-eye me-1"></i>
                            View Details
                        </a>
                        <a asp-action="AllAttempts" asp-route-testId="@test.Id" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-chart-bar me-1"></i>
                            Results
                        </a>
                    </div>
                    <div class="secondary-actions">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="toggleArchiveTest('@test.Id')" title="@(test.IsArchived ? "Unarchive Test" : "Archive Test")">
                            <i class="fas @(test.IsArchived ? "fa-box-open" : "fa-archive") me-1"></i>
                            @(test.IsArchived ? "Unarchive" : "Archive")
                        </button>
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
    }
</div>


<!-- Create Test Modal -->
<div class="modal fade" id="createTestModal" tabindex="-1" aria-labelledby="createTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTestModalLabel">
                    <i class="fas fa-plus-circle me-2 text-primary"></i>Create New Test
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createTestForm" novalidate>
                <div class="modal-body">
                    <!-- Basic Information Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h6>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="testTitle" class="form-label">Test Title <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-heading"></i></span>
                                    <input type="text" class="form-control" id="testTitle" name="Title" required
                                           placeholder="Enter a descriptive title for your test">
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-12 mb-3">
                                <label for="testDescription" class="form-label">Description</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                    <textarea class="form-control" id="testDescription" name="Description" rows="3"
                                              placeholder="Enter instructions or details about the test"></textarea>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Optional description that students will see before starting</div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Settings Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-cog me-2"></i>Test Settings
                        </h6>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="timeLimit" class="form-label">Time Limit (minutes) <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                    <input type="number" class="form-control" id="timeLimit" name="TimeLimit"
                                           min="1" max="180" value="60" required>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Maximum time allowed to complete the test</div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="maxAttempts" class="form-label">Max Attempts <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-redo"></i></span>
                                    <input type="number" class="form-control" id="maxAttempts" name="MaxAttempts"
                                           min="1" max="10" value="1" required>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Number of times students can attempt</div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="randomizeQuestions"
                                           name="RandomizeQuestions">
                                    <label class="form-check-label" for="randomizeQuestions">
                                        <i class="fas fa-random me-2"></i>Randomize Question Order
                                    </label>
                                </div>
                                <div class="form-text">Questions will appear in random order for each student</div>
                            </div>
                        </div>
                    </div>

                    <!-- Organization Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-tags me-2"></i>Organization
                        </h6>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="testCategory" class="form-label">Category</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-folder"></i></span>
                                    <select class="form-select" id="testCategory" name="CategoryId">
                                        <option value="">No Category</option>
                                    </select>
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Assign this test to a category for organization</div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="testTags" class="form-label">Tags</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-tag"></i></span>
                                    <input type="text" class="form-control" id="testTags" name="TagNames" 
                                           placeholder="Enter tags separated by commas">
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Add tags to help categorize this test (comma separated)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Scheduling Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-calendar-alt me-2"></i>Test Scheduling
                        </h6>

                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="isScheduled" name="IsScheduled">
                                <label class="form-check-label" for="isScheduled">
                                    <i class="fas fa-calendar-alt me-2"></i>Schedule this test
                                </label>
                            </div>
                            <div class="form-text">Automatically publish and close the test at specific times</div>
                        </div>

                        <div class="scheduling-fields" id="schedulingFields" style="display: none;">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="scheduledStartDate" class="form-label">Start Date & Time</label>
                                    <input type="datetime-local" class="form-control" id="scheduledStartDate" name="ScheduledStartDate">
                                    <div class="form-text">When the test becomes available to students</div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="scheduledEndDate" class="form-label">End Date & Time</label>
                                    <input type="datetime-local" class="form-control" id="scheduledEndDate" name="ScheduledEndDate">
                                    <div class="form-text">When the test automatically closes</div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="autoPublish" name="AutoPublish">
                                        <label class="form-check-label" for="autoPublish">
                                            <i class="fas fa-play me-2"></i>Auto-publish at start time
                                        </label>
                                        <div class="form-text">Automatically make the test available when start time is reached</div>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="autoClose" name="AutoClose">
                                        <label class="form-check-label" for="autoClose">
                                            <i class="fas fa-stop me-2"></i>Auto-close at end time
                                        </label>
                                        <div class="form-text">Automatically close the test when end time is reached</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Live Preview Section -->
                    <div class="preview-section">
                        <h6 class="preview-title">
                            <i class="fas fa-eye me-2"></i>Live Preview
                        </h6>
                        <div class="preview-content">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="preview-item">
                                        <span class="preview-label">Title:</span>
                                        <span class="preview-value" id="preview-title">Your test title</span>
                                    </div>
                                    <div class="preview-item">
                                        <span class="preview-label">Time Limit:</span>
                                        <span class="preview-value" id="preview-time">60 minutes</span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="preview-item">
                                        <span class="preview-label">Max Attempts:</span>
                                        <span class="preview-value" id="preview-attempts">1</span>
                                    </div>
                                    <div class="preview-item">
                                        <span class="preview-label">Question Order:</span>
                                        <span class="preview-value" id="preview-randomize">Sequential</span>
                                    </div>
                                </div>
                            </div>

                            <div class="preview-features" id="preview-features">
                                <!-- Dynamic feature tags will be added here -->
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary btn-create-test">
                        <i class="fas fa-save me-2"></i>Create Test
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Test Modal -->
<div class="modal fade" id="editTestModal" tabindex="-1" aria-labelledby="editTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTestModalLabel">
                    <i class="fas fa-edit me-2 text-warning"></i>Edit Test
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editTestForm" novalidate>
                <input type="hidden" id="editTestId" name="Id">
                <div class="modal-body">
                    <!-- Basic Information Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-info-circle me-2"></i>Basic Information
                        </h6>

                        <div class="row">
                            <div class="col-12 mb-3">
                                <label for="editTestName" class="form-label">Test Title <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-heading"></i></span>
                                    <input type="text" class="form-control" id="editTestName" name="TestName" required
                                           placeholder="Enter a descriptive title for your test">
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-12 mb-3">
                                <label for="editTestDescription" class="form-label">Description</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-align-left"></i></span>
                                    <textarea class="form-control" id="editTestDescription" name="Description" rows="3"
                                              placeholder="Enter instructions or details about the test"></textarea>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Settings Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-cog me-2"></i>Test Settings
                        </h6>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTimeLimit" class="form-label">Time Limit (minutes) <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                    <input type="number" class="form-control" id="editTimeLimit" name="TimeLimit"
                                           min="1" max="180" required>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="editMaxAttempts" class="form-label">Max Attempts <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-redo"></i></span>
                                    <input type="number" class="form-control" id="editMaxAttempts" name="MaxAttempts"
                                           min="1" max="10" required>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="editRandomizeQuestions"
                                           name="RandomizeQuestions">
                                    <label class="form-check-label" for="editRandomizeQuestions">
                                        <i class="fas fa-random me-2"></i>Randomize Question Order
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="editIsLocked" name="IsLocked">
                                    <label class="form-check-label" for="editIsLocked">
                                        <i class="fas fa-lock me-2"></i>Lock Test
                                    </label>
                                </div>
                                <div class="form-text">Locked tests cannot be taken by students</div>
                            </div>
                        </div>
                    </div>

                    <!-- Organization Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-tags me-2"></i>Organization
                        </h6>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editTestCategory" class="form-label">Category</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-folder"></i></span>
                                    <select class="form-select" id="editTestCategory" name="CategoryId">
                                        <option value="">Select a category...</option>
                                        <!-- Categories will be loaded dynamically -->
                                    </select>
                                </div>
                                <div class="invalid-feedback"></div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="editTestTags" class="form-label">Tags</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-tag"></i></span>
                                    <input type="text" class="form-control" id="editTestTags" name="TagNames" 
                                           placeholder="Enter tags separated by commas">
                                </div>
                                <div class="invalid-feedback"></div>
                                <div class="form-text">Add tags to help categorize this test (comma separated)</div>
                            </div>
                        </div>
                    </div>

                    <!-- Scheduling Section -->
                    <div class="form-section">
                        <h6 class="form-section-title">
                            <i class="fas fa-calendar-alt me-2"></i>Test Scheduling
                        </h6>

                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="editIsScheduled" name="IsScheduled">
                                <label class="form-check-label" for="editIsScheduled">
                                    <i class="fas fa-calendar-alt me-2"></i>Schedule this test
                                </label>
                            </div>
                            <div class="form-text">Automatically publish and close the test at specific times</div>
                        </div>

                        <div class="scheduling-fields" id="editSchedulingFields" style="display: none;">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="editScheduledStartDate" class="form-label">Start Date & Time</label>
                                    <input type="datetime-local" class="form-control" id="editScheduledStartDate" name="ScheduledStartDate">
                                    <div class="form-text">When the test becomes available to students</div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="editScheduledEndDate" class="form-label">End Date & Time</label>
                                    <input type="datetime-local" class="form-control" id="editScheduledEndDate" name="ScheduledEndDate">
                                    <div class="form-text">When the test automatically closes</div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="editAutoPublish" name="AutoPublish">
                                        <label class="form-check-label" for="editAutoPublish">
                                            <i class="fas fa-play me-2"></i>Auto-publish at start time
                                        </label>
                                        <div class="form-text">Automatically make the test available when start time is reached</div>
                                    </div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="editAutoClose" name="AutoClose">
                                        <label class="form-check-label" for="editAutoClose">
                                            <i class="fas fa-stop me-2"></i>Auto-close at end time
                                        </label>
                                        <div class="form-text">Automatically close the test when end time is reached</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary btn-update-test">
                        <i class="fas fa-save me-2"></i>Update Test
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Test Modal -->
<div class="modal fade" id="deleteTestModal" tabindex="-1" aria-labelledby="deleteTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteTestModalLabel">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                    Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Are you sure you want to delete the test <strong>"<span id="deleteTestName"></span>"</strong>?</p>
                <div class="alert alert-warning border-0">
                    <i class="fas fa-info-circle me-2"></i>
                    This action cannot be undone and will permanently delete all questions and student attempts.
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTest">
                    <i class="fas fa-trash me-2"></i>Delete Test
                </button>
            </div>
        </div>
    </div>
</div>



<!-- Styles moved to external CSS file -->
@section Scripts {
<script>
    // Archive/Unarchive functionality - defined globally for onclick handlers
    window.toggleArchiveTest = async function(testId) {
        // Debug logging
        console.log('toggleArchiveTest called with ID:', testId);
        
        if (!testId) {
            console.error('Test ID is null or undefined');
            showToast('Error: Test ID not provided', 'error');
            return;
        }
        
        const testCard = document.querySelector(`[data-test-id="${testId}"]`);
        const archiveBtn = testCard?.querySelector('[onclick*="toggleArchiveTest"]');
        
        // Store original button content
        const originalBtnContent = archiveBtn?.innerHTML;
        
        try {
            // Add loading state to button
            if (archiveBtn) {
                archiveBtn.disabled = true;
                archiveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Processing...';
            }

            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                         document.querySelector('meta[name="__RequestVerificationToken"]')?.getAttribute('content');

            const response = await fetch('@Url.Action("ToggleArchiveTestAjax", "Test")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-RequestVerificationToken': token
                },
                body: JSON.stringify({ Id: testId })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success) {
                console.log('Archive operation successful:', result.message);
                
                // Update the test card UI immediately
                const testCard = document.querySelector(`[data-test-id="${testId}"]`);
                if (testCard) {
                    // Update status badge
                    const statusBadge = testCard.querySelector('.status-badge');
                    
                    if (result.isArchived) {
                        statusBadge.className = 'status-badge status-archived';
                        statusBadge.innerHTML = '<i class="fas fa-archive"></i> Archived';
                    } else {
                        // Determine the correct active status
                        const isLocked = testCard.getAttribute('data-locked') === 'true';
                        if (isLocked) {
                            statusBadge.className = 'status-badge status-locked';
                            statusBadge.innerHTML = '<i class="fas fa-lock"></i> Locked';
                        } else {
                            statusBadge.className = 'status-badge status-active';
                            statusBadge.innerHTML = '<i class="fas fa-unlock"></i> Active';
                        }
                    }
                    
                    // Update archive button
                    const archiveBtn = testCard.querySelector('[onclick*="toggleArchiveTest"]');
                    
                    if (result.isArchived) {
                        archiveBtn.title = 'Unarchive Test';
                        archiveBtn.innerHTML = '<i class="fas fa-box-open me-1"></i>Unarchive';
                    } else {
                        archiveBtn.title = 'Archive Test';
                        archiveBtn.innerHTML = '<i class="fas fa-archive me-1"></i>Archive';
                    }
                    
                    // Update data attributes
                    testCard.setAttribute('data-archived', result.isArchived.toString());
                    
                    // Immediately hide the card with animation if it doesn't match current view
                    const showingArchived = window.filterState?.showArchived || false;
                    if ((showingArchived && !result.isArchived) || (!showingArchived && result.isArchived)) {
                        testCard.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                        testCard.style.opacity = '0';
                        testCard.style.transform = 'scale(0.95)';
                        setTimeout(() => {
                            testCard.style.display = 'none';
                        }, 300);
                    }
                }
                
            } else {
                console.error('Archive operation failed:', result.message);
                alert(result.message || 'Error updating archive status');
            }
        } catch (error) {
            console.error('Error toggling archive status:', error);
            alert('An error occurred while updating the archive status');
        } finally {
            // Reset button state
            if (archiveBtn) {
                archiveBtn.disabled = false;
                archiveBtn.innerHTML = originalBtnContent;
            }
        }
    };

    document.addEventListener('DOMContentLoaded', function() {
        // Global variables
        let currentTestId = null;

        // Initialize components
        const createTestModal = new bootstrap.Modal(document.getElementById('createTestModal'));
        const editTestModal = new bootstrap.Modal(document.getElementById('editTestModal'));
        const deleteTestModal = new bootstrap.Modal(document.getElementById('deleteTestModal'));

        // Form elements
        const createTestForm = document.getElementById('createTestForm');
        const editTestForm = document.getElementById('editTestForm');
        
        // Set up scheduling event listeners
        const isScheduledCheckbox = document.getElementById('isScheduled');
        const editIsScheduledCheckbox = document.getElementById('editIsScheduled');
        
        if (isScheduledCheckbox) {
            isScheduledCheckbox.addEventListener('change', toggleSchedulingFields);
        }
        
        if (editIsScheduledCheckbox) {
            editIsScheduledCheckbox.addEventListener('change', toggleEditSchedulingFields);
        }

        // Utility functions

        function clearFormErrors(form) {
            const inputs = form.querySelectorAll('.form-control');
            const feedbacks = form.querySelectorAll('.invalid-feedback');

            inputs.forEach(input => {
                input.classList.remove('is-invalid');
            });

            feedbacks.forEach(feedback => {
                feedback.textContent = '';
            });
        }

        function showFormErrors(form, errors) {
            clearFormErrors(form);

            errors.forEach(error => {
                const input = form.querySelector(`[name="${error.Field}"]`);
                const feedback = input ? input.parentElement.querySelector('.invalid-feedback') : null;

                if (input && feedback) {
                    input.classList.add('is-invalid');
                    feedback.textContent = error.Message;
                }
            });
        }

        function showToast(message, type = 'success') {
            // Create toast container if it doesn't exist
            let toastContainer = document.querySelector('.toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container';
                document.body.appendChild(toastContainer);
            }

            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <div class="toast-body d-flex align-items-center p-3">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'exclamation-triangle'} me-2"></i>
                    <span>${message}</span>
                </div>
            `;

            toastContainer.appendChild(toast);

            // Show toast
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateX(0)';
            }, 100);

            // Hide toast after 4 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 4000);
        }

        function showSharingSuccessModal(message, shareUrl) {
            // Update the sharing success modal with the URL and message
            document.getElementById('shareSuccessMessage').textContent = message;
            document.getElementById('shareUrl').value = shareUrl;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('shareSuccessModal'));
            modal.show();
        }

        // Scheduling functionality
        function toggleSchedulingFields() {
            const isScheduled = document.getElementById('isScheduled').checked;
            const schedulingFields = document.getElementById('schedulingFields');
            
            if (isScheduled) {
                schedulingFields.style.display = 'block';
                // Set default start time to current time + 1 hour
                const now = new Date();
                now.setHours(now.getHours() + 1);
                const startInput = document.getElementById('scheduledStartDate');
                if (startInput && !startInput.value) {
                    startInput.value = now.toISOString().slice(0, 16);
                }
                // Set default end time to start time + 2 hours
                const endTime = new Date(now);
                endTime.setHours(endTime.getHours() + 2);
                const endInput = document.getElementById('scheduledEndDate');
                if (endInput && !endInput.value) {
                    endInput.value = endTime.toISOString().slice(0, 16);
                }
            } else {
                schedulingFields.style.display = 'none';
            }
        }

        function toggleEditSchedulingFields() {
            const isScheduled = document.getElementById('editIsScheduled').checked;
            const schedulingFields = document.getElementById('editSchedulingFields');
            
            if (isScheduled) {
                schedulingFields.style.display = 'block';
            } else {
                schedulingFields.style.display = 'none';
            }
        }

        function copyShareUrl() {
            const shareUrlInput = document.getElementById('shareUrl');
            shareUrlInput.select();
            shareUrlInput.setSelectionRange(0, 99999); // For mobile devices
            navigator.clipboard.writeText(shareUrlInput.value);
            showToast('Share URL copied to clipboard!', 'success');
        }

        // Enhanced AJAX-based search and filter functionality
        const searchInput = document.getElementById('searchTests');
        const sortSelect = document.getElementById('sortTests');
        const categoryFilter = document.getElementById('categoryFilter');
        const tagFilter = document.getElementById('tagFilter');
        const archiveToggle = document.getElementById('archiveToggle');
        
        let searchTimeout;
        let lastSearchTerm = '';
        let currentShowArchived = archiveToggle ? archiveToggle.dataset.showArchived === 'true' : false;

        // Unified filter state
        const filterState = {
            search: '',
            category: '',
            tag: '',
            showArchived: currentShowArchived,
            sort: 'recent'
        };

        if (searchInput) {
            // Add debounced search
            searchInput.addEventListener('input', function(e) {
                clearTimeout(searchTimeout);
                const term = e.target.value.trim();
                
                if (term === lastSearchTerm) return;
                lastSearchTerm = term;
                filterState.search = term;
                
                searchTimeout = setTimeout(() => {
                    loadFilteredTests();
                }, 300);
            });
            
            // Add keyboard shortcuts
            searchInput.addEventListener('keydown', function(e) {
                switch(e.key) {
                    case 'Escape':
                        this.value = '';
                        lastSearchTerm = '';
                        filterState.search = '';
                        loadFilteredTests();
                        this.blur();
                        break;
                    case 'Enter':
                        e.preventDefault();
                        loadFilteredTests();
                        break;
                }
            });
        }

        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                filterState.sort = this.value;
                loadFilteredTests();
            });
        }

        if (categoryFilter) {
            categoryFilter.addEventListener('change', function() {
                filterState.category = this.value;
                loadFilteredTests();
            });
        }

        if (tagFilter) {
            tagFilter.addEventListener('change', function() {
                filterState.tag = this.value;
                loadFilteredTests();
            });
        }

        if (archiveToggle) {
            archiveToggle.addEventListener('click', function() {
                // Add loading state
                const originalContent = this.innerHTML;
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Loading...';
                this.disabled = true;

                // Toggle state
                filterState.showArchived = !filterState.showArchived;
                updateArchiveToggleUI();
                
                // Load filtered tests and re-enable button
                loadFilteredTests().finally(() => {
                    // Re-enable button (updateArchiveToggleUI will set correct content)
                    this.disabled = false;
                    updateArchiveToggleUI();
                });
            });
        }

        // AJAX-based filtering function
        async function loadFilteredTests() {
            try {
                // Add loading indicator
                const container = document.getElementById('testsGrid');
                if (container) {
                    container.style.opacity = '0.6';
                    container.style.pointerEvents = 'none';
                }

                const params = new URLSearchParams({
                    showArchived: filterState.showArchived,
                    categoryId: filterState.category,
                    tagId: filterState.tag,
                    search: filterState.search
                });

                const response = await fetch(`@Url.Action("GetFilteredTestsAjax", "Test")?${params}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    renderFilteredTests(result.data);
                    updateResultsCount(result.data.length, result.data.length);
                    console.log(`Loaded ${result.data.length} tests successfully`);
                } else {
                    console.error('Failed to load tests:', result.message);
                    // Show simple error without complex toasts
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-warning text-center';
                    errorDiv.innerHTML = `<i class="fas fa-exclamation-triangle me-2"></i>${result.message || 'Error loading tests'}`;
                    container.innerHTML = '';
                    container.appendChild(errorDiv);
                }
            } catch (error) {
                console.error('Error loading filtered tests:', error);
                // Show simple error without complex toasts
                const container = document.getElementById('testsGrid');
                if (container) {
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'alert alert-danger text-center';
                    errorDiv.innerHTML = '<i class="fas fa-times-circle me-2"></i>Failed to load tests. Please refresh the page.';
                    container.innerHTML = '';
                    container.appendChild(errorDiv);
                }
            } finally {
                // Remove loading indicator
                const container = document.getElementById('testsGrid');
                if (container) {
                    container.style.opacity = '1';
                    container.style.pointerEvents = 'auto';
                }
            }
        }

        function renderFilteredTests(tests) {
            const container = document.getElementById('testsGrid');
            if (!container) return;

            // Sort tests based on current sort selection
            const sortedTests = sortTests(tests, filterState.sort);

            // Clear existing content
            container.innerHTML = '';

            if (sortedTests.length === 0) {
                container.innerHTML = `
                    <div class="empty-state col-12">
                        <div class="empty-state-content">
                            <div class="empty-state-icon">
                                <i class="fas fa-search"></i>
                            </div>
                            <h3 class="empty-state-title">No tests found</h3>
                            <p class="empty-state-description">
                                ${filterState.showArchived ? 
                                    'No archived tests match your current filters.' : 
                                    'No active tests match your current filters.'}
                            </p>
                        </div>
                    </div>
                `;
                return;
            }

            // Render test cards
            sortedTests.forEach((test, index) => {
                const card = createTestCard(test);
                card.style.animationDelay = `${index * 50}ms`;
                container.appendChild(card);
            });
        }

        function sortTests(tests, sortBy) {
            return [...tests].sort((a, b) => {
                switch (sortBy) {
                    case 'name':
                        return a.name.localeCompare(b.name);
                    case 'questions':
                        return b.questionCount - a.questionCount;
                    case 'attempts':
                        return b.attemptCount - a.attemptCount;
                    case 'locked':
                        return b.isLocked - a.isLocked;
                    case 'recent':
                    default:
                        return new Date(b.createdDate) - new Date(a.createdDate);
                }
            });
        }

        function createTestCard(test) {
            const card = document.createElement('div');
            card.className = 'test-card';
            card.dataset.testId = test.id;
            card.dataset.testName = test.name;
            card.dataset.questionCount = test.questionCount;
            card.dataset.attemptCount = test.attemptCount;
            card.dataset.locked = test.isLocked;
            card.dataset.categoryId = test.categoryId || '';
            card.dataset.tags = test.tags.map(t => t.name).join(',');
            card.dataset.created = new Date(test.createdDate).getTime();

            const statusClass = test.isLocked ? 'status-locked' : 'status-active';
            const statusIcon = test.isLocked ? 'fa-lock' : 'fa-unlock';
            const statusText = test.isLocked ? 'Locked' : 'Active';

            card.innerHTML = `
                <div class="test-card-header">
                    <div class="card-header-content">
                        <h5 class="test-title">${escapeHtml(test.name)}</h5>
                        <div class="test-actions">
                            <div class="dropdown">
                                <button class="btn btn-link btn-sm" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="@Url.Action("Details", "Test")/${test.id}">
                                        <i class="fas fa-eye me-2"></i>View Details
                                    </a></li>
                                    <li><a class="dropdown-item edit-test-btn" href="#" data-test-id="${test.id}">
                                        <i class="fas fa-edit me-2"></i>Edit Test
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item clone-test-btn" href="#" data-test-id="${test.id}">
                                        <i class="fas fa-copy me-2"></i>Clone Test
                                    </a></li>
                                    <li><a class="dropdown-item toggle-lock-btn" href="#" data-test-id="${test.id}" data-is-locked="${test.isLocked}">
                                        <i class="fas ${test.isLocked ? 'fa-unlock' : 'fa-lock'} me-2"></i>${test.isLocked ? 'Unlock' : 'Lock'} Test
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item delete-test-btn text-danger" href="#" data-test-id="${test.id}" data-test-name="${escapeHtml(test.name)}">
                                        <i class="fas fa-trash me-2"></i>Delete Test
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <span class="status-badge ${statusClass}">
                        <i class="fas ${statusIcon}"></i> ${statusText}
                    </span>
                </div>
                
                <div class="test-card-body">
                    <p class="test-description">${escapeHtml(test.description || 'No description provided')}</p>
                    
                    <div class="test-stats">
                        <div class="stat-item">
                            <span class="stat-label">Questions</span>
                            <span class="stat-value">${test.questionCount}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Avg Score</span>
                            <span class="stat-value">${test.averageScore}%</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Attempts</span>
                            <span class="stat-value">${test.attemptCount}</span>
                        </div>
                    </div>
                    
                    ${test.categoryName ? `<div class="test-category">
                        <span class="category-badge">${escapeHtml(test.categoryName)}</span>
                    </div>` : ''}
                    
                    ${test.tags.length > 0 ? `<div class="test-tags">
                        ${test.tags.map(tag => `<span class="tag-badge">${escapeHtml(tag.name)}</span>`).join('')}
                    </div>` : ''}
                </div>
                
                <div class="test-card-footer">
                    <div class="primary-actions">
                        <a href="@Url.Action("Details", "Test")/${test.id}" class="btn btn-primary">
                            <i class="fas fa-eye me-2"></i>View Details
                        </a>
                        <a href="@Url.Action("AllAttempts", "Test")?testId=${test.id}" class="btn btn-outline-success">
                            <i class="fas fa-chart-bar me-2"></i>View Results
                        </a>
                    </div>
                    <div class="test-features">
                        <span class="feature-tag created-date">
                            <i class="fas fa-calendar-alt me-1"></i>
                            ${new Date(test.createdDate).toLocaleDateString()}
                        </span>
                    </div>
                </div>
            `;

            return card;
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function updateArchiveToggleUI() {
            if (!archiveToggle) return;
            
            const icon = archiveToggle.querySelector('i');
            const text = archiveToggle.querySelector('#archiveToggleText');
            
            if (filterState.showArchived) {
                archiveToggle.className = 'btn btn-outline-secondary';
                icon.className = 'fas fa-box me-2';
                text.textContent = 'Show Active Tests';
            } else {
                archiveToggle.className = 'btn btn-outline-primary';
                icon.className = 'fas fa-archive me-2';
                text.textContent = 'Show Archived Tests';
            }
            
            archiveToggle.dataset.showArchived = filterState.showArchived;
        }
        
        function updateResultsCount(visible, total) {
            let countElement = document.getElementById('resultsCount');
            if (!countElement) {
                const controlsSection = document.querySelector('.controls-section .controls-content');
                if (controlsSection) {
                    countElement = document.createElement('div');
                    countElement.id = 'resultsCount';
                    countElement.className = 'results-count text-muted';
                    controlsSection.appendChild(countElement);
                }
            }
            
            if (countElement) {
                const archiveText = filterState.showArchived ? 'archived' : 'active';
                countElement.textContent = `Showing ${visible} ${archiveText} test${visible !== 1 ? 's' : ''}`;
            }
        }

        // Category and Tag Management Functions
        async function loadCategories() {
            try {
                const response = await fetch('@Url.Action("GetUserCategories", "Category")');
                const result = await response.json();
                
                if (result.success) {
                    const categoryFilter = document.getElementById('categoryFilter');
                    const testCategorySelect = document.getElementById('testCategory');
                    
                    // Clear existing options (keep default options)
                    if (categoryFilter) {
                        categoryFilter.innerHTML = '<option value="">All Categories</option>';
                    }
                    if (testCategorySelect) {
                        testCategorySelect.innerHTML = '<option value="">No Category</option>';
                    }
                    
                    // Add categories to both dropdowns
                    result.data.forEach(category => {
                        if (categoryFilter) {
                            const filterOption = new Option(category.name, category.id);
                            categoryFilter.appendChild(filterOption);
                        }
                        if (testCategorySelect) {
                            const createOption = new Option(category.name, category.id);
                            testCategorySelect.appendChild(createOption);
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        async function loadTags() {
            try {
                const response = await fetch('@Url.Action("GetUserTags", "Category")');
                const result = await response.json();
                
                if (result.success) {
                    const tagFilter = document.getElementById('tagFilter');
                    
                    // Clear existing options (keep "All Tags")
                    if (tagFilter) {
                        tagFilter.innerHTML = '<option value="">All Tags</option>';
                        
                        // Add tags to filter dropdown
                        result.data.forEach(tag => {
                            const option = new Option(tag.name, tag.id);
                            tagFilter.appendChild(option);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading tags:', error);
            }
        }

        async function loadCategoriesForEdit() {
            try {
                const response = await fetch('@Url.Action("GetUserCategories", "Category")');
                const result = await response.json();
                
                if (result.success) {
                    const editCategorySelect = document.getElementById('editTestCategory');
                    
                    // Clear existing options and add default
                    if (editCategorySelect) {
                        editCategorySelect.innerHTML = '<option value="">No Category</option>';
                        
                        // Add categories to edit dropdown
                        result.data.forEach(category => {
                            const option = new Option(category.name, category.id);
                            editCategorySelect.appendChild(option);
                        });
                    }
                }
            } catch (error) {
                console.error('Error loading categories for edit:', error);
            }
        }

        function addClonedTestCardToDOM(newTestId, newTestName, originalTestId) {
            // Find the original test card that was cloned
            const originalCard = document.querySelector(`[data-test-id="${originalTestId}"]`);
            if (originalCard) {
                // Clone the card element
                const newCard = originalCard.cloneNode(true);

                // Update the new card's data
                newCard.dataset.testId = newTestId;
                newCard.dataset.testName = newTestName;
                newCard.dataset.questionCount = "0"; // New test has no questions
                newCard.dataset.attemptCount = "0"; // New test has no attempts
                newCard.dataset.locked = "false"; // New tests start unlocked

                // Update the title
                const titleElement = newCard.querySelector('.test-title');
                if (titleElement) titleElement.textContent = newTestName;

                // Update status to unlocked
                const statusBadge = newCard.querySelector('.status-badge');
                if (statusBadge) {
                    statusBadge.innerHTML = '<i class="fas fa-unlock"></i> Active';
                    statusBadge.className = 'status-badge status-active';
                }

                // Update stats (0 questions, 0 attempts)
                const statValues = newCard.querySelectorAll('.stat-value');
                if (statValues.length >= 3) {
                    statValues[0].textContent = "0"; // Questions
                    statValues[2].textContent = "0"; // Attempts
                }

                // Update all data attributes and IDs
                const elementsWithTestId = newCard.querySelectorAll('[data-test-id]');
                elementsWithTestId.forEach(el => {
                    el.dataset.testId = newTestId;
                });

                const elementsWithTestName = newCard.querySelectorAll('[data-test-name]');
                elementsWithTestName.forEach(el => {
                    el.dataset.testName = newTestName;
                });


                // Update lock button
                const lockButton = newCard.querySelector('.lock-test-btn');
                if (lockButton) {
                    lockButton.dataset.testId = newTestId;
                    lockButton.dataset.locked = 'false';
                    lockButton.innerHTML = '<i class="fas fa-lock me-2"></i>Lock Test';
                }

                // Update edit button
                const editButton = newCard.querySelector('.edit-test-btn');
                if (editButton) {
                    editButton.dataset.testId = newTestId;
                }

                // Update delete button
                const deleteButton = newCard.querySelector('.delete-test-btn');
                if (deleteButton) {
                    deleteButton.dataset.testId = newTestId;
                    deleteButton.dataset.testName = newTestName;
                }

                // Update clone button
                const cloneButton = newCard.querySelector('.clone-test-btn');
                if (cloneButton) {
                    cloneButton.dataset.testId = newTestId;
                    cloneButton.dataset.testName = newTestName;
                }

                // Update all links
                const detailsLinks = newCard.querySelectorAll('a[href*="Details"]');
                detailsLinks.forEach(link => {
                    const baseUrl = '@Url.Action("Details", "Test")';
                    link.href = `${baseUrl}/${newTestId}`;
                });

                const attemptsLinks = newCard.querySelectorAll('a[href*="AllAttempts"]');
                attemptsLinks.forEach(link => {
                    const baseUrl = '@Url.Action("AllAttempts", "Test")';
                    link.href = `${baseUrl}?testId=${newTestId}`;
                });

                const analyticsLinks = newCard.querySelectorAll('a[href*="Analytics"]');
                analyticsLinks.forEach(link => {
                    const baseUrl = '@Url.Action("Analytics", "Test")';
                    link.href = `${baseUrl}/${newTestId}`;
                });

                // Remove selected class if it exists
                newCard.classList.remove('selected');

                // Insert the new card after the original with animation
                const testsGrid = document.getElementById('testsGrid');
                if (testsGrid) {
                    // Add the card at the beginning to make it more visible
                    testsGrid.insertBefore(newCard, testsGrid.firstChild);

                    // Add entrance animation
                    newCard.style.opacity = '0';
                    newCard.style.transform = 'scale(0.8) translateY(-20px)';
                    newCard.style.transition = 'all 0.5s ease';
                    
                    // Trigger animation
                    setTimeout(() => {
                        newCard.style.opacity = '1';
                        newCard.style.transform = 'scale(1) translateY(0)';
                    }, 100);

                    // Add a subtle highlight effect
                    setTimeout(() => {
                        newCard.style.boxShadow = '0 0 20px rgba(37, 99, 235, 0.3)';
                        setTimeout(() => {
                            newCard.style.boxShadow = '';
                        }, 2000);
                    }, 600);
                }

                // Re-initialize event listeners for the new card
                initializeEventListeners();
            }
        }

        // Initialize event listeners for existing elements
        function initializeEventListeners() {
            initializeCheckboxes();
            initializeSelectAllCheckbox();
            initializeEditButtons();
            initializeDeleteButtons();
            initializeLockButtons();
            initializeCloneButtons();
            initializeShareButtons();
        }

        // Checkbox selection functionality
        function initializeCheckboxes() {
            const testCheckboxes = document.querySelectorAll('.test-checkbox');

            testCheckboxes.forEach(checkbox => {
                // Remove existing listeners to prevent duplicates
                const newCheckbox = checkbox.cloneNode(true);
                checkbox.parentNode.replaceChild(newCheckbox, checkbox);
                
                newCheckbox.addEventListener('change', function() {
                    const testId = this.dataset.testId;
                    const testCard = this.closest('.test-card');

                    if (this.checked) {
                        selectedTests.add(testId);
                        testCard.classList.add('selected');
                    } else {
                        selectedTests.delete(testId);
                        testCard.classList.remove('selected');
                    }

                    updateBulkActionsBar();
                });
            });
        }

        // Select All checkbox functionality
        function initializeSelectAllCheckbox() {
            const selectAllCheckbox = document.getElementById('selectAllTests');
            if (selectAllCheckbox) {
                // Remove existing listener to prevent duplicates
                const newSelectAllCheckbox = selectAllCheckbox.cloneNode(true);
                selectAllCheckbox.parentNode.replaceChild(newSelectAllCheckbox, selectAllCheckbox);
                
                newSelectAllCheckbox.addEventListener('change', function() {
                    selectAllTests();
                });
            }
        }

        function updateBulkActionsBar() {
            const bulkActionsBar = document.getElementById('bulkActionsBar');
            const bulkSelectedCount = bulkActionsBar ? bulkActionsBar.querySelector('.bulk-selected-count') : null;
            const selectAllCheckbox = document.getElementById('selectAllTests');
            const count = selectedTests.size;
            const totalTestsCount = document.querySelectorAll('.test-checkbox:not(:disabled)').length;

            if (count > 0) {
                if (bulkActionsBar) {
                    bulkActionsBar.style.display = 'block';
                }
                if (bulkSelectedCount) {
                    bulkSelectedCount.textContent = `${count} test${count !== 1 ? 's' : ''} selected`;
                }
            } else {
                if (bulkActionsBar) {
                    bulkActionsBar.style.display = 'none';
                }
            }

            // Update Select All checkbox state
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = count > 0 && count === totalTestsCount;
                selectAllCheckbox.indeterminate = count > 0 && count < totalTestsCount;
            }
        }

        // Edit Test functionality
        function initializeEditButtons() {
            const editTestButtons = document.querySelectorAll('.edit-test-btn');
            editTestButtons.forEach(btn => {
                // Remove existing listeners to prevent duplicates
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                
                newBtn.addEventListener('click', async function() {
                    const testId = this.dataset.testId;
                    currentTestId = testId;

                    try {
                        const response = await fetch(`@Url.Action("GetTestDataAjax", "Test")?id=${testId}`, {
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Load categories into dropdown
                            await loadCategoriesForEdit();
                            
                            // Populate the form
                            document.getElementById('editTestId').value = result.data.id;
                            document.getElementById('editTestName').value = result.data.testName;
                            document.getElementById('editTestDescription').value = result.data.description || '';
                            document.getElementById('editTimeLimit').value = result.data.timeLimit;
                            document.getElementById('editMaxAttempts').value = result.data.maxAttempts;
                            document.getElementById('editRandomizeQuestions').checked = result.data.randomizeQuestions;
                            document.getElementById('editIsLocked').checked = result.data.isLocked;
                            
                            // Populate category and tags
                            if (result.data.categoryId) {
                                document.getElementById('editTestCategory').value = result.data.categoryId;
                            }
                            if (result.data.tagNames && result.data.tagNames.length > 0) {
                                document.getElementById('editTestTags').value = result.data.tagNames.join(', ');
                            }
                            
                            // Populate scheduling fields
                            document.getElementById('editIsScheduled').checked = result.data.isScheduled;
                            if (result.data.scheduledStartDate) {
                                // Convert to local datetime-local format
                                const startDate = new Date(result.data.scheduledStartDate);
                                document.getElementById('editScheduledStartDate').value = startDate.toISOString().slice(0, 16);
                            }
                            if (result.data.scheduledEndDate) {
                                // Convert to local datetime-local format
                                const endDate = new Date(result.data.scheduledEndDate);
                                document.getElementById('editScheduledEndDate').value = endDate.toISOString().slice(0, 16);
                            }
                            document.getElementById('editAutoPublish').checked = result.data.autoPublish;
                            document.getElementById('editAutoClose').checked = result.data.autoClose;
                            
                            // Show/hide scheduling fields based on checkbox
                            toggleEditSchedulingFields();
                            
                            editTestModal.show();
                        } else {
                            showToast(result.message || 'Error loading test data', 'error');
                        }
                    } catch (error) {
                        console.error('Error loading test data:', error);
                        showToast('Error loading test data', 'error');
                    }
                });
            });
        }

        // Delete Test functionality
        function initializeDeleteButtons() {
            const deleteTestButtons = document.querySelectorAll('.delete-test-btn');

            deleteTestButtons.forEach(btn => {
                // Remove existing listeners to prevent duplicates
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                
                newBtn.addEventListener('click', function() {
                    const testId = this.dataset.testId;
                    const testName = this.dataset.testName;

                    currentTestId = testId;
                    document.getElementById('deleteTestName').textContent = testName;
                    deleteTestModal.show();
                });
            });
        }

        // Lock/Unlock Test functionality
        function initializeLockButtons() {
            const lockTestButtons = document.querySelectorAll('.lock-test-btn');
            lockTestButtons.forEach(btn => {
                // Remove existing listeners to prevent duplicates
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                
                newBtn.addEventListener('click', async function() {
                    const testId = this.dataset.testId;

                    try {
                        const response = await fetch(`@Url.Action("LockTestAjax", "Test")`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({ Id: testId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            showToast(result.message, 'success');

                            // Update the UI
                            const testCard = document.querySelector(`[data-test-id="${testId}"]`);
                            const statusBadge = testCard.querySelector('.status-badge');
                            const dropdownButton = this;

                            if (result.isLocked) {
                                statusBadge.innerHTML = '<i class="fas fa-lock"></i> Locked';
                                statusBadge.className = 'status-badge status-locked';
                                dropdownButton.innerHTML = '<i class="fas fa-unlock me-2"></i>Unlock Test';
                                dropdownButton.dataset.locked = 'true';
                                testCard.dataset.locked = 'true';
                            } else {
                                statusBadge.innerHTML = '<i class="fas fa-unlock"></i> Active';
                                statusBadge.className = 'status-badge status-active';
                                dropdownButton.innerHTML = '<i class="fas fa-lock me-2"></i>Lock Test';
                                dropdownButton.dataset.locked = 'false';
                                testCard.dataset.locked = 'false';
                            }
                        } else {
                            showToast(result.message || 'Error updating test status', 'error');
                        }
                    } catch (error) {
                        console.error('Error updating test status:', error);
                        showToast('Error updating test status', 'error');
                    }
                });
            });
        }

        // Clone Test functionality
        function initializeCloneButtons() {
            const cloneTestButtons = document.querySelectorAll('.clone-test-btn');
            cloneTestButtons.forEach(btn => {
                // Remove existing listeners to prevent duplicates
                const newBtn = btn.cloneNode(true);
                btn.parentNode.replaceChild(newBtn, btn);
                
                newBtn.addEventListener('click', async function() {
                    const testId = this.dataset.testId;
                    const testName = this.dataset.testName;

                    const submitButton = this;
                    const originalText = submitButton.innerHTML;

                    
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Cloning...';

                    try {
                        const response = await fetch(`@Url.Action("CloneTestAjax", "Test")`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({ Id: testId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            showToast(`${result.message}!`, 'success');
                            
                            // Add the cloned test to the DOM instead of refreshing
                            addClonedTestCardToDOM(result.newTestId, result.newTestName, testId);
                        } else {
                            showToast(result.message || 'Error cloning test', 'error');
                        }
                    } catch (error) {
                        console.error('Error cloning test:', error);
                        showToast('Error cloning test', 'error');
                    } finally {
                        
                        submitButton.disabled = false;
                        submitButton.innerHTML = originalText;
                    }
                });
            });
        }

        // Clear selection
        const clearSelectionBtn = document.getElementById('clearSelectionBtn');
        if (clearSelectionBtn) {
            clearSelectionBtn.addEventListener('click', function() {
                selectedTests.clear();
                const testCheckboxes = document.querySelectorAll('.test-checkbox');
                testCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                    checkbox.closest('.test-card').classList.remove('selected');
                });
                updateBulkActionsBar();
            });
        }

        // Create Test functionality
        if (createTestForm) {
            // Form inputs for live preview
            const titleInput = document.getElementById('testTitle');
            const descriptionInput = document.getElementById('testDescription');
            const timeLimitInput = document.getElementById('timeLimit');
            const maxAttemptsInput = document.getElementById('maxAttempts');
            const randomizeInput = document.getElementById('randomizeQuestions');

            // Preview elements
            const previewTitle = document.getElementById('preview-title');
            const previewTime = document.getElementById('preview-time');
            const previewAttempts = document.getElementById('preview-attempts');
            const previewRandomize = document.getElementById('preview-randomize');
            const previewFeatures = document.getElementById('preview-features');

            // Live preview updates
            function updatePreview() {
                const title = titleInput.value.trim() || 'Your test title';
                const timeLimit = timeLimitInput.value || '60';
                const maxAttempts = maxAttemptsInput.value || '1';
                const isRandomized = randomizeInput.checked;

                previewTitle.textContent = title;
                previewTime.textContent = `${timeLimit} minutes`;
                previewAttempts.textContent = maxAttempts;
                previewRandomize.textContent = isRandomized ? 'Randomized' : 'Sequential';

                // Update feature tags
                let featuresHTML = '';
                if (isRandomized) {
                    featuresHTML += '<span class="feature-tag"><i class="fas fa-random"></i> Randomized Questions</span>';
                }
                if (parseInt(maxAttempts) > 1) {
                    featuresHTML += '<span class="feature-tag"><i class="fas fa-redo"></i> Multiple Attempts</span>';
                }
                if (parseInt(timeLimit) >= 120) {
                    featuresHTML += '<span class="feature-tag"><i class="fas fa-clock"></i> Extended Time</span>';
                }
                previewFeatures.innerHTML = featuresHTML;
            }

            // Add event listeners for live preview
            titleInput.addEventListener('input', updatePreview);
            timeLimitInput.addEventListener('input', updatePreview);
            maxAttemptsInput.addEventListener('input', updatePreview);
            randomizeInput.addEventListener('change', updatePreview);

            // Form submission
            createTestForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const submitButton = this.querySelector('.btn-create-test');
                const originalText = submitButton.innerHTML;

                
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';
                clearFormErrors(this);

                try {
                    const data = {
                        Title: titleInput.value.trim(),
                        Description: descriptionInput.value.trim(),
                        TimeLimit: parseInt(timeLimitInput.value) || 60,
                        MaxAttempts: parseInt(maxAttemptsInput.value) || 1,
                        RandomizeQuestions: randomizeInput.checked,
                        CategoryId: document.getElementById('testCategory').value || null,
                        TagNames: document.getElementById('testTags').value.trim() ? 
                            document.getElementById('testTags').value.trim().split(',').map(tag => tag.trim()).filter(tag => tag) : []
                    };

                    const response = await fetch('@Url.Action("CreateAjax", "Test")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (result.success) {
                        createTestModal.hide();
                        showToast('Test created successfully! Redirecting to test details...', 'success');

                        // Redirect to test details after a short delay
                        setTimeout(() => {
                            window.location.href = `@Url.Action("Details", "Test")/${result.testId}`;
                        }, 500);
                    } else {
                        if (result.errors) {
                            showFormErrors(this, result.errors);
                        } else {
                            showToast(result.message || 'An error occurred', 'error');
                        }
                    }
                } catch (error) {
                    console.error('Error creating test:', error);
                    showToast('An error occurred while creating the test', 'error');
                } finally {
                    
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });

            // Reset form when modal is hidden
            document.getElementById('createTestModal').addEventListener('hidden.bs.modal', function() {
                createTestForm.reset();
                clearFormErrors(createTestForm);
                updatePreview();
            });

            // Focus title input when modal is shown
            document.getElementById('createTestModal').addEventListener('shown.bs.modal', function() {
                titleInput.focus();
                loadCategories();
            });

            // Initialize preview with default values
            updatePreview();
        }

        // Edit Test form submission
        if (editTestForm) {
            editTestForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const submitButton = this.querySelector('.btn-update-test');
                const originalText = submitButton.innerHTML;

                
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Updating...';
                clearFormErrors(this);

                try {
                    const data = {
                        Id: document.getElementById('editTestId').value,
                        TestName: document.getElementById('editTestName').value.trim(),
                        Description: document.getElementById('editTestDescription').value.trim(),
                        TimeLimit: parseInt(document.getElementById('editTimeLimit').value) || 60,
                        MaxAttempts: parseInt(document.getElementById('editMaxAttempts').value) || 1,
                        RandomizeQuestions: document.getElementById('editRandomizeQuestions').checked,
                        IsLocked: document.getElementById('editIsLocked').checked,
                        CategoryId: document.getElementById('editTestCategory').value || null,
                        TagNames: document.getElementById('editTestTags').value.trim() ? 
                            document.getElementById('editTestTags').value.trim().split(',').map(tag => tag.trim()).filter(tag => tag) : []
                    };

                    const response = await fetch('@Url.Action("EditAjax", "Test")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (result.success) {
                        editTestModal.hide();
                        showToast('Test updated successfully!', 'success');

                        // Refresh the filtered tests to show the updated test
                        loadFilteredTests();
                    } else {
                        if (result.errors) {
                            showFormErrors(this, result.errors);
                        } else {
                            showToast(result.message || 'An error occurred', 'error');
                        }
                    }
                } catch (error) {
                    console.error('Error updating test:', error);
                    showToast('An error occurred while updating the test', 'error');
                } finally {
                    
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });

            // Reset form when modal is hidden
            document.getElementById('editTestModal').addEventListener('hidden.bs.modal', function() {
                editTestForm.reset();
                clearFormErrors(editTestForm);
                currentTestId = null;
            });
        }

        // Delete confirmation
        const confirmDeleteBtn = document.getElementById('confirmDeleteTest');
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async function() {
                if (!currentTestId) return;

                const submitButton = this;
                const originalText = submitButton.innerHTML;

                
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';

                try {
                    const response = await fetch(`@Url.Action("DeleteAjax", "Test")`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ Id: currentTestId })
                    });

                    const result = await response.json();

                    if (result.success) {
                        deleteTestModal.hide();
                        showToast(result.message, 'success');

                        // Refresh the filtered tests
                        loadFilteredTests();
                    } else {
                        showToast(result.message || 'Error deleting test', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting test:', error);
                    showToast('Error deleting test', 'error');
                } finally {
                    
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                    currentTestId = null;
                }
            });
        }

        // Bulk actions functionality
        const bulkDeleteBtn = document.getElementById('bulkDeleteBtn');
        const bulkLockBtn = document.getElementById('bulkLockBtn');
        const bulkUnlockBtn = document.getElementById('bulkUnlockBtn');
        const confirmBulkDeleteBtn = document.getElementById('confirmBulkDelete');

        if (bulkDeleteBtn) {
            bulkDeleteBtn.addEventListener('click', function() {
                document.getElementById('bulkDeleteCount').textContent = selectedTests.size;
                bulkDeleteModal.show();
            });
        }

        if (confirmBulkDeleteBtn) {
            confirmBulkDeleteBtn.addEventListener('click', async function() {
                const testIds = Array.from(selectedTests);

                const submitButton = this;
                const originalText = submitButton.innerHTML;

                
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';

                try {
                    const response = await fetch(`@Url.Action("BulkDeleteTestsAjax", "Test")`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ TestIds: testIds })
                    });

                    const result = await response.json();

                    if (result.success) {
                        bulkDeleteModal.hide();
                        showToast(`${result.message}! Refreshing page...`, 'success');

                        // Remove selected test cards from DOM
                        removeSelectedTestCardsFromDOM();
                    } else {
                        showToast(result.message || 'Error deleting tests', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting tests:', error);
                    showToast('Error deleting tests', 'error');
                } finally {
                    
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });
        }

        // Bulk lock/unlock functionality
        async function bulkLockUnlock(lock) {
            const testIds = Array.from(selectedTests);

            if (testIds.length === 0) {
                showToast('No tests selected', 'warning');
                return;
            }

            

            try {
                const response = await fetch(`@Url.Action("BulkLockTestsAjax", "Test")`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ TestIds: testIds, Lock: lock })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(`Successfully ${lock ? 'locked' : 'unlocked'} ${result.updatedCount} test(s)!`, 'success');
                    
                    // Update test cards in DOM instead of full refresh
                    updateTestCardsLockStatus(testIds, lock);
                    
                    // Clear selection and hide bulk actions
                    selectedTests.clear();
                    updateBulkActionsVisibility();
                } else {
                    showToast(result.message || `Error ${lock ? 'locking' : 'unlocking'} tests`, 'error');
                }
            } catch (error) {
                console.error('Error in bulk lock operation:', error);
                showToast(`Error ${lock ? 'locking' : 'unlocking'} tests`, 'error');
            } finally {
                
            }
        }

        function updateTestCardsLockStatus(testIds, isLocked) {
            testIds.forEach(testId => {
                const testCard = document.querySelector(`[data-test-id="${testId}"]`);
                if (testCard) {
                    // Update status badge
                    const statusBadge = testCard.querySelector('.status-badge');
                    if (statusBadge) {
                        if (isLocked) {
                            statusBadge.innerHTML = '<i class="fas fa-lock"></i> Locked';
                            statusBadge.className = 'status-badge status-locked';
                        } else {
                            statusBadge.innerHTML = '<i class="fas fa-unlock"></i> Active';
                            statusBadge.className = 'status-badge status-active';
                        }
                    }

                    // Update data attributes
                    testCard.dataset.locked = isLocked.toString().toLowerCase();

                    // Update dropdown lock button
                    const lockBtn = testCard.querySelector('.lock-test-btn');
                    if (lockBtn) {
                        lockBtn.dataset.locked = isLocked.toString().toLowerCase();
                        const icon = lockBtn.querySelector('i');
                        if (icon) {
                            icon.className = `fas ${isLocked ? 'fa-unlock' : 'fa-lock'} me-2`;
                        }
                        lockBtn.innerHTML = `<i class="fas ${isLocked ? 'fa-unlock' : 'fa-lock'} me-2"></i>${isLocked ? 'Unlock' : 'Lock'} Test`;
                    }

                    // Uncheck the checkbox
                    const checkbox = testCard.querySelector('.test-checkbox');
                    if (checkbox) {
                        checkbox.checked = false;
                    }
                }
            });
        }

        if (bulkLockBtn) {
            bulkLockBtn.addEventListener('click', () => bulkLockUnlock(true));
        }

        if (bulkUnlockBtn) {
            bulkUnlockBtn.addEventListener('click', () => bulkLockUnlock(false));
        }

        // Bulk archive/unarchive functionality
        const bulkArchiveBtn = document.getElementById('bulkArchiveBtn');
        const bulkUnarchiveBtn = document.getElementById('bulkUnarchiveBtn');
        const confirmBulkArchiveBtn = document.getElementById('confirmBulkArchive');
        const confirmBulkUnarchiveBtn = document.getElementById('confirmBulkUnarchive');
        const bulkArchiveModal = new bootstrap.Modal(document.getElementById('bulkArchiveModal'));
        const bulkUnarchiveModal = new bootstrap.Modal(document.getElementById('bulkUnarchiveModal'));

        if (bulkArchiveBtn) {
            bulkArchiveBtn.addEventListener('click', function() {
                document.getElementById('bulkArchiveCount').textContent = selectedTests.size;
                bulkArchiveModal.show();
            });
        }

        if (bulkUnarchiveBtn) {
            bulkUnarchiveBtn.addEventListener('click', function() {
                document.getElementById('bulkUnarchiveCount').textContent = selectedTests.size;
                bulkUnarchiveModal.show();
            });
        }

        if (confirmBulkArchiveBtn) {
            confirmBulkArchiveBtn.addEventListener('click', async function() {
                const testIds = Array.from(selectedTests);

                const submitButton = this;
                const originalText = submitButton.innerHTML;

                
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Archiving...';

                try {
                    const response = await fetch(`@Url.Action("BulkArchiveTestsAjax", "Test")`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ TestIds: testIds, Archive: true })
                    });

                    const result = await response.json();

                    if (result.success) {
                        bulkArchiveModal.hide();
                        showToast(`${result.message}! Refreshing page...`, 'success');

                        // Remove selected test cards from DOM
                        removeSelectedTestCardsFromDOM();
                    } else {
                        showToast(result.message || 'Error archiving tests', 'error');
                    }
                } catch (error) {
                    console.error('Error archiving tests:', error);
                    showToast('Error archiving tests', 'error');
                } finally {
                    
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });
        }

        if (confirmBulkUnarchiveBtn) {
            confirmBulkUnarchiveBtn.addEventListener('click', async function() {
                const testIds = Array.from(selectedTests);

                const submitButton = this;
                const originalText = submitButton.innerHTML;

                
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Unarchiving...';

                try {
                    const response = await fetch(`@Url.Action("BulkArchiveTestsAjax", "Test")`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: JSON.stringify({ TestIds: testIds, Archive: false })
                    });

                    const result = await response.json();

                    if (result.success) {
                        bulkUnarchiveModal.hide();
                        showToast(`${result.message}! Refreshing page...`, 'success');

                        // Remove selected test cards from DOM
                        removeSelectedTestCardsFromDOM();
                    } else {
                        showToast(result.message || 'Error unarchiving tests', 'error');
                    }
                } catch (error) {
                    console.error('Error unarchiving tests:', error);
                    showToast('Error unarchiving tests', 'error');
                } finally {
                    
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }
            });
        }

        // View toggle functionality
        const viewButtons = document.querySelectorAll('.view-btn');
        const testsContainer = document.getElementById('testsContainer');

        viewButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                viewButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                const view = this.dataset.view;
                if (view === 'list') {
                    testsContainer.classList.add('list-view');
                    document.getElementById('testsGrid').style.gridTemplateColumns = '1fr';
                } else {
                    testsContainer.classList.remove('list-view');
                    document.getElementById('testsGrid').style.gridTemplateColumns = 'repeat(auto-fill, minmax(350px, 1fr))';
                }
            });
        });

        // Helper functions for DOM updates
        function updateTestCardInDOM(testData) {
            const testCard = document.querySelector(`[data-test-id="${testData.Id}"]`);
            if (testCard) {
                // Update test name
                const titleElement = testCard.querySelector('.test-title');
                if (titleElement) titleElement.textContent = testData.TestName;

                // Update description
                const descElement = testCard.querySelector('.test-description');
                if (descElement) {
                    descElement.innerHTML = testData.Description ?
                        (testData.Description.length > 80 ? testData.Description.substring(0, 77) + "..." : testData.Description) :
                        '<span class="text-muted">No description provided</span>';
                }

                // Update time limit
                const timeElements = testCard.querySelectorAll('.stat-value');
                if (timeElements.length > 1) timeElements[1].textContent = testData.TimeLimit;

                // Update status badge
                const statusBadge = testCard.querySelector('.status-badge');
                if (statusBadge) {
                    if (testData.IsLocked) {
                        statusBadge.innerHTML = '<i class="fas fa-lock"></i> Locked';
                        statusBadge.className = 'status-badge status-locked';
                    } else {
                        statusBadge.innerHTML = '<i class="fas fa-unlock"></i> Active';
                        statusBadge.className = 'status-badge status-active';
                    }
                }

                // Update data attributes
                testCard.dataset.testName = testData.TestName;
                testCard.dataset.locked = testData.IsLocked.toString().toLowerCase();

                // Update lock button
                const lockButton = testCard.querySelector('.lock-test-btn');
                if (lockButton) {
                    lockButton.dataset.locked = testData.IsLocked.toString().toLowerCase();
                    if (testData.IsLocked) {
                        lockButton.innerHTML = '<i class="fas fa-unlock me-2"></i>Unlock Test';
                    } else {
                        lockButton.innerHTML = '<i class="fas fa-lock me-2"></i>Lock Test';
                    }
                }

                // Update features
                const featuresContainer = testCard.querySelector('.test-features');
                if (featuresContainer) {
                    let featuresHTML = '';
                    if (testData.RandomizeQuestions) {
                        featuresHTML += '<span class="feature-tag"><i class="fas fa-random"></i> Randomized</span>';
                    }
                    if (testData.MaxAttempts > 1) {
                        featuresHTML += '<span class="feature-tag"><i class="fas fa-redo"></i> ' + testData.MaxAttempts + ' Attempts</span>';
                    }
                    featuresContainer.innerHTML = featuresHTML;
                }

                // Update all action buttons with correct data attributes
                const editButton = testCard.querySelector('.edit-test-btn');
                if (editButton) {
                    editButton.dataset.testId = testData.Id;
                }

                const deleteButton = testCard.querySelector('.delete-test-btn');
                if (deleteButton) {
                    deleteButton.dataset.testId = testData.Id;
                    deleteButton.dataset.testName = testData.TestName;
                }

                const cloneButton = testCard.querySelector('.clone-test-btn');
                if (cloneButton) {
                    cloneButton.dataset.testId = testData.Id;
                    cloneButton.dataset.testName = testData.TestName;
                }

                // Update links
                const detailsLinks = testCard.querySelectorAll('a[href*="Details"]');
                detailsLinks.forEach(link => {
                    const baseUrl = '@Url.Action("Details", "Test")';
                    link.href = `${baseUrl}/${testData.Id}`;
                });

                const attemptsLinks = testCard.querySelectorAll('a[href*="AllAttempts"]');
                attemptsLinks.forEach(link => {
                    const baseUrl = '@Url.Action("AllAttempts", "Test")';
                    link.href = `${baseUrl}?testId=${testData.Id}`;
                });

                const analyticsLinks = testCard.querySelectorAll('a[href*="Analytics"]');
                analyticsLinks.forEach(link => {
                    const baseUrl = '@Url.Action("Analytics", "Test")';
                    link.href = `${baseUrl}/${testData.Id}`;
                });
            }
        }

        function removeSelectedTestCardsFromDOM() {
            selectedTests.forEach(testId => {
                const testCard = document.querySelector(`[data-test-id="${testId}"]`);
                if (testCard) {
                    testCard.style.transition = 'all 0.3s ease';
                    testCard.style.transform = 'scale(0)';
                    testCard.style.opacity = '0';
                    setTimeout(() => {
                        testCard.remove();

                        // Check if no tests left and show empty state
                        const remainingCards = document.querySelectorAll('.test-card').length;
                        if (remainingCards === 0) {
                            showEmptyState();
                        }
                    }, 300);
                }
            });

            // Clear selection
            selectedTests.clear();
            updateBulkActionsBar();
        }

        function showEmptyState() {
            const testsContainer = document.getElementById('testsContainer');
            if (testsContainer) {
                testsContainer.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-content">
                        <div class="empty-state-icon">
                            <i class="fas fa-clipboard-list"></i>
                        </div>
                        <h3 class="empty-state-title">No Tests Yet</h3>
                        <p class="empty-state-description">
                            Get started by creating your first test. You can add various question types,
                            set time limits, and invite students to take your tests.
                        </p>
                        <button class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#createTestModal">
                            <i class="fas fa-plus-circle me-2"></i>Create Your First Test
                        </button>
                    </div>
                </div>
                `;
            }
        }

        // Performance optimization: Debounce search
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Apply debounced search
        if (searchInput) {
            const debouncedSearch = debounce(filterAndSortTests, 300);
            searchInput.removeEventListener('input', filterAndSortTests);
            searchInput.addEventListener('input', debouncedSearch);
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl/Cmd + K to open search
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                const searchInput = document.getElementById('searchTests');
                if (searchInput) {
                    searchInput.focus();
                }
            }

            // Escape key to close modals
            if (e.key === 'Escape') {
                const activeModal = document.querySelector('.modal.show');
                if (activeModal) {
                    const modalInstance = bootstrap.Modal.getInstance(activeModal);
                    if (modalInstance) {
                        modalInstance.hide();
                    }
                }
            }

            // Ctrl/Cmd + Enter to create new test
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                e.preventDefault();
                const createBtn = document.querySelector('.create-test-btn');
                if (createBtn && !document.querySelector('.modal.show')) {
                    createBtn.click();
                }
            }
        });

        // Global error handler for unhandled promise rejections
        window.addEventListener('unhandledrejection', function(event) {
            console.error('Unhandled promise rejection:', event.reason);
            showToast('An unexpected error occurred. Please try again.', 'error');
        });

        // Handle page visibility changes
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                // Page became visible again, refresh event listeners
                initializeEventListeners();
            }
        });

        // Auto-save form data to prevent data loss (simple localStorage implementation)
        function setupAutoSave() {
            const forms = [createTestForm, editTestForm];
            
            forms.forEach(form => {
                if (form) {
                    const inputs = form.querySelectorAll('input, textarea, select');
                    
                    inputs.forEach(input => {
                        input.addEventListener('input', function() {
                            const formId = form.id;
                            const inputName = this.name;
                            const inputValue = this.type === 'checkbox' ? this.checked : this.value;
                            
                            try {
                                const saved = JSON.parse(localStorage.getItem(`form_${formId}`) || '{}');
                                saved[inputName] = inputValue;
                                localStorage.setItem(`form_${formId}`, JSON.stringify(saved));
                            } catch (e) {
                                // Ignore localStorage errors
                            }
                        });
                    });
                }
            });
        }

        // Clean up localStorage when forms are successfully submitted
        function clearFormAutoSave(formId) {
            try {
                localStorage.removeItem(`form_${formId}`);
            } catch (e) {
                // Ignore localStorage errors
            }
        }

        // Restore form data on page load
        function restoreFormData() {
            const forms = [createTestForm, editTestForm];
            
            forms.forEach(form => {
                if (form) {
                    try {
                        const saved = JSON.parse(localStorage.getItem(`form_${form.id}`) || '{}');
                        Object.keys(saved).forEach(inputName => {
                            const input = form.querySelector(`[name="${inputName}"]`);
                            if (input) {
                                if (input.type === 'checkbox') {
                                    input.checked = saved[inputName];
                                } else {
                                    input.value = saved[inputName];
                                }
                            }
                        });
                    } catch (e) {
                        // Ignore localStorage errors
                    }
                }
            });
        }

        // Initialize everything on page load
        initializeEventListeners();
        filterAndSortTests();
        setupAutoSave();
        restoreFormData();

        // Intersection Observer for performance (lazy loading for large lists)
        function setupIntersectionObserver() {
            const cards = document.querySelectorAll('.test-card');
            
            if (cards.length > 20) { // Only for large lists
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('visible');
                        }
                    });
                }, {
                    threshold: 0.1,
                    rootMargin: '50px'
                });

                cards.forEach(card => {
                    observer.observe(card);
                });
            }
        }

        // Initialize intersection observer
        setupIntersectionObserver();

        // Cleanup function for when page unloads
        window.addEventListener('beforeunload', function() {
            // Clean up any running timers or observers
            if (window.testPageCleanup) {
                window.testPageCleanup();
            }
        });

        // Expose debug utilities for development
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            window.testPageDebug = {
                selectedTests,
                showToast,
                initializeEventListeners,
                updateTestCardInDOM,
                filterAndSortTests,
                currentTestId,
                clearFormAutoSave
            };
        }

        // Success callback for forms
        function onFormSuccess(action, testId = null) {
            switch (action) {
                case 'create':
                    clearFormAutoSave('createTestForm');
                    break;
                case 'edit':
                    clearFormAutoSave('editTestForm');
                    break;
                case 'delete':
                    // Remove from selected tests if it was selected
                    if (testId) {
                        selectedTests.delete(testId);
                        updateBulkActionsBar();
                    }
                    break;
            }
        }

        // Toast notification queue management
        let toastQueue = [];
        let isShowingToast = false;

        function queueToast(message, type = 'success') {
            toastQueue.push({ message, type });
            processToastQueue();
        }

        function processToastQueue() {
            if (isShowingToast || toastQueue.length === 0) return;
            
            isShowingToast = true;
            const { message, type } = toastQueue.shift();
            
            showToast(message, type);
            
            // Mark as not showing after toast duration
            setTimeout(() => {
                isShowingToast = false;
                processToastQueue(); // Process next toast in queue
            }, 4500);
        }

        // Enhanced error handling with retry mechanism
        async function makeRequest(url, options, retries = 3) {
            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, options);
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return await response.json();
                } catch (error) {
                    if (i === retries - 1) throw error;
                    
                    // Wait before retry (exponential backoff)
                    await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                }
            }
        }

        // Connection status monitoring
        let isOnline = navigator.onLine;

        window.addEventListener('online', function() {
            isOnline = true;
            showToast('Connection restored', 'success');
        });

        window.addEventListener('offline', function() {
            isOnline = false;
            showToast('You appear to be offline. Some features may not work.', 'warning');
        });

        // Enhanced AJAX wrapper with offline handling
        async function safeAjaxRequest(url, options) {
            if (!isOnline) {
                showToast('You are offline. Please check your connection.', 'error');
                throw new Error('Offline');
            }

            return await makeRequest(url, {
                ...options,
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    ...options.headers
                }
            });
        }

        // Initialize categories and tags
        loadCategories();
        loadTags();

        // Share Test functionality
        function initializeShareButtons() {
            const shareButtons = document.querySelectorAll('.share-test-btn');
            shareButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    openShareTestModal(this.dataset.testId, this.dataset.testName);
                });
            });
        }

        function openShareTestModal(testId, testName) {
            const modal = new bootstrap.Modal(document.getElementById('shareTestModal'));
            
            document.getElementById('shareTestId').value = testId;
            document.getElementById('shareTestNameDisplay').textContent = testName;
            
            // Reset form and clear validation errors
            const form = document.getElementById('shareTestForm');
            form.reset();
            clearFormErrors(form);
            
            modal.show();
        }

        async function shareTest() {
            const form = document.getElementById('shareTestForm');
            const submitButton = form.closest('.modal').querySelector('.btn-primary');
            
            // Disable submit button
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Sharing...';
            
            // Clear previous errors
            clearFormErrors(form);
            
            // Validate form
            if (!form.checkValidity()) {
                form.reportValidity();
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-share-alt me-2"></i>Share Test';
                return;
            }
            
            const formData = new FormData(form);
            
            // Get expiration date and convert to proper format
            let expiresAt = formData.get('ExpiresAt');
            if (expiresAt) {
                // Convert datetime-local to ISO string
                expiresAt = new Date(expiresAt).toISOString();
            } else {
                expiresAt = null;
            }
            
            const shareData = {
                TestId: document.getElementById('shareTestId').value,
                Email: formData.get('Email'),
                Permission: parseInt(formData.get('Permission')),
                Message: formData.get('Message') || null,
                ExpiresAt: expiresAt
            };

            try {
                // Get CSRF token
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value ||
                             document.querySelector('meta[name="__RequestVerificationToken"]')?.getAttribute('content');

                const response = await fetch('@Url.Action("ShareTest", "Test")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(shareData)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const result = await response.json();

                if (result.success) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('shareTestModal'));
                    modal.hide();
                    
                    // Show success message with sharing URL
                    if (result.shareUrl) {
                        showSharingSuccessModal(result.message, result.shareUrl);
                    } else {
                        showToast(result.message, 'success');
                    }
                } else {
                    if (result.errors && Array.isArray(result.errors)) {
                        showFormErrors(form, result.errors);
                        result.errors.forEach(error => {
                            showToast(error.Message, 'error');
                        });
                    } else {
                        showToast(result.message || 'Error sharing test', 'error');
                    }
                }
            } catch (error) {
                console.error('Share test error:', error);
                showToast('Error sharing test. Please try again.', 'error');
            } finally {
                // Re-enable submit button
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-share-alt me-2"></i>Share Test';
            }
        }

        // Initialize share buttons
        initializeShareButtons();
        
        // Keyboard shortcuts
        function initializeKeyboardShortcuts() {
            document.addEventListener('keydown', function(e) {
                // Don't trigger shortcuts when typing in inputs
                if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.isContentEditable) {
                    return;
                }
                
                // Ctrl/Cmd + combinations
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'n': // Ctrl+N - New test
                            e.preventDefault();
                            const createBtn = document.querySelector('[data-bs-target="#createTestModal"]');
                            if (createBtn) createBtn.click();
                            break;
                        case 'f': // Ctrl+F - Focus search
                            e.preventDefault();
                            const searchInput = document.getElementById('searchTests');
                            if (searchInput) {
                                searchInput.focus();
                                searchInput.select();
                            }
                            break;
                        case 'a': // Ctrl+A - Select all tests
                            e.preventDefault();
                            selectAllTests();
                            break;
                    }
                } else {
                    // Single key shortcuts
                    switch(e.key) {
                        case '/': // Focus search
                            e.preventDefault();
                            const searchInput = document.getElementById('searchTests');
                            if (searchInput) {
                                searchInput.focus();
                                searchInput.select();
                            }
                            break;
                        case 'Escape': // Clear search/Close modals
                            const activeModal = document.querySelector('.modal.show');
                            if (activeModal) {
                                const closeBtn = activeModal.querySelector('.btn-close, [data-bs-dismiss="modal"]');
                                if (closeBtn) closeBtn.click();
                            } else {
                                clearSearch();
                            }
                            break;
                        case '1': case '2': case '3': case '4': case '5': // Quick sort
                            const sortOptions = ['recent', 'name', 'questions', 'attempts', 'locked'];
                            const sortIndex = parseInt(e.key) - 1;
                            if (sortIndex >= 0 && sortIndex < sortOptions.length) {
                                const sortSelect = document.getElementById('sortTests');
                                if (sortSelect) {
                                    sortSelect.value = sortOptions[sortIndex];
                                    filterAndSortTests();
                                    showToast(`Sorted by: ${sortOptions[sortIndex]}`, 'info');
                                }
                            }
                            break;
                        case 'g': // Grid view
                            switchView('grid');
                            break;
                        case 'l': // List view  
                            switchView('list');
                            break;
                    }
                }
            });
        }
        
        function selectAllTests() {
            const checkboxes = document.querySelectorAll('.test-checkbox:not(:disabled)');
            const allChecked = Array.from(checkboxes).every(cb => cb.checked);
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = !allChecked;
                if (checkbox.checked) {
                    selectedTests.add(checkbox.dataset.testId);
                } else {
                    selectedTests.delete(checkbox.dataset.testId);
                }
            });
            
            updateBulkActionsBar();
            showToast(allChecked ? 'All tests deselected' : 'All tests selected', 'info');
        }
        
        function clearSearch() {
            const searchInput = document.getElementById('searchTests');
            if (searchInput && searchInput.value) {
                searchInput.value = '';
                lastSearchTerm = '';
                filterAndSortTests();
                showToast('Search cleared', 'info');
            }
        }
        
        function switchView(viewType) {
            const viewButtons = document.querySelectorAll('.view-btn');
            const container = document.getElementById('testsContainer');
            
            viewButtons.forEach(btn => {
                btn.classList.toggle('active', btn.dataset.view === viewType);
            });
            
            if (container) {
                container.className = viewType === 'list' ? 'tests-container list-view' : 'tests-container grid-view';
                showToast(`Switched to ${viewType} view`, 'info');
            }
        }
        
        // Show keyboard shortcuts help
        function showKeyboardShortcuts() {
            const shortcuts = [
                { key: 'Ctrl+N', action: 'Create new test' },
                { key: 'Ctrl+F or /', action: 'Focus search' },
                { key: 'Ctrl+A', action: 'Select all tests' },
                { key: 'Esc', action: 'Clear search or close modal' },
                { key: '1-5', action: 'Quick sort (Recent, Name, Questions, Attempts, Locked)' },
                { key: 'G', action: 'Grid view' },
                { key: 'L', action: 'List view' }
            ];
            
            const helpHtml = shortcuts.map(s => 
                `<div class="shortcut-item"><kbd>${s.key}</kbd> ${s.action}</div>`
            ).join('');
            
            // You could show this in a modal or tooltip
            console.log('Keyboard shortcuts:', shortcuts);
        }
        
        // Initialize keyboard shortcuts
        initializeKeyboardShortcuts();

        // Recent Activity Dashboard Function
        async function loadRecentActivity() {
            const container = document.getElementById('recentActivityContent');
            if (!container) return;

            try {
                const response = await fetch('@Url.Action("GetRecentActivityAjax", "Test")', {
                    method: 'GET',
                    credentials: 'same-origin',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();

                if (result.success && result.data && result.data.length > 0) {
                    const activityHtml = result.data.map(activity => `
                        <div class="activity-item">
                            <div class="activity-icon">
                                <i class="fas fa-clipboard-check text-primary"></i>
                            </div>
                            <div class="activity-content">
                                <div class="activity-title">
                                    <strong>${activity.studentName}</strong> completed <a href="/Test/Details/${activity.testId}">${activity.testName}</a>
                                </div>
                                <div class="activity-meta">
                                    <span class="activity-score">Score: ${activity.score}%</span>
                                    <span class="activity-time">${formatTimeAgo(activity.startTime)}</span>
                                </div>
                            </div>
                        </div>
                    `).join('');

                    container.innerHTML = activityHtml;
                } else {
                    container.innerHTML = '<div class="text-muted text-center">No recent activity</div>';
                }
            } catch (error) {
                console.error('Error loading recent activity:', error);
                container.innerHTML = '<div class="text-muted text-center">Error loading activity</div>';
            }
        }

        function formatTimeAgo(dateString) {
            const now = new Date();
            const date = new Date(dateString);
            const diffInSeconds = Math.floor((now - date) / 1000);

            if (diffInSeconds < 60) return 'Just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
            return `${Math.floor(diffInSeconds / 86400)}d ago`;
        }

        // Event delegation for dynamically created test cards
        function initializeEventDelegation() {
            const testsGrid = document.getElementById('testsGrid');
            if (!testsGrid) return;

            // Use event delegation for all test card actions
            testsGrid.addEventListener('click', function(e) {
                const target = e.target.closest('.edit-test-btn, .delete-test-btn, .clone-test-btn, .toggle-lock-btn');
                if (!target) return;

                e.preventDefault();
                const testId = target.dataset.testId;
                const testName = target.dataset.testName;

                if (target.classList.contains('edit-test-btn')) {
                    openEditModal(testId);
                } else if (target.classList.contains('delete-test-btn')) {
                    openDeleteModal(testId, testName);
                } else if (target.classList.contains('clone-test-btn')) {
                    cloneTest(testId);
                } else if (target.classList.contains('toggle-lock-btn')) {
                    toggleTestLock(testId);
                }
            });
        }

        async function openEditModal(testId) {
            try {
                const response = await fetch(`@Url.Action("GetTestDataAjax", "Test")?id=${testId}`);
                const result = await response.json();

                if (result.success) {
                    await loadCategoriesForEdit();
                    
                    // Populate form
                    document.getElementById('editTestId').value = result.data.id;
                    document.getElementById('editTestName').value = result.data.testName;
                    document.getElementById('editTestDescription').value = result.data.description || '';
                    document.getElementById('editTimeLimit').value = result.data.timeLimit;
                    document.getElementById('editMaxAttempts').value = result.data.maxAttempts;
                    document.getElementById('editRandomizeQuestions').checked = result.data.randomizeQuestions;
                    document.getElementById('editIsLocked').checked = result.data.isLocked;
                    
                    editTestModal.show();
                } else {
                    showToast(result.message || 'Error loading test data', 'error');
                }
            } catch (error) {
                console.error('Error loading test data:', error);
                showToast('Error loading test data', 'error');
            }
        }

        function openDeleteModal(testId, testName) {
            currentTestId = testId;
            document.getElementById('deleteTestName').textContent = testName;
            deleteTestModal.show();
        }

        async function cloneTest(testId) {
            try {
                const response = await fetch('@Url.Action("CloneTestAjax", "Test")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ Id: testId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(`Test cloned successfully with ${result.questionsCloned} questions!`, 'success');
                    // Refresh the filtered tests to show the new cloned test
                    loadFilteredTests();
                } else {
                    showToast(result.message || 'Error cloning test', 'error');
                }
            } catch (error) {
                console.error('Error cloning test:', error);
                showToast('Error cloning test', 'error');
            }
        }

        async function toggleTestLock(testId) {
            try {
                const response = await fetch('@Url.Action("ToggleLockAjax", "Test")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ Id: testId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    // Refresh the filtered tests to show the updated lock status
                    loadFilteredTests();
                } else {
                    showToast(result.message || 'Error updating test lock status', 'error');
                }
            } catch (error) {
                console.error('Error updating test lock status:', error);
                showToast('Error updating test lock status', 'error');
            }
        }

        // Initialize event delegation for dynamically created test cards
        initializeEventDelegation();

        // Initialize filter data
        loadCategories();
        loadTags();
        
        // Load Recent Activity for Dashboard (async)
        loadRecentActivity();
        
        // Only load filtered tests if we need to (when filters are applied or no server data)
        const testsGrid = document.getElementById('testsGrid');
        const hasServerRenderedTests = testsGrid && testsGrid.children.length > 0;
        
        if (!hasServerRenderedTests) {
            loadFilteredTests();
        }


        // Final initialization message
        console.log('Test Index page initialized successfully');
    });
</script>

<!-- Share Test Modal -->
<div class="modal fade" id="shareTestModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share Test: <span id="shareTestNameDisplay"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="shareTestForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="shareTestId" name="TestId">
                    
                    <div class="mb-3">
                        <label for="shareEmail" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="shareEmail" name="Email" required
                               placeholder="Enter teacher's email address">
                        <div class="invalid-feedback"></div>
                        <div class="form-text">Enter the email address of the teacher you want to share this test with.</div>
                    </div>

                    <div class="mb-3">
                        <label for="sharePermission" class="form-label">Permission Level</label>
                        <select class="form-select" id="sharePermission" name="Permission" required>
                            <option value="0">View Only - Can view test and questions but not edit</option>
                            <option value="1">View & Copy - Can view and create a copy of the test</option>
                            <option value="2">Edit - Can view and edit the original test</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="shareMessage" class="form-label">Message (Optional)</label>
                        <textarea class="form-control" id="shareMessage" name="Message" rows="3"
                                  placeholder="Add a personal message..."></textarea>
                        <div class="invalid-feedback"></div>
                    </div>

                    <div class="mb-3">
                        <label for="shareExpiresAt" class="form-label">Expiration Date (Optional)</label>
                        <input type="datetime-local" class="form-control" id="shareExpiresAt" name="ExpiresAt">
                        <div class="invalid-feedback"></div>
                        <div class="form-text">Leave empty for permanent access.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="shareTest()">
                    <i class="fas fa-share-alt me-2"></i>Share Test
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Share Success Modal -->
<div class="modal fade" id="shareSuccessModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">
                    <i class="fas fa-check-circle me-2"></i>Test Shared Successfully!
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p id="shareSuccessMessage" class="mb-3"></p>
                
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    The recipient can access the shared test using the URL below:
                </div>
                
                <div class="input-group mb-3">
                    <input type="text" class="form-control" id="shareUrl" readonly>
                    <button class="btn btn-outline-secondary" type="button" onclick="copyShareUrl()">
                        <i class="fas fa-copy me-2"></i>Copy URL
                    </button>
                </div>
                
                <div class="form-text">
                    You can copy this URL and send it via email, or the recipient will receive a notification if they're registered.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">
                    <i class="fas fa-check me-2"></i>Done
                </button>
            </div>
        </div>
    </div>
</div>


}