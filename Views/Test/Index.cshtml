@model IEnumerable<TestPlatform2.Data.Test>
@{
ViewData["Title"] = "My Tests";
}

<div class="test-index-container">
    <!-- Hero Section -->
    <div class="hero-section">
        <div class="hero-content">
            <div class="hero-text">
                <h1 class="hero-title">
                    <i class="fas fa-clipboard-list me-3"></i>
                    My Tests
                </h1>
                <p class="hero-subtitle">Create, manage, and analyze your tests with powerful insights</p>
                <div class="stats-row">
                    <div class="stat-item">
                        <span class="stat-number">@Model.Count()</span>
                        <span class="stat-label">Total Tests</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Count(t => !t.IsLocked)</span>
                        <span class="stat-label">Active</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">@Model.Sum(t => t.Attempts.Count)</span>
                        <span class="stat-label">Total Attempts</span>
                    </div>
                </div>
            </div>
            <div class="hero-action">
                <button class="btn btn-primary btn-lg create-test-btn" data-bs-toggle="modal" data-bs-target="#createTestModal">
                    <i class="fas fa-plus-circle me-2"></i>Create New Test
                </button>
            </div>
        </div>
    </div>

    <!-- Success Message -->
    @if (TempData["SuccessMessage"] != null)
    {
    <div class="alert alert-success alert-dismissible fade show success-alert" role="alert">
        <div class="alert-content">
            <i class="fas fa-check-circle me-2"></i>
            <span>@TempData["SuccessMessage"]</span>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    }

    <!-- Tests Grid -->
    @if (!Model.Any())
    {
    <div class="empty-state">
        <div class="empty-state-content">
            <div class="empty-state-icon">
                <i class="fas fa-clipboard-list"></i>
            </div>
            <h3 class="empty-state-title">No Tests Yet</h3>
            <p class="empty-state-description">
                Get started by creating your first test. You can add various question types,
                set time limits, and invite students to take your tests.
            </p>
            <button class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#createTestModal">
                <i class="fas fa-plus-circle me-2"></i>Create Your First Test
            </button>
        </div>
    </div>
    }
    else
    {
    <!-- Filter and Sort Options -->
    <div class="controls-section">
        <div class="controls-content">
            <h2 class="section-title">Your Tests</h2>
            <div class="controls-actions">
                <div class="view-options">
                    <button class="view-btn active" data-view="grid" title="Grid View">
                        <i class="fas fa-th-large"></i>
                    </button>
                    <button class="view-btn" data-view="list" title="List View">
                        <i class="fas fa-list"></i>
                    </button>
                </div>
                <div class="sort-options">
                    <select class="form-select sort-select">
                        <option value="recent">Recently Created</option>
                        <option value="name">Name A-Z</option>
                        <option value="questions">Most Questions</option>
                        <option value="attempts">Most Attempts</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Tests Grid/List Container -->
    <div class="tests-container" id="testsContainer">
        <div class="tests-grid" id="testsGrid">
            @foreach (var test in Model)
            {
            <div class="test-card" data-test-id="@test.Id">
                <div class="test-card-header">
                    <div class="test-status">
                        <span class="status-badge @(test.IsLocked ? "status-locked" : "status-active")">
                            <i class="fas @(test.IsLocked ? "fa-lock" : "fa-unlock")"></i>
                            @(test.IsLocked ? "Locked" : "Active")
                        </span>
                    </div>
                    <div class="test-actions">
                        <div class="dropdown">
                            <button class="btn btn-sm btn-ghost dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" asp-action="Details" asp-route-id="@test.Id">
                                        <i class="fas fa-eye me-2"></i>View Details
                                    </a></li>
                                <li><button class="dropdown-item edit-test-btn" data-test-id="@test.Id">
                                        <i class="fas fa-edit me-2"></i>Edit Test
                                    </button></li>
                                <li><a class="dropdown-item" asp-action="Analytics" asp-route-id="@test.Id">
                                        <i class="fas fa-chart-line me-2"></i>View Analytics
                                    </a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><button class="dropdown-item text-danger delete-test-btn" data-test-id="@test.Id" data-test-name="@test.TestName">
                                        <i class="fas fa-trash me-2"></i>Delete Test
                                    </button></li>
                            </ul>
                        </div>
                    </div>
                </div>

                <div class="test-card-body">
                    <h3 class="test-title" title="@test.TestName">@test.TestName</h3>
                    <p class="test-description">
                        @if (string.IsNullOrEmpty(test.Description))
                        {
                        <span class="text-muted">No description provided</span>
                        }
                        else
                        {
                        @(test.Description.Length > 80 ? test.Description.Substring(0, 77) + "..." : test.Description)
                        }
                    </p>

                    <div class="test-stats">
                        <div class="stat-group">
                            <div class="stat">
                                <i class="fas fa-question-circle stat-icon"></i>
                                <span class="stat-value">@(test.Questions?.Count ?? 0)</span>
                                <span class="stat-label">Questions</span>
                            </div>
                            <div class="stat">
                                <i class="fas fa-clock stat-icon"></i>
                                <span class="stat-value">@test.TimeLimit</span>
                                <span class="stat-label">Minutes</span>
                            </div>
                            <div class="stat">
                                <i class="fas fa-users stat-icon"></i>
                                <span class="stat-value">@test.Attempts.Count</span>
                                <span class="stat-label">Attempts</span>
                            </div>
                        </div>
                    </div>

                    <div class="test-features">
                        @if (test.RandomizeQuestions)
                        {
                        <span class="feature-tag">
                            <i class="fas fa-random"></i>
                            Randomized
                        </span>
                        }
                        @if (test.MaxAttempts > 1)
                        {
                        <span class="feature-tag">
                            <i class="fas fa-redo"></i>
                            @test.MaxAttempts Attempts
                        </span>
                        }
                    </div>
                </div>

                <div class="test-card-footer">
                    <div class="primary-actions">
                        <a asp-action="Details" asp-route-id="@test.Id" class="btn btn-primary btn-sm">
                            <i class="fas fa-eye me-1"></i>
                            View Details
                        </a>
                        <a asp-action="AllAttempts" asp-route-testId="@test.Id" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-chart-bar me-1"></i>
                            Results
                        </a>
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
    }
</div>

<!-- Create Test Modal -->
<div class="modal fade" id="createTestModal" tabindex="-1" aria-labelledby="createTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTestModalLabel">
                    <i class="fas fa-plus-circle me-2"></i>Create New Test
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createTestForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="testTitle" class="form-label">Test Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="testTitle" name="Title" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="testDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="testDescription" name="Description" rows="3"></textarea>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="timeLimit" class="form-label">Time Limit (minutes) <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="timeLimit" name="TimeLimit" min="1" max="180" value="60" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="maxAttempts" class="form-label">Max Attempts <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="maxAttempts" name="MaxAttempts" min="1" max="10" value="1" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3 d-flex align-items-end">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="randomizeQuestions" name="RandomizeQuestions">
                                    <label class="form-check-label" for="randomizeQuestions">
                                        Randomize Questions
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Create Test
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Test Modal -->
<div class="modal fade" id="editTestModal" tabindex="-1" aria-labelledby="editTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTestModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Test
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editTestForm">
                <input type="hidden" id="editTestId" name="Id">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="editTestName" class="form-label">Test Title <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editTestName" name="TestName" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="mb-3">
                                <label for="editTestDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="editTestDescription" name="Description" rows="3"></textarea>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="editTimeLimit" class="form-label">Time Limit (minutes) <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editTimeLimit" name="TimeLimit" min="1" max="180" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="editMaxAttempts" class="form-label">Max Attempts <span class="text-danger">*</span></label>
                                <input type="number" class="form-control" id="editMaxAttempts" name="MaxAttempts" min="1" max="10" required>
                                <div class="invalid-feedback"></div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3 d-flex align-items-end">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="editRandomizeQuestions" name="RandomizeQuestions">
                                    <label class="form-check-label" for="editRandomizeQuestions">
                                        Randomize Questions
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="editIsLocked" name="IsLocked">
                                <label class="form-check-label" for="editIsLocked">
                                    <i class="fas fa-lock me-2"></i>Lock Test
                                </label>
                                <div class="form-text">Locked tests cannot be taken by students</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Update Test
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Test Modal -->
<div class="modal fade" id="deleteTestModal" tabindex="-1" aria-labelledby="deleteTestModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="deleteTestModalLabel">
                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                    Confirm Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p class="mb-3">Are you sure you want to delete the test <strong>"<span id="deleteTestName"></span>"</strong>?</p>
                <div class="alert alert-warning border-0">
                    <i class="fas fa-info-circle me-2"></i>
                    This action cannot be undone and will permanently delete all questions and student attempts.
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTest">
                    <i class="fas fa-trash me-2"></i>Delete Test
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Test Index Specific Styles */
    .test-index-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    /* Hero Section */
    .hero-section {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border-radius: 12px;
        padding: 3rem 2rem;
        margin-bottom: 2rem;
        border: 1px solid #e9ecef;
    }

    .hero-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 2rem;
    }

    .hero-title {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .hero-subtitle {
        font-size: 1.125rem;
        color: #6b7280;
        margin-bottom: 1.5rem;
    }

    .stats-row {
        display: flex;
        gap: 2rem;
    }

    .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .stat-number {
        font-size: 1.875rem;
        font-weight: 700;
        color: #2563eb;
        line-height: 1;
    }

    .stat-label {
        font-size: 0.875rem;
        color: #6b7280;
        margin-top: 0.25rem;
    }

    .create-test-btn {
        padding: 0.875rem 2rem;
        font-size: 1.125rem;
        font-weight: 600;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.15);
        transition: all 0.2s ease;
    }

    .create-test-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(37, 99, 235, 0.25);
    }

    /* Success Alert */
    .success-alert {
        border-radius: 8px;
        border: none;
        background-color: rgba(22, 163, 74, 0.1);
        border-left: 4px solid #16a34a;
        margin-bottom: 2rem;
    }

    .alert-content {
        display: flex;
        align-items: center;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 12px;
        border: 1px solid #e9ecef;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #d1d5db;
        margin-bottom: 1.5rem;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 1rem;
    }

    .empty-state-description {
        font-size: 1rem;
        color: #6b7280;
        max-width: 500px;
        margin: 0 auto 2rem;
        line-height: 1.6;
    }

    /* Controls Section */
    .controls-section {
        margin-bottom: 2rem;
    }

    .controls-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        margin: 0;
    }

    .controls-actions {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .view-options {
        display: flex;
        background: white;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        overflow: hidden;
    }

    .view-btn {
        padding: 0.5rem 0.75rem;
        border: none;
        background: transparent;
        color: #6b7280;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .view-btn:hover,
    .view-btn.active {
        background: #2563eb;
        color: white;
    }

    .sort-select {
        min-width: 180px;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        padding: 0.5rem 0.75rem;
    }

    /* Tests Grid */
    .tests-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
    }

    .test-card {
        background: white;
        border-radius: 12px;
        border: 1px solid #e5e7eb;
        transition: all 0.3s ease;
        overflow: hidden;
        position: relative;
    }

    .test-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1);
        border-color: #2563eb;
    }

    .test-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.25rem 0;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.375rem 0.75rem;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }

    .status-active {
        background-color: rgba(22, 163, 74, 0.1);
        color: #16a34a;
    }

    .status-locked {
        background-color: rgba(220, 38, 38, 0.1);
        color: #dc2626;
    }

    .btn-ghost {
        background: transparent;
        border: none;
        color: #6b7280;
        padding: 0.375rem;
        border-radius: 4px;
        line-height: 1;
    }

    .btn-ghost:hover {
        background: #f3f4f6;
        color: #374151;
    }

    .test-card-body {
        padding: 1rem 1.25rem;
    }

    .test-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 0.5rem;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .test-description {
        color: #6b7280;
        font-size: 0.875rem;
        margin-bottom: 1.5rem;
        line-height: 1.5;
        min-height: 2.625rem;
    }

    .test-stats {
        margin-bottom: 1rem;
    }

    .stat-group {
        display: flex;
        justify-content: space-between;
        background: #f9fafb;
        border-radius: 8px;
        padding: 1rem;
    }

    .stat {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .stat-icon {
        color: #2563eb;
        font-size: 1.125rem;
        margin-bottom: 0.25rem;
    }

    .stat-value {
        font-size: 1.125rem;
        font-weight: 600;
        color: #1f2937;
        line-height: 1;
    }

    .stat-label {
        font-size: 0.75rem;
        color: #6b7280;
        margin-top: 0.125rem;
    }

    .test-features {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .feature-tag {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.5rem;
        background: #dbeafe;
        color: #1d4ed8;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 500;
    }

    .test-card-footer {
        padding: 1rem 1.25rem;
        border-top: 1px solid #f3f4f6;
        background: #fafafa;
    }

    .primary-actions {
        display: flex;
        gap: 0.75rem;
    }

    .primary-actions .btn {
        flex: 1;
        justify-content: center;
    }

    /* Loading overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .loading-spinner {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        text-align: center;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
    .hero-content {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
    }

    .stats-row {
        justify-content: center;
    }

    .hero-title {
        font-size: 2rem;
        justify-content: center;
    }

    .controls-content {
        flex-direction: column;
        align-items: stretch;
    }

    .controls-actions {
        flex-direction: column;
        align-items: stretch;
    }

    .tests-grid {
        grid-template-columns: 1fr;
    }

    .test-card-header {
        padding: 0.75rem 1rem 0;
    }

    .test-card-body {
        padding: 0.75rem 1rem;
    }

    .test-card-footer {
        padding: 0.75rem 1rem;
    }

    .primary-actions {
        flex-direction: column;
    }
    }

    @@media (max-width: 576px) {
    .hero-section {
        padding: 2rem 1rem;
    }

    .stats-row {
        flex-wrap: wrap;
        gap: 1rem;
    }

    .stat-group {
        flex-direction: column;
        gap: 1rem;
    }

    .stat {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }
    }
</style>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 mb-0">Processing...</p>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Global variables
        let currentTestId = null;
        const loadingOverlay = document.getElementById('loadingOverlay');

        // Utility functions
        function showLoading() {
            loadingOverlay.style.display = 'flex';
        }

        function hideLoading() {
            loadingOverlay.style.display = 'none';
        }

        function clearFormErrors(form) {
            const inputs = form.querySelectorAll('.form-control');
            const feedbacks = form.querySelectorAll('.invalid-feedback');

            inputs.forEach(input => {
                input.classList.remove('is-invalid');
            });

            feedbacks.forEach(feedback => {
                feedback.textContent = '';
            });
        }

        function showFormErrors(form, errors) {
            clearFormErrors(form);

            errors.forEach(error => {
                const input = form.querySelector(`[name="${error.Field}"]`);
                const feedback = input ? input.nextElementSibling : null;

                if (input && feedback && feedback.classList.contains('invalid-feedback')) {
                    input.classList.add('is-invalid');
                    feedback.textContent = error.Message;
                }
            });
        }

        // Create Test Modal
        const createTestForm = document.getElementById('createTestForm');
        const createTestModal = new bootstrap.Modal(document.getElementById('createTestModal'));

        createTestForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            showLoading();
            clearFormErrors(this);

            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());

            // Convert checkbox to boolean
            data.RandomizeQuestions = formData.has('RandomizeQuestions');

            try {
                const response = await fetch('@Url.Action("Create", "Test")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    createTestModal.hide();
                    showToast(result.message, 'success');

                    // Refresh the page to show the new test
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    if (result.errors) {
                        showFormErrors(this, result.errors);
                    } else {
                        showToast(result.message || 'An error occurred', 'error');
                    }
                }
            } catch (error) {
                console.error('Error creating test:', error);
                showToast('An error occurred while creating the test', 'error');
            } finally {
                hideLoading();
            }
        });

        // Edit Test Modal
        const editTestForm = document.getElementById('editTestForm');
        const editTestModal = new bootstrap.Modal(document.getElementById('editTestModal'));

        // Edit test button click handlers
        document.querySelectorAll('.edit-test-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const testId = this.dataset.testId;
                currentTestId = testId;

                showLoading();

                try {
                    const response = await fetch(`@Url.Action("Edit", "Test")/${testId}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Populate the form
                        document.getElementById('editTestId').value = result.data.Id;
                        document.getElementById('editTestName').value = result.data.TestName;
                        document.getElementById('editTestDescription').value = result.data.Description || '';
                        document.getElementById('editTimeLimit').value = result.data.TimeLimit;
                        document.getElementById('editMaxAttempts').value = result.data.MaxAttempts;
                        document.getElementById('editRandomizeQuestions').checked = result.data.RandomizeQuestions;
                        document.getElementById('editIsLocked').checked = result.data.IsLocked;

                        editTestModal.show();
                    } else {
                        showToast(result.message || 'Error loading test data', 'error');
                    }
                } catch (error) {
                    console.error('Error loading test data:', error);
                    showToast('Error loading test data', 'error');
                } finally {
                    hideLoading();
                }
            });
        });

        editTestForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            showLoading();
            clearFormErrors(this);

            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());

            // Convert checkboxes to boolean
            data.RandomizeQuestions = formData.has('RandomizeQuestions');
            data.IsLocked = formData.has('IsLocked');

            try {
                const response = await fetch('@Url.Action("Edit", "Test")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    editTestModal.hide();
                    showToast(result.message, 'success');

                    // Refresh the page to show updated test
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    if (result.errors) {
                        showFormErrors(this, result.errors);
                    } else {
                        showToast(result.message || 'An error occurred', 'error');
                    }
                }
            } catch (error) {
                console.error('Error updating test:', error);
                showToast('An error occurred while updating the test', 'error');
            } finally {
                hideLoading();
            }
        });

        // Delete Test Modal
        const deleteTestModal = new bootstrap.Modal(document.getElementById('deleteTestModal'));
        const confirmDeleteBtn = document.getElementById('confirmDeleteTest');

        // Delete test button click handlers
        document.querySelectorAll('.delete-test-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const testId = this.dataset.testId;
                const testName = this.dataset.testName;

                currentTestId = testId;
                document.getElementById('deleteTestName').textContent = testName;
                deleteTestModal.show();
            });
        });

        confirmDeleteBtn.addEventListener('click', async function() {
            if (!currentTestId) return;

            showLoading();

            try {
                const response = await fetch(`@Url.Action("Delete", "Test")/${currentTestId}`, {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    deleteTestModal.hide();
                    showToast(result.message, 'success');

                    // Remove the test card from the UI
                    const testCard = document.querySelector(`[data-test-id="${currentTestId}"]`);
                    if (testCard) {
                        testCard.style.transform = 'scale(0)';
                        testCard.style.opacity = '0';
                        setTimeout(() => {
                            testCard.remove();

                            // Check if no tests left and show empty state
                            const remainingCards = document.querySelectorAll('.test-card').length;
                            if (remainingCards === 0) {
                                window.location.reload();
                            }
                        }, 300);
                    }
                } else {
                    showToast(result.message || 'Error deleting test', 'error');
                }
            } catch (error) {
                console.error('Error deleting test:', error);
                showToast('Error deleting test', 'error');
            } finally {
                hideLoading();
                currentTestId = null;
            }
        });

        // View toggle functionality
        const viewButtons = document.querySelectorAll('.view-btn');
        const testsContainer = document.getElementById('testsContainer');

        viewButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                viewButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                const view = this.dataset.view;
                if (view === 'list') {
                    testsContainer.classList.add('list-view');
                    document.getElementById('testsGrid').classList.add('tests-list');
                } else {
                    testsContainer.classList.remove('list-view');
                    document.getElementById('testsGrid').classList.remove('tests-list');
                }
            });
        });

        // Sort functionality
        const sortSelect = document.querySelector('.sort-select');
        if (sortSelect) {
            sortSelect.addEventListener('change', function() {
                // Implement sorting logic here
                console.log('Sort by:', this.value);
            });
        }

        // Reset forms when modals are hidden
        document.getElementById('createTestModal').addEventListener('hidden.bs.modal', function() {
            createTestForm.reset();
            clearFormErrors(createTestForm);
        });

        document.getElementById('editTestModal').addEventListener('hidden.bs.modal', function() {
            editTestForm.reset();
            clearFormErrors(editTestForm);
        });
    });
</script>
}