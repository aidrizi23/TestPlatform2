@model TestPlatform2.Models.QuestionAnalyticsViewModel
@using TestPlatform2.Data.Questions
@{
    ViewData["Title"] = "Question Analytics";
}

@section Styles {
    <link rel="stylesheet" href="~/css/analytics.css" />
}

<div class="analytics-container">
    <!-- Header -->
    <div class="analytics-header">
        <div class="header-content">
            <nav class="breadcrumb-nav mb-3">
                <a asp-action="Analytics" asp-route-id="@Model.TestId" class="breadcrumb-link">
                    <i class="fas fa-arrow-left me-2"></i>Test Analytics
                </a>
                <span class="breadcrumb-separator">/</span>
                <span class="breadcrumb-current">Question Analysis</span>
            </nav>

            <div class="title-section">
                <h1 class="page-title">
                    <i class="fas fa-question-circle me-3"></i>
                    Question Analytics
                </h1>
                <div class="test-info">
                    <div class="test-name">@Model.TestName</div>
                    <div class="question-meta">Question @(Model.Question.Position + 1) of @Model.Question.Test.Questions.Count</div>
                </div>
            </div>

            <div class="header-actions">
                <a asp-action="Analytics" asp-route-id="@Model.TestId" class="btn btn-outline-light">
                    <i class="fas fa-arrow-left me-2"></i>Back to Test Analytics
                </a>
            </div>
        </div>
    </div>

    <!-- Question Display -->
    <div class="question-display-section">
        <div class="question-card">
            <div class="question-header">
                <div class="question-type-badge">
                    @switch (Model.Question)
                    {
                        case MultipleChoiceQuestion:
                            <i class="fas fa-list-ul me-1"></i><text>Multiple Choice</text>
                            break;
                        case TrueFalseQuestion:
                            <i class="fas fa-check-circle me-1"></i><text>True/False</text>
                            break;
                        case ShortAnswerQuestion:
                            <i class="fas fa-pen me-1"></i><text>Short Answer</text>
                            break;
                    }
                </div>
                <div class="question-points">
                    <i class="fas fa-star me-1"></i>@Model.Question.Points points
                </div>
            </div>
            
            <div class="question-text">
                @Model.Question.Text
            </div>

            @switch (Model.Question)
            {
                case MultipleChoiceQuestion mcq:
                    <div class="question-options">
                        <h6>Answer Options:</h6>
                        @foreach (var option in mcq.Options)
                        {
                            <div class="option-item @(mcq.CorrectAnswers.Contains(option) ? "correct-option" : "")">
                                @if (mcq.CorrectAnswers.Contains(option))
                                {
                                    <i class="fas fa-check-circle text-success me-2"></i>
                                }
                                @option
                            </div>
                        }
                    </div>
                    break;
                    
                case TrueFalseQuestion tfq:
                    <div class="question-options">
                        <h6>Correct Answer:</h6>
                        <div class="tf-answer">
                            <i class="fas fa-check-circle text-success me-2"></i>
                            @(tfq.CorrectAnswer ? "True" : "False")
                        </div>
                    </div>
                    break;
                    
                case ShortAnswerQuestion saq:
                    <div class="question-options">
                        <h6>Expected Answer:</h6>
                        <div class="expected-answer">@saq.ExpectedAnswer</div>
                        @if (!saq.CaseSensitive)
                        {
                            <small class="text-muted">Case insensitive</small>
                        }
                    </div>
                    break;
            }
        </div>
    </div>

    <!-- Performance Metrics -->
    <div class="stats-grid">
        <div class="stat-card primary">
            <div class="stat-icon">
                <i class="fas fa-target"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.Analytics.SuccessRate.ToString("0.0")%</div>
                <div class="stat-label">Success Rate</div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-users"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@(Model.Analytics.CorrectAnswers + Model.Analytics.IncorrectAnswers)</div>
                <div class="stat-label">Total Responses</div>
                <div class="stat-meta">
                    @Model.Analytics.CorrectAnswers correct, @Model.Analytics.IncorrectAnswers incorrect
                </div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-star"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.Analytics.AveragePoints.ToString("0.00")</div>
                <div class="stat-label">Average Points</div>
                <div class="stat-meta">out of @Model.Question.Points total</div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-gauge-high"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">
                    @if (Model.Analytics.SuccessRate >= 85)
                    {
                        <span class="difficulty-easy">Easy</span>
                    }
                    else if (Model.Analytics.SuccessRate >= 70)
                    {
                        <span class="difficulty-moderate">Moderate</span>
                    }
                    else if (Model.Analytics.SuccessRate >= 50)
                    {
                        <span class="difficulty-challenging">Challenging</span>
                    }
                    else
                    {
                        <span class="difficulty-difficult">Difficult</span>
                    }
                </div>
                <div class="stat-label">Difficulty Level</div>
            </div>
        </div>
    </div>

    @if (Model.Question is MultipleChoiceQuestion mcQuestion && Model.Analytics.AnswerDistribution?.Any() == true)
    {
        <!-- Answer Distribution for Multiple Choice -->
        <div class="answer-distribution-section">
            <h3 class="section-title">
                <i class="fas fa-chart-pie me-2"></i>Answer Distribution
            </h3>
            <div class="answer-chart">
                @{
                    var answerList = Model.Analytics.AnswerDistribution.ToList();
                    var totalResponses = answerList.Sum(a => a.Value);
                }
                @foreach (var answer in answerList.OrderByDescending(a => a.Value))
                {
                    var percentage = totalResponses > 0 ? (double)answer.Value / totalResponses * 100 : 0;
                    var isCorrect = mcQuestion.CorrectAnswers.Contains(answer.Key);
                    
                    <div class="answer-bar @(isCorrect ? "correct" : "incorrect")">
                        <div class="answer-label">
                            @if (isCorrect)
                            {
                                <i class="fas fa-check-circle text-success me-1"></i>
                            }
                            @answer.Key
                        </div>
                        <div class="answer-progress">
                            <div class="progress-fill" style="width: @percentage.ToString("0.0")%"></div>
                        </div>
                        <div class="answer-stats">
                            <span class="answer-count">@answer.Value</span>
                            <span class="answer-percentage">(@percentage.ToString("0.0")%)</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Performance Insights -->
    <div class="insights-section">
        <h3 class="section-title">
            <i class="fas fa-lightbulb me-2"></i>Performance Insights
        </h3>
        <div class="insights-grid">
            @if (Model.Analytics.SuccessRate < 50)
            {
                <div class="insight-card warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div class="insight-content">
                        <h6>Low Success Rate</h6>
                        <p>This question has a success rate below 50%. Consider reviewing the question difficulty or providing additional guidance.</p>
                    </div>
                </div>
            }
            
            @if (Model.Analytics.SuccessRate > 90)
            {
                <div class="insight-card success">
                    <i class="fas fa-check-circle"></i>
                    <div class="insight-content">
                        <h6>High Performance</h6>
                        <p>Students are performing very well on this question. The content appears to be well understood.</p>
                    </div>
                </div>
            }
            
            @if (Model.Question is MultipleChoiceQuestion && Model.Analytics.AnswerDistribution?.Any() == true)
            {
                var mostCommonWrong = Model.Analytics.AnswerDistribution
                    .Where(a => !((MultipleChoiceQuestion)Model.Question).CorrectAnswers.Contains(a.Key))
                    .OrderByDescending(a => a.Value)
                    .FirstOrDefault();
                    
                if (mostCommonWrong.Value > 2)
                {
                    <div class="insight-card info">
                        <i class="fas fa-info-circle"></i>
                        <div class="insight-content">
                            <h6>Common Misconception</h6>
                            <p>Many students chose "@mostCommonWrong.Key" (@mostCommonWrong.Value responses). This may indicate a common misconception that needs addressing.</p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<style>
.difficulty-easy { color: #28a745; }
.difficulty-moderate { color: #ffc107; }
.difficulty-challenging { color: #fd7e14; }
.difficulty-difficult { color: #dc3545; }

.question-display-section {
    margin-bottom: 2rem;
}

.question-card {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.question-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
}

.question-type-badge {
    background: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 600;
}

.question-points {
    color: #6c757d;
    font-weight: 600;
}

.question-text {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

.question-options h6 {
    margin-bottom: 0.75rem;
    color: #495057;
}

.option-item {
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    background: #f8f9fa;
}

.option-item.correct-option {
    background: #d4edda;
    border-color: #c3e6cb;
}

.tf-answer, .expected-answer {
    padding: 0.75rem;
    background: #d4edda;
    border: 1px solid #c3e6cb;
    border-radius: 8px;
    font-weight: 600;
}

.answer-distribution-section, .insights-section {
    margin-top: 2rem;
}

.answer-chart {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.answer-bar {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    gap: 1rem;
}

.answer-label {
    flex: 0 0 200px;
    font-weight: 600;
}

.answer-progress {
    flex: 1;
    height: 24px;
    background: #e9ecef;
    border-radius: 12px;
    overflow: hidden;
    position: relative;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(45deg, #007bff, #0056b3);
    transition: width 0.3s ease;
}

.answer-bar.correct .progress-fill {
    background: linear-gradient(45deg, #28a745, #1e7e34);
}

.answer-bar.incorrect .progress-fill {
    background: linear-gradient(45deg, #6c757d, #495057);
}

.answer-stats {
    flex: 0 0 100px;
    text-align: right;
    font-weight: 600;
}

.answer-percentage {
    color: #6c757d;
    font-size: 0.875rem;
}

.insights-grid {
    display: grid;
    gap: 1rem;
}

.insight-card {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.insight-card.warning {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border-left: 4px solid #ffc107;
}

.insight-card.success {
    background: linear-gradient(135deg, #d4edda 0%, #a8e6cf 100%);
    border-left: 4px solid #28a745;
}

.insight-card.info {
    background: linear-gradient(135deg, #cce7ff 0%, #a8d8ff 100%);
    border-left: 4px solid #007bff;
}

.insight-card i {
    font-size: 1.5rem;
    margin-top: 0.25rem;
}

.insight-card.warning i { color: #856404; }
.insight-card.success i { color: #155724; }
.insight-card.info i { color: #004085; }

.insight-content h6 {
    margin-bottom: 0.5rem;
    font-weight: 600;
}

.insight-content p {
    margin: 0;
    line-height: 1.5;
}
</style>