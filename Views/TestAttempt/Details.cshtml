@model IEnumerable<TestPlatform2.Data.Answer>
@using TestPlatform2.Data.Questions

@{
    ViewData["Title"] = "Test Attempt Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
    var attempt = Model.FirstOrDefault()?.Attempt;
    var totalQuestions = Model.Count();
    var correctAnswers = Model.Count(a => a.PointsAwarded > 0);
    var totalPoints = Model.Sum(a => a.PointsAwarded);
    var maxPoints = Model.Sum(a => a.Question?.Points ?? 0);
    var percentage = maxPoints > 0 ? (totalPoints / maxPoints) * 100 : 0;
}

<style>
    /* General Styles */
    body {
        background-color: #f8f9fa;
        color: #1f2937;
    }

    .container {
        max-width: 1200px;
    }

    .card {
        background: white;
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
        overflow: hidden;
    }

    .card-header {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        color: white;
        border-bottom: none;
        padding: 1.5rem;
    }

    .card-body {
        padding: 1.5rem;
    }

    .breadcrumb-nav {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        font-size: 0.875rem;
    }

    .breadcrumb-link {
        color: #2563eb;
        text-decoration: none;
        display: flex;
        align-items: center;
        transition: color 0.2s ease;
    }

    .breadcrumb-link:hover {
        color: #1d4ed8;
        text-decoration: none;
    }

    .breadcrumb-separator {
        margin: 0 0.5rem;
        color: #6b7280;
    }

    .breadcrumb-current {
        color: #6b7280;
    }

    .page-header {
        margin-bottom: 2rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .page-subtitle {
        color: #6b7280;
        font-size: 1rem;
    }

    /* Statistics Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid #e5e7eb;
        text-align: center;
        transition: all 0.2s ease;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin: 0 auto 1rem;
    }

    .stat-number {
        font-size: 1.75rem;
        font-weight: 700;
        color: #1f2937;
        line-height: 1;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        color: #6b7280;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .score-icon {
        background: linear-gradient(135deg, #f59e0b, #d97706);
        color: white;
    }

    .questions-icon {
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
    }

    .correct-icon {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
    }

    .percentage-icon {
        background: linear-gradient(135deg, #8b5cf6, #7c3aed);
        color: white;
    }

    /* Answer Details */
    .answer-item {
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        margin-bottom: 1rem;
        overflow: hidden;
        transition: all 0.2s ease;
    }

    .answer-item:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
    }

    .answer-header {
        background: #f9fafb;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .question-number {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 600;
        color: #374151;
    }

    .question-type-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.75rem;
        border-radius: 16px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .type-multiple-choice {
        background: rgba(59, 130, 246, 0.1);
        color: #1d4ed8;
    }

    .type-true-false {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
    }

    .type-short-answer {
        background: rgba(14, 165, 233, 0.1);
        color: #0284c7;
    }

    .points-display {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .points-earned {
        font-weight: 600;
        color: #059669;
    }

    .points-total {
        color: #6b7280;
    }

    .answer-content {
        padding: 1.5rem;
    }

    .question-text {
        font-size: 1.125rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 1rem;
        line-height: 1.5;
    }

    .answer-section {
        display: grid;
        gap: 1rem;
        margin-top: 1rem;
    }

    .student-answer,
    .correct-answer {
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid;
    }

    .student-answer {
        background: rgba(239, 246, 255, 0.5);
        border-color: #bfdbfe;
    }

    .student-answer.correct {
        background: rgba(240, 253, 244, 0.8);
        border-color: #bbf7d0;
    }

    .student-answer.incorrect {
        background: rgba(254, 242, 242, 0.8);
        border-color: #fecaca;
    }

    .correct-answer {
        background: rgba(240, 253, 244, 0.3);
        border-color: #bbf7d0;
    }

    .answer-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .answer-text {
        color: #1f2937;
        font-weight: 500;
    }

    .result-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.25rem 0.75rem;
        border-radius: 16px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-left: auto;
    }

    .result-correct {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
    }

    .result-incorrect {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
    }

    .no-answer {
        color: #9ca3af;
        font-style: italic;
    }

    /* Points Editing Styles */
    .points-edit-container {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .points-input {
        border: 1px solid #d1d5db;
        border-radius: 4px;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        text-align: center;
        transition: border-color 0.2s ease;
    }

    .points-input:focus {
        border-color: #2563eb;
        outline: none;
        box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
    }

    .points-input.modified {
        border-color: #f59e0b;
        background-color: #fef3c7;
    }

    .points-actions {
        display: flex;
        gap: 0.25rem;
        margin-left: 0.5rem;
    }

    .points-actions .btn {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        border: none;
        border-radius: 4px;
        transition: all 0.2s ease;
    }

    .save-points-btn {
        background: #10b981;
        color: white;
    }

    .save-points-btn:hover {
        background: #059669;
    }

    .reset-points-btn {
        background: #f59e0b;
        color: white;
    }

    .reset-points-btn:hover {
        background: #d97706;
    }

    .bulk-actions {
        background: #f8f9fa;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .bulk-actions h5 {
        color: #374151;
        margin-bottom: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
    }

    .bulk-actions .btn {
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .toast {
        min-width: 300px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .toast-success {
        background: #10b981;
        color: white;
    }

    .toast-error {
        background: #ef4444;
        color: white;
    }

    @@media (max-width: 768px) {
        .container {
            padding: 0 1rem;
        }
        
        .page-title {
            font-size: 1.5rem;
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
        
        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }
        
        .answer-header {
            flex-direction: column;
            align-items: stretch;
            gap: 0.75rem;
        }
        
        .question-number {
            justify-content: space-between;
        }
        
        .answer-section {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="container mt-4">
    <!-- Breadcrumb Navigation -->
    <div class="breadcrumb-nav">
        @if (attempt != null)
        {
            <a asp-controller="Test" asp-action="AllAttempts" asp-route-testId="@attempt.TestId" class="breadcrumb-link">
                <i class="fas fa-arrow-left me-2"></i>Back to All Attempts
            </a>
        }
        else
        {
            <a asp-controller="Test" asp-action="Index" class="breadcrumb-link">
                <i class="fas fa-arrow-left me-2"></i>Back to Tests
            </a>
        }
        <span class="breadcrumb-separator">/</span>
        <span class="breadcrumb-current">Test Attempt Details</span>
    </div>

    <!-- Page Header -->
    <div class="page-header">
        <h1 class="page-title">
            <i class="fas fa-clipboard-check text-primary"></i>
            Test Attempt Details
        </h1>
        @if (attempt != null)
        {
            <p class="page-subtitle">
                <strong>@attempt.FirstName @attempt.LastName</strong> (@attempt.StudentEmail) - 
                @if (attempt.IsCompleted)
                {
                    <span>Completed on @attempt.EndTime?.ToString("MMM d, yyyy 'at' h:mm tt")</span>
                }
                else
                {
                    <span class="text-warning">In Progress</span>
                }
            </p>
        }
    </div>

    @if (attempt != null)
    {
        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon score-icon">
                    <i class="fas fa-star"></i>
                </div>
                <div class="stat-number">@totalPoints.ToString("0.0")</div>
                <div class="stat-label">Points Earned</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon questions-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <div class="stat-number">@totalQuestions</div>
                <div class="stat-label">Total Questions</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon correct-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-number">@correctAnswers</div>
                <div class="stat-label">Correct Answers</div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon percentage-icon">
                    <i class="fas fa-percentage"></i>
                </div>
                <div class="stat-number">@percentage.ToString("0.0")%</div>
                <div class="stat-label">Score Percentage</div>
            </div>
        </div>

        <!-- Bulk Grading Actions -->
        <div class="bulk-actions">
            <h5><i class="fas fa-tools me-2"></i>Bulk Grading Actions</h5>
            <button class="btn btn-primary bulk-save-btn" onclick="bulkSaveChanges()">
                <i class="fas fa-save me-1"></i>Save All Changes
            </button>
            <button class="btn btn-warning bulk-reset-btn" onclick="bulkResetToAutoGrade()">
                <i class="fas fa-refresh me-1"></i>Reset All to Auto-Grade
            </button>
            <button class="btn btn-secondary bulk-zero-btn" onclick="bulkSetZero()">
                <i class="fas fa-times me-1"></i>Set All to Zero
            </button>
            <button class="btn btn-info bulk-full-btn" onclick="bulkSetFullPoints()">
                <i class="fas fa-star me-1"></i>Give Full Points to All
            </button>
        </div>
    }

    <!-- Detailed Answers Section -->
    <div class="card">
        <div class="card-header">
            <h3 class="mb-0">
                <i class="fas fa-list-alt me-2"></i>
                Question by Question Analysis
            </h3>
        </div>
        <div class="card-body p-0">
            @if (Model.Any())
            {
                @foreach (var answer in Model.OrderBy(a => a.Question.Position))
                {
                    var question = answer.Question;
                    var isCorrect = answer.PointsAwarded > 0;
                    var questionNumber = question.Position + 1;
                    
                    <div class="answer-item">
                        <div class="answer-header">
                            <div class="question-number">
                                <span class="badge bg-primary me-2">Q@questionNumber</span>
                                
                                @switch (question)
                                {
                                    case MultipleChoiceQuestion:
                                        <span class="question-type-badge type-multiple-choice">
                                            <i class="fas fa-list-ul"></i>
                                            Multiple Choice
                                        </span>
                                        break;
                                    case TrueFalseQuestion:
                                        <span class="question-type-badge type-true-false">
                                            <i class="fas fa-check-circle"></i>
                                            True/False
                                        </span>
                                        break;
                                    case ShortAnswerQuestion:
                                        <span class="question-type-badge type-short-answer">
                                            <i class="fas fa-pen"></i>
                                            Short Answer
                                        </span>
                                        break;
                                }
                                
                                <span class="result-indicator @(isCorrect ? "result-correct" : "result-incorrect")">
                                    <i class="fas @(isCorrect ? "fa-check" : "fa-times")"></i>
                                    @(isCorrect ? "Correct" : "Incorrect")
                                </span>
                            </div>
                            
                            <div class="points-display">
                                <div class="points-edit-container" data-answer-id="@answer.Id" data-max-points="@question.Points">
                                    <input type="number" 
                                           class="points-input form-control" 
                                           value="@answer.PointsAwarded.ToString("0.0")" 
                                           min="0" 
                                           max="@question.Points" 
                                           step="0.1"
                                           style="width: 80px; display: inline-block;">
                                    <span class="points-total">/ @question.Points.ToString("0.0") pts</span>
                                    <div class="points-actions">
                                        <button class="btn btn-sm btn-success save-points-btn" title="Save Points">
                                            <i class="fas fa-check"></i>
                                        </button>
                                        <button class="btn btn-sm btn-warning reset-points-btn" title="Reset to Auto-Grade">
                                            <i class="fas fa-refresh"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="answer-content">
                            <div class="question-text">
                                @question.Text
                            </div>
                            
                            <div class="answer-section">
                                <!-- Student's Answer -->
                                <div class="student-answer @(isCorrect ? "correct" : "incorrect")">
                                    <div class="answer-label">
                                        <i class="fas fa-user"></i>
                                        Student's Answer
                                    </div>
                                    <div class="answer-text">
                                        @if (string.IsNullOrEmpty(answer.Response))
                                        {
                                            <span class="no-answer">No answer provided</span>
                                        }
                                        else
                                        {
                                            @switch (question)
                                            {
                                                case MultipleChoiceQuestion mcq:
                                                    var studentAnswers = answer.Response.Split(',').Where(a => !string.IsNullOrEmpty(a)).ToList();
                                                    if (studentAnswers.Any())
                                                    {
                                                        <ul class="mb-0">
                                                            @foreach (var studentAnswer in studentAnswers)
                                                            {
                                                                <li>@studentAnswer.Trim()</li>
                                                            }
                                                        </ul>
                                                    }
                                                    else
                                                    {
                                                        <span class="no-answer">No selection made</span>
                                                    }
                                                    break;
                                                case TrueFalseQuestion:
                                                    <strong>@answer.Response</strong>
                                                    break;
                                                case ShortAnswerQuestion:
                                                    <span class="font-monospace">@answer.Response</span>
                                                    break;
                                                default:
                                                    @answer.Response
                                                    break;
                                            }
                                        }
                                    </div>
                                </div>
                                
                                <!-- Correct Answer -->
                                <div class="correct-answer">
                                    <div class="answer-label">
                                        <i class="fas fa-check-circle text-success"></i>
                                        Correct Answer
                                    </div>
                                    <div class="answer-text">
                                        @switch (question)
                                        {
                                            case MultipleChoiceQuestion mcq:
                                                <ul class="mb-0">
                                                    @foreach (var correctAnswer in mcq.CorrectAnswers)
                                                    {
                                                        <li><strong>@correctAnswer</strong></li>
                                                    }
                                                </ul>
                                                @if (mcq.AllowMultipleSelections)
                                                {
                                                    <small class="text-muted mt-2 d-block">
                                                        <i class="fas fa-info-circle me-1"></i>
                                                        Multiple selections allowed
                                                    </small>
                                                }
                                                break;
                                            case TrueFalseQuestion tfq:
                                                <strong>@(tfq.CorrectAnswer ? "True" : "False")</strong>
                                                break;
                                            case ShortAnswerQuestion saq:
                                                <span class="font-monospace">@saq.ExpectedAnswer</span>
                                                @if (saq.CaseSensitive)
                                                {
                                                    <small class="text-muted mt-2 d-block">
                                                        <i class="fas fa-font me-1"></i>
                                                        Case sensitive
                                                    </small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted mt-2 d-block">
                                                        <i class="fas fa-info-circle me-1"></i>
                                                        Case insensitive
                                                    </small>
                                                }
                                                break;
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="fas fa-inbox fa-3x text-muted"></i>
                    </div>
                    <h5 class="text-muted">No answers found</h5>
                    <p class="text-muted">This test attempt has no recorded answers.</p>
                </div>
            }
        </div>
    </div>

    @if (attempt != null && attempt.IsCompleted)
    {
        <!-- Summary Card -->
        <div class="card">
            <div class="card-header">
                <h3 class="mb-0">
                    <i class="fas fa-chart-pie me-2"></i>
                    Attempt Summary
                </h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="text-muted mb-2">Student Information</h6>
                        <p><strong>Name:</strong> @attempt.FirstName @attempt.LastName</p>
                        <p><strong>Email:</strong> @attempt.StudentEmail</p>
                        <p><strong>Started:</strong> @attempt.StartTime.ToString("MMM d, yyyy 'at' h:mm tt")</p>
                        <p><strong>Completed:</strong> @attempt.EndTime?.ToString("MMM d, yyyy 'at' h:mm tt")</p>
                    </div>
                    <div class="col-md-6">
                        <h6 class="text-muted mb-2">Performance Summary</h6>
                        <p><strong>Total Score:</strong> @totalPoints.ToString("0.0") / @maxPoints.ToString("0.0") points</p>
                        <p><strong>Percentage:</strong> @percentage.ToString("0.0")%</p>
                        <p><strong>Questions Correct:</strong> @correctAnswers / @totalQuestions</p>
                        @if (attempt.EndTime.HasValue)
                        {
                            var timeTaken = attempt.EndTime.Value - attempt.StartTime;
                            <p><strong>Time Taken:</strong> @timeTaken.ToString(@"hh\:mm\:ss")</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Toast Container -->
    <div class="toast-container" id="toastContainer"></div>
</div>

@section Scripts {
<script>
// Global variables
const attemptId = '@(attempt?.Id ?? "")';

// Initialize when document is ready
document.addEventListener('DOMContentLoaded', function() {
    initializePointsEditing();
});

function initializePointsEditing() {
    // Track original values for change detection
    document.querySelectorAll('.points-input').forEach(input => {
        input.setAttribute('data-original', input.value);
        
        // Add event listeners
        input.addEventListener('input', function() {
            const original = parseFloat(this.getAttribute('data-original'));
            const current = parseFloat(this.value);
            
            if (Math.abs(original - current) > 0.01) {
                this.classList.add('modified');
            } else {
                this.classList.remove('modified');
            }
        });
    });

    // Individual save buttons
    document.querySelectorAll('.save-points-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const container = this.closest('.points-edit-container');
            const answerId = container.getAttribute('data-answer-id');
            const input = container.querySelector('.points-input');
            const points = parseFloat(input.value) || 0;
            
            saveAnswerPoints(answerId, points, input);
        });
    });

    // Individual reset buttons
    document.querySelectorAll('.reset-points-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const container = this.closest('.points-edit-container');
            const answerId = container.getAttribute('data-answer-id');
            const input = container.querySelector('.points-input');
            
            resetAnswerToAutoGrade(answerId, input);
        });
    });
}

async function saveAnswerPoints(answerId, points, inputElement) {
    try {
        const response = await fetch('/TestAttempt/UpdateAnswerPoints', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                answerId: answerId,
                points: points
            })
        });

        const result = await response.json();
        
        if (result.success) {
            showToast('Points updated successfully!', 'success');
            inputElement.setAttribute('data-original', points.toString());
            inputElement.classList.remove('modified');
            updateStatistics();
        } else {
            showToast(result.message || 'Failed to update points', 'error');
        }
    } catch (error) {
        showToast('An error occurred while updating points', 'error');
        console.error('Error updating points:', error);
    }
}

async function resetAnswerToAutoGrade(answerId, inputElement) {
    try {
        const response = await fetch('/TestAttempt/ResetAnswerToAutoGrade', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                answerId: answerId
            })
        });

        const result = await response.json();
        
        if (result.success) {
            showToast('Answer reset to auto-grade!', 'success');
            inputElement.value = result.newPoints.toFixed(1);
            inputElement.setAttribute('data-original', result.newPoints.toString());
            inputElement.classList.remove('modified');
            updateStatistics();
        } else {
            showToast(result.message || 'Failed to reset answer', 'error');
        }
    } catch (error) {
        showToast('An error occurred while resetting answer', 'error');
        console.error('Error resetting answer:', error);
    }
}

function bulkSaveChanges() {
    const updates = [];
    document.querySelectorAll('.points-input.modified').forEach(input => {
        const container = input.closest('.points-edit-container');
        const answerId = container.getAttribute('data-answer-id');
        const points = parseFloat(input.value) || 0;
        
        updates.push({
            answerId: answerId,
            points: points
        });
    });

    if (updates.length === 0) {
        showToast('No changes to save', 'info');
        return;
    }

    bulkUpdateAnswerPoints(updates);
}

async function bulkUpdateAnswerPoints(updates) {
    try {
        const response = await fetch('/TestAttempt/BulkUpdateAnswerPoints', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                attemptId: attemptId,
                updates: updates
            })
        });

        const result = await response.json();
        
        if (result.success) {
            showToast(result.message, 'success');
            
            // Update original values and remove modified class
            document.querySelectorAll('.points-input').forEach(input => {
                input.setAttribute('data-original', input.value);
                input.classList.remove('modified');
            });
            
            updateStatistics();
        } else {
            showToast(result.message || 'Failed to update points', 'error');
        }
    } catch (error) {
        showToast('An error occurred while updating points', 'error');
        console.error('Error bulk updating points:', error);
    }
}

function bulkResetToAutoGrade() {
    if (!confirm('Are you sure you want to reset all answers to auto-grade? This will overwrite all manual adjustments.')) {
        return;
    }
    
    document.querySelectorAll('.reset-points-btn').forEach(btn => {
        btn.click();
    });
}

function bulkSetZero() {
    if (!confirm('Are you sure you want to set all answers to 0 points?')) {
        return;
    }
    
    document.querySelectorAll('.points-input').forEach(input => {
        input.value = '0.0';
        input.classList.add('modified');
    });
}

function bulkSetFullPoints() {
    if (!confirm('Are you sure you want to give full points to all answers?')) {
        return;
    }
    
    document.querySelectorAll('.points-input').forEach(input => {
        const container = input.closest('.points-edit-container');
        const maxPoints = parseFloat(container.getAttribute('data-max-points')) || 0;
        input.value = maxPoints.toFixed(1);
        input.classList.add('modified');
    });
}

function updateStatistics() {
    // Recalculate totals from current input values
    let totalPoints = 0;
    let correctAnswers = 0;
    let totalQuestions = 0;
    let maxPoints = 0;

    document.querySelectorAll('.points-input').forEach(input => {
        const points = parseFloat(input.value) || 0;
        const container = input.closest('.points-edit-container');
        const questionMaxPoints = parseFloat(container.getAttribute('data-max-points')) || 0;
        
        totalPoints += points;
        maxPoints += questionMaxPoints;
        totalQuestions++;
        
        if (points > 0) {
            correctAnswers++;
        }
    });

    const percentage = maxPoints > 0 ? (totalPoints / maxPoints) * 100 : 0;

    // Update statistics display
    const statNumbers = document.querySelectorAll('.stat-number');
    if (statNumbers.length >= 4) {
        statNumbers[0].textContent = totalPoints.toFixed(1);
        statNumbers[1].textContent = totalQuestions.toString();
        statNumbers[2].textContent = correctAnswers.toString();
        statNumbers[3].textContent = percentage.toFixed(1) + '%';
    }
}

function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.innerHTML = `
        <div class="toast-body p-3">
            <div class="d-flex align-items-center">
                <div class="me-2">
                    ${type === 'success' ? '<i class="fas fa-check-circle"></i>' : 
                      type === 'error' ? '<i class="fas fa-exclamation-circle"></i>' : 
                      '<i class="fas fa-info-circle"></i>'}
                </div>
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close btn-close-white" onclick="this.closest('.toast').remove()"></button>
            </div>
        </div>
    `;
    
    toastContainer.appendChild(toast);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (toast.parentNode) {
            toast.remove();
        }
    }, 5000);
}
</script>
}