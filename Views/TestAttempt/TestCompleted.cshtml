@model TestPlatform2.Models.TestCompletedViewModel
@{
ViewData["Title"] = "Test Completed";
}

<style>
    /* Test Completed Specific Styles */
    body {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        min-height: 100vh;
    }

    .completion-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem 1rem;
    }

    /* Celebration Header */
    .celebration-header {
        text-align: center;
        margin-bottom: 3rem;
        padding: 3rem 2rem;
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        border-radius: 20px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        position: relative;
        overflow: hidden;
    }

    .celebration-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #28a745, #20c997, #17a2b8, #007bff);
        animation: shimmer 2s ease-in-out infinite;
    }

    @@keyframes shimmer {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    .success-icon {
        font-size: 5rem;
        color: #28a745;
        margin-bottom: 1.5rem;
        animation: bounceIn 1s ease-out;
        text-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    }

    @@keyframes bounceIn {
        0% {
            opacity: 0;
            transform: scale(0.3) rotate(-180deg);
        }
        50% {
            opacity: 1;
            transform: scale(1.05) rotate(-5deg);
        }
        70% {
            transform: scale(0.9) rotate(2deg);
        }
        100% {
            opacity: 1;
            transform: scale(1) rotate(0deg);
        }
    }

    .completion-title {
        font-size: 3rem;
        font-weight: 800;
        background: linear-gradient(135deg, #28a745, #20c997);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 1rem;
        line-height: 1.2;
    }

    .completion-subtitle {
        font-size: 1.25rem;
        color: #6c757d;
        margin-bottom: 0.5rem;
    }

    .completion-message {
        font-size: 1rem;
        color: #868e96;
    }

    /* Results Grid */
    .results-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-bottom: 3rem;
    }

    .result-card {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .result-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, var(--card-accent, #007bff), var(--card-accent-light, #66b3ff));
    }

    .result-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.15);
    }

    .score-card {
        --card-accent: #28a745;
        --card-accent-light: #68d391;
    }

    .info-card {
        --card-accent: #007bff;
        --card-accent-light: #66b3ff;
    }

    .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        gap: 0.75rem;
    }

    .card-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
        background: linear-gradient(135deg, var(--card-accent), var(--card-accent-light));
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0;
    }

    /* Score Display */
    .score-display {
        text-align: center;
        margin-bottom: 2rem;
    }

    .score-number {
        font-size: 4rem;
        font-weight: 900;
        line-height: 1;
        margin-bottom: 0.5rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .score-fraction {
        font-size: 1.125rem;
        color: #6c757d;
        margin-bottom: 1rem;
    }

    .score-progress {
        background: #f1f3f4;
        border-radius: 50px;
        height: 12px;
        margin-bottom: 1rem;
        overflow: hidden;
        box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .score-progress-bar {
        height: 100%;
        border-radius: 50px;
        transition: width 2s ease-out;
        background: linear-gradient(90deg, #28a745, #20c997);
        box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
        position: relative;
    }

    .score-progress-bar::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        animation: shine 2s ease-in-out infinite;
    }

    @@keyframes shine {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }

    .score-percentage {
        font-size: 1.5rem;
        font-weight: 700;
        color: #28a745;
    }

    /* Score Color Classes */
    .score-excellent {
        color: #28a745;
    }

    .score-good {
        color: #17a2b8;
    }

    .score-fair {
        color: #ffc107;
    }

    .score-poor {
        color: #dc3545;
    }

    .score-excellent .score-progress-bar {
        background: linear-gradient(90deg, #28a745, #20c997);
    }

    .score-good .score-progress-bar {
        background: linear-gradient(90deg, #17a2b8, #20c997);
    }

    .score-fair .score-progress-bar {
        background: linear-gradient(90deg, #ffc107, #ffeb3b);
    }

    .score-poor .score-progress-bar {
        background: linear-gradient(90deg, #dc3545, #ff6b6b);
    }

    /* Info Items */
    .info-items {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 12px;
        transition: all 0.2s ease;
    }

    .info-item:hover {
        background: #e9ecef;
        transform: translateX(4px);
    }

    .info-icon {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        background: linear-gradient(135deg, #007bff, #66b3ff);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1rem;
        flex-shrink: 0;
    }

    .info-content {
        flex: 1;
    }

    .info-label {
        font-size: 0.875rem;
        color: #6c757d;
        margin-bottom: 0.25rem;
        font-weight: 500;
    }

    .info-value {
        font-size: 1rem;
        color: #2d3748;
        font-weight: 600;
    }

    /* Test Summary */
    .test-summary {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 3rem;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
    }

    .summary-header {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f1f3f4;
    }

    .summary-icon {
        width: 56px;
        height: 56px;
        border-radius: 16px;
        background: linear-gradient(135deg, #6f42c1, #8b5cf6);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.75rem;
    }

    .summary-content h2 {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2d3748;
        margin: 0 0 0.5rem 0;
    }

    .summary-description {
        color: #6c757d;
        margin: 0;
    }

    /* Action Section */
    .action-section {
        text-align: center;
        padding: 2rem;
        background: white;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
    }

    .action-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #2d3748;
        margin-bottom: 2rem;
    }

    .action-button {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        padding: 1rem 2rem;
        background: linear-gradient(135deg, #007bff, #0056b3);
        color: white;
        text-decoration: none;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1.125rem;
        box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
        transition: all 0.3s ease;
        border: none;
    }

    .action-button:hover {
        background: linear-gradient(135deg, #0056b3, #004085);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
        color: white;
        text-decoration: none;
    }

    .action-button:active {
        transform: translateY(0);
    }

    /* Performance Badge */
    .performance-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.5rem;
        border-radius: 50px;
        font-weight: 600;
        font-size: 1rem;
        margin-bottom: 1rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .performance-excellent {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .performance-good {
        background: linear-gradient(135deg, #17a2b8, #20c997);
        color: white;
        box-shadow: 0 4px 12px rgba(23, 162, 184, 0.3);
    }

    .performance-fair {
        background: linear-gradient(135deg, #ffc107, #ffeb3b);
        color: #2d3748;
        box-shadow: 0 4px 12px rgba(255, 193, 7, 0.3);
    }

    .performance-poor {
        background: linear-gradient(135deg, #dc3545, #ff6b6b);
        color: white;
        box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
    .completion-container {
        padding: 1rem;
    }

    .celebration-header {
        padding: 2rem 1.5rem;
        margin-bottom: 2rem;
    }

    .completion-title {
        font-size: 2rem;
    }

    .success-icon {
        font-size: 3.5rem;
    }

    .results-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .result-card {
        padding: 1.5rem;
    }

    .score-number {
        font-size: 3rem;
    }

    .card-header {
        margin-bottom: 1rem;
    }

    .card-icon {
        width: 40px;
        height: 40px;
        font-size: 1.25rem;
    }

    .card-title {
        font-size: 1.125rem;
    }

    .test-summary {
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .summary-header {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
    }

    .summary-content h2 {
        font-size: 1.25rem;
    }

    .info-items {
        gap: 1rem;
    }

    .info-item {
        padding: 0.75rem;
    }

    .action-button {
        padding: 0.875rem 1.75rem;
        font-size: 1rem;
    }
    }

    @@media (max-width: 480px) {
    .completion-title {
        font-size: 1.75rem;
    }

    .success-icon {
        font-size: 3rem;
    }

    .score-number {
        font-size: 2.5rem;
    }

    .celebration-header {
        padding: 1.5rem 1rem;
    }

    .result-card,
    .test-summary,
    .action-section {
        padding: 1.25rem;
    }
    }

    /* Animation for score counting */
    .score-counter {
        animation: countUp 2s ease-out;
    }

    @@keyframes countUp {
        from {
            opacity: 0;
            transform: scale(0.5);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    /* Floating particles effect */
    .celebration-header::after {
        content: '🎉';
        position: absolute;
        top: 10%;
        left: 10%;
        font-size: 2rem;
        animation: float 3s ease-in-out infinite;
        opacity: 0.7;
    }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
        }
        50% {
            transform: translateY(-20px) rotate(180deg);
        }
    }
</style>

<div class="completion-container">
    <!-- Celebration Header -->
    <div class="celebration-header">
        <div class="success-icon">
            <i class="fas fa-check-circle"></i>
        </div>
        <h1 class="completion-title">Test Completed!</h1>
        <p class="completion-subtitle">Congratulations on finishing the test</p>
        <p class="completion-message">Your responses have been submitted successfully</p>

        @{
        var percentScore = (Model.Score / Model.TotalPoints) * 100;
        var performanceClass = percentScore >= 90 ? "performance-excellent" :
        percentScore >= 75 ? "performance-good" :
        percentScore >= 60 ? "performance-fair" : "performance-poor";
        var performanceText = percentScore >= 90 ? "Excellent" :
        percentScore >= 75 ? "Good Job" :
        percentScore >= 60 ? "Well Done" : "Keep Trying";
        }

        <div class="performance-badge @performanceClass">
            <i class="fas fa-star"></i>
            @performanceText
        </div>
    </div>

    <!-- Test Summary -->
    <div class="test-summary">
        <div class="summary-header">
            <div class="summary-icon">
                <i class="fas fa-clipboard-check"></i>
            </div>
            <div class="summary-content">
                <h2>@Model.TestName</h2>
                @if (!string.IsNullOrEmpty(Model.Description))
                {
                <p class="summary-description">@Model.Description</p>
                }
            </div>
        </div>
    </div>

    <!-- Results Grid -->
    <div class="results-grid">
        <!-- Score Card -->
        <div class="result-card score-card">
            <div class="card-header">
                <div class="card-icon">
                    <i class="fas fa-star"></i>
                </div>
                <h3 class="card-title">Your Score</h3>
            </div>

            <div class="score-display">
                @{
                var scoreClass = percentScore >= 90 ? "score-excellent" :
                percentScore >= 75 ? "score-good" :
                percentScore >= 60 ? "score-fair" : "score-poor";
                }

                <div class="score-number score-counter @scoreClass">
                    @Model.Score.ToString("0.0")
                </div>
                <div class="score-fraction">
                    out of @Model.TotalPoints.ToString("0.0") points
                </div>

                <div class="score-progress">
                    <div class="score-progress-bar @scoreClass"
                         style="width: @percentScore.ToString("0.0")%;"
                         data-percentage="@percentScore.ToString("0.0")">
                    </div>
                </div>

                <div class="score-percentage @scoreClass">
                    @percentScore.ToString("0.0")%
                </div>
            </div>
        </div>

        <!-- Info Card -->
        <div class="result-card info-card">
            <div class="card-header">
                <div class="card-icon">
                    <i class="fas fa-info-circle"></i>
                </div>
                <h3 class="card-title">Test Information</h3>
            </div>

            <div class="info-items">
                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="info-content">
                        <div class="info-label">Student</div>
                        <div class="info-value">@Model.FirstName @Model.LastName</div>
                    </div>
                </div>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-envelope"></i>
                    </div>
                    <div class="info-content">
                        <div class="info-label">Email</div>
                        <div class="info-value">@Model.StudentEmail</div>
                    </div>
                </div>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="info-content">
                        <div class="info-label">Time Taken</div>
                        <div class="info-value">
                            @if (Model.TimeTaken.Hours > 0)
                            {
                            @($"{Model.TimeTaken.Hours}h {Model.TimeTaken.Minutes}m {Model.TimeTaken.Seconds}s")
                            }
                            else
                            {
                            @($"{Model.TimeTaken.Minutes}m {Model.TimeTaken.Seconds}s")
                            }
                        </div>
                    </div>
                </div>

                <div class="info-item">
                    <div class="info-icon">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <div class="info-content">
                        <div class="info-label">Completed On</div>
                        <div class="info-value">@Model.EndTime.ToString("MMMM dd, yyyy 'at' h:mm tt")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Section -->
    <div class="action-section">
        <h3 class="action-title">What would you like to do next?</h3>
        <a href="/" class="action-button">
            <i class="fas fa-home"></i>
            Return to Home
        </a>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animate score counting
        const scoreElement = document.querySelector('.score-number');
        const targetScore = parseFloat(scoreElement.textContent);
        const duration = 2000; // 2 seconds
        const increment = targetScore / (duration / 16); // 60fps
        let currentScore = 0;

        const counter = setInterval(() => {
            currentScore += increment;
            if (currentScore >= targetScore) {
                currentScore = targetScore;
                clearInterval(counter);
            }
            scoreElement.textContent = currentScore.toFixed(1);
        }, 16);

        // Animate progress bar
        const progressBar = document.querySelector('.score-progress-bar');
        if (progressBar) {
            const targetWidth = progressBar.getAttribute('data-percentage');
            progressBar.style.width = '0%';

            setTimeout(() => {
                progressBar.style.width = targetWidth + '%';
            }, 500);
        }

        // Add floating animation to celebration elements
        setTimeout(() => {
            const celebrationHeader = document.querySelector('.celebration-header');
            if (celebrationHeader) {
                // Add some celebration particles
                for (let i = 0; i < 5; i++) {
                    const particle = document.createElement('div');
                    particle.innerHTML = ['🎉', '🎊', '⭐', '🏆', '🎈'][i];
                    particle.style.position = 'absolute';
                    particle.style.fontSize = '1.5rem';
                    particle.style.top = Math.random() * 80 + 10 + '%';
                    particle.style.left = Math.random() * 80 + 10 + '%';
                    particle.style.animation = `float ${3 + Math.random() * 2}s ease-in-out infinite`;
                    particle.style.animationDelay = Math.random() * 2 + 's';
                    particle.style.opacity = '0.6';
                    particle.style.pointerEvents = 'none';
                    celebrationHeader.appendChild(particle);
                }
            }
        }, 1000);

        // Staggered animation for info items
        const infoItems = document.querySelectorAll('.info-item');
        infoItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateX(-20px)';
            item.style.transition = 'all 0.5s ease';

            setTimeout(() => {
                item.style.opacity = '1';
                item.style.transform = 'translateX(0)';
            }, 800 + (index * 150));
        });

        // Add hover sound effect simulation
        const actionButton = document.querySelector('.action-button');
        if (actionButton) {
            actionButton.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px) scale(1.02)';
            });

            actionButton.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0) scale(1)';
            });
        }
    });
</script>